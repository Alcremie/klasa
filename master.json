{"meta":{"generator":"0.0.1","format":19},"custom":{"Getting Started":{"name":"Getting Started","files":{"GettingStarted":{"name":"Getting Started","type":"md","content":"# Welcome to the klasa#{@branch} documentation\n\n## Installing Klasa\n\nYou can install this branch of klasa with the following command:\n\n```sh\nnpm install --save discordjs/discord.js dirigeants/klasa#{@branch}\n```\n\n### Using Klasa\n\nCreate a file called `app.js` (or whatever you prefer) which will initiate and configure Klasa.\n\n```javascript\nconst { Client } = require('klasa');\n\nnew Client({\n\tfetchAllMembers: false,\n\tprefix: '+',\n\tcommandEditing: true,\n\ttyping: true,\n\treadyMessage: (client) => `Successfully initialized. Ready to serve ${client.guilds.size} guilds.`\n}).login('your-bot-token');\n```\n\n### Client Options: {@link KlasaClientOptions}\n\n{@typedef KlasaClientOptions}\n\n>1. ownerID is acquired from the Discord API if not provided: `client.application.owner.id`\n>1. quotedStringSupport is can be overridden per command.\n\n> KlasaClientOptions are merged with discord.js' ClientOptions, see [ClientOptions in the discord.js docs](https://discord.js.org/#/docs/main/master/typedef/ClientOptions).\n\n## Running the bot\n\nThen, run the following in your folder:\n\n```sh\nnpm install\nnode app.js\n```\n\n> **Requirements**: Requires Node 10.1.0 or higher to run. Depends on Discord.js v12.0.0-dev or higher (this is peer depended on, so you can choose a non-broken commit).\n\n## What's next?\n\nKlasa will create folders in your directory to make your own custom pieces in. Klasa will automatically check those folders on bootup, or if you reload all of a piece's type. `+reload commands` etc assuming your prefix is `+` like in the example app.js file above.\n","path":"guides/Getting Started/GettingStarted.md"},"UnderstandingPermissionLevels":{"name":"Understanding Permission Levels","type":"md","content":"Permission Levels are what defines who has permission to use what command. They cascade up to a permission level break, so guild owners can do everything the lower levels can do, and so on.\n\nFor instance the conf command requires level 6 to run, by default this is how it works:\n\n- level 6 requires 'MANAGE_GUILD' Permission: true/false\n- level 7 is the Guild Owner: true/false\n- level 8 is not defined, and always returns false\n- level 9 is the Bot Owner, and has break so we will stop checking higher rules: true/false\n\nIf any check from 6-9 returns true, the user will be able to run that command. Also, if no break is encountered, the command will silently fail, instead of telling the user \"they don't have permission to use x command\"...\n\n## Understanding \"Breaking Levels\"\n\nPretend for a moment, that permission levels work like this:\n\n<!-- eslint-disable no-fallthrough -->\n\n```javascript\nfunction permissionLevel(message) {\n\tswitch (level) {\n\t\tcase 0:\n\t\t\treturn true;\n\t\tcase 1:\n\t\tcase 2:\n\t\tcase 3:\n\t\tcase 4:\n\t\tcase 5:\n\t\tcase 6:\n\t\t\tif (message.guild && message.member.permissions.has('MANAGE_GUILD')) return true;\n\t\tcase 7:\n\t\t\tif (message.guild && message.member === message.guild.owner) return true;\n\t\tcase 8:\n\t\tcase 9:\n\t\t\tif (message.author === message.client.owner) return true;\n\t\t\tbreak;\n\t\tcase 10:\n\t\t\tif (message.author === message.client.owner) return true;\n\t\t\treturn false;\n\t}\n\tthrow 'You don\\'t have permission';\n}\n```\n\n<!-- eslint-enable no-fallthrough -->\n\nCompletely ignoring that your check function can be async and returning false is how you progress to the next check if applicable, it works like that. It checks levels starting with the __minimum level__ acceptable for any action. (Usually a {@link Command#permissionLevel}) And it continues checking higher levels until it __returns true__ or hits a break. And if there is no break when levels run out, it's silent.\n\nThis does mean that you can design permission levels where guild owners, and even you the client/bot owner can't access. Say you have a breaking permission level 3 that checks if `message.author.settings.xp >= 1000`. When a command with a permissionLevel of 3 is called, if you don't have that much xp, it will return you don't have permission to use that command even though you may satisfy higher levels. It breaks at that level, and won't check anything higher.\n\n## Creating Completely Custom PermissionLevels\n\nEach level consists of a number (the level), a function (the check function that returns true or false), and an options object with break (if the level is breaking) and fetch (if the level should autofetch member when appropriate). Check: {@link PermissionLevels#add}\n\nExample:\n\n```javascript\nconst { Client, PermissionLevels } = require('klasa');\nconst config = require('./config.json');\n\nconfig.permissionLevels = new PermissionLevels()\n\t/*\n\t * Optionally you can pass a number to set a custom number of permission levels.\n\t * It is not advised however, as internal commands expect 10 to be the highest permission level.\n\t * Modifying away from 10 without further modification of all core commands,\n\t * could put your server at risk of malicious users using the core eval command.\n\t */\n\t// everyone can use these commands\n\t.add(0, () => true)\n\t// Members of guilds must have 'MANAGE_GUILD' permission\n\t.add(6, ({ guild, member }) => guild && member.permissions.has('MANAGE_GUILD'), { fetch: true })\n\t// The member using this command must be the guild owner\n\t.add(7, ({ guild, member }) => guild && member === guild.owner, { fetch: true })\n\t/*\n\t * Allows the Bot Owner to use any lower commands\n\t * and causes any command with a permission level 9 or lower to return an error if no check passes.\n\t */\n\t.add(9, ({ author, client }) => author === client.owner, { break: true })\n\t// Allows the bot owner to use Bot Owner only commands, which silently fail for other users.\n\t.add(10, ({ author, client }) => author === client.owner);\n\nnew Client(config).login(config.token);\n```\n\n## Customizing the default PermissionLevels\n\nAnother way you can customize permission levels is simply modifying the defaultPermissionLevels:\n\nExample:\n\n```javascript\nconst { Client } = require('klasa');\nconst config = require('./config.json');\n\nClient.defaultPermissionLevels\n\t// let some group of people who solved some easteregg clues use a special command/some custom non-admin role\n\t.add(3, ({ guild, author }) => guild && guild.settings.solvers.includes(author.id))\n\t// Make the requirements to use the conf command stricter than just who can add the bot to the guild\n\t.add(6, ({ guild, member }) => guild && member.permissions.has('ADMINISTRATOR'), { fetch: true })\n\t// add a role above guild owners that let your support team help setup/troubleshoot on other guilds.\n\t.add(8, ({ client, author }) => client.settings.botSupportTeam.includes(author.id));\n\nnew Client(config).login(config.token);\n```\n\n## What's different from Komada?\n\nPermission levels are fairly close to Komada's Permission levels, with a few exceptions.\n\n### The default permission level structure is different: {@link KlasaClient.defaultPermissionLevels}\n\n| Level | Break | Fetch | Description                                           |\n| ----- | ----- | ----- | ----------------------------------------------------- |\n| 0     | false | false | Everyone can use these commands                       |\n| 6     | false | true  | Members of guilds must have 'MANAGE_GUILD' permission |\n| 7     | false | true  | Guild Owner                                           |\n| 9     | true  | false | Bot Owner                                             |\n| 10    | false | false | Bot Owner (silent)                                    |\n\n>This gives the bot creator a cleaner slate to work with when first creating a bot. (Not all bots are mod bots, so mod/admin roles were largely unneeded. Also there is infinitely more that you would want to put between 0 and administrative users, than between Guild Owner and Bot Owner). This helps keep bot creators from having to completely \"remake the wheel\" of permissions in almost all cases, without preventing that if wanted. (This fixes most cases of those who perpetually had to transfer/modify core commands to match their custom permissionLevels.)\n\n### Since inhibitors are async in Klasa, check functions may be async\n\nSo you can have:\n\n```javascript\nClient.defaultPermissionLevels\n\t.add(3, async (message) => {\n\t\tconst value = await someAsyncFunction();\n\t\treturn value === someOtherValue;\n\t});\n```\n","path":"guides/Getting Started/UnderstandingPermissionLevels.md"},"UnderstandingSettingsGateway":{"name":"Understanding SettingsGateway","type":"md","content":"# SettingsGateway\n\nWhat is SettingsGateway? It is an interface that connects your Discord bot with a database and ensures maximum performance by using a very refined cache system that is always up to date with the database. In a point of view, SettingsGateway can be understood as an abstracted [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping) as it's able to run any kind database (with a compatible {@link Provider}) and manage the data efficiently.\n\nBy default, Klasa uses the [JSON](https://github.com/dirigeants/klasa/blob/master/src/providers/json.js) provider. Do not be fooled and insta-replace it with SQLite, as Klasa's JSON provider writes the data [atomically](https://en.wikipedia.org/wiki/Atomicity_%28database_systems%29). In other words, it is very rare for the data to be corrupted.\n\nThanks to the abstraction of SettingsGateway, the developer has many options, for example, if you want to change the database that manages the data, you just change one line of code, without needing to rewrite everything that relies on it, nor you need to rewrite the interface itself in order to be able to work with a different database.\n\n## Database Engine\n\nAs mentioned before, SettingsGateway is abstracted, it does not rely on a very specific database, but can use any of them. In a production bot, you may want to use a process-based database such as rethinkdb, mongodb or postgresql, you can check and download them from the [klasa-pieces](https://github.com/dirigeants/klasa-pieces/) repository so you don't need to make one from scratch.\n\nNow... how do we update it? Go to your main file, where {@link KlasaClient} is initialized, and add a new option to your {@link KlasaClientOptions}. The following code snippet as an example:\n\n```javascript\nconst client = new KlasaClient({ providers: { default: 'rethinkdb' } });\n```\n\nIf you have other options, such as a prefix, then your main file would look like this:\n\n```javascript\nconst { KlasaClient } = require('klasa');\n\nnew KlasaClient({\n\tprefix: 'k!',\n\tproviders: { default: 'rethinkdb' }\n}).login('A_BEAUTIFUL_TOKEN_AINT_IT?');\n```\n\nAnd now, you're using rethinkdb's provider to store the data from SettingsGateway.\n\n## Creating Gateways\n\nAnother advantage of using this interface is that it can handle multiple databases simultaneously, for example, Klasa handles 3 gateways at the same time: `clientStorage` for Client, `guilds` for Guild and `users` for User. Plus, there's the possibility to add a new {@link Gateway} by using {@link KlasaClient#gateways}:\n\nLet's say I want to add a new Gateway instance called `channels` that stores data to complement our permissions, and I want the **postgresql** provider to handle it but **rethinkdb** as the default provider.\n\n```javascript\nconst { KlasaClient, Schema } = require('klasa');\n\nconst client = new KlasaClient({\n\tprefix: 'k!',\n\tproviders: { default: 'rethinkdb' }\n});\n\n// Now, we create it:\nclient.gateways.register('channels', {\n\tprovider: 'postgresql',\n\tschema: new Schema()\n\t\t.add('disabledCommands', 'Command', { array: true })\n\t\t.add('commandThrottle', 'Integer', { default: 5, min: 0, max: 60 })\n\t\t.add('commandReset', 'Integer', { default: 2, min: 0, max: 30 })\n});\n\nclient.login('A_BEAUTIFUL_TOKEN_AINT_IT?');\n```\n\n> **Note**: You can have any schema, check the links below to understand how to expand it later.\n\nAnd then, you can access to it by:\n\n```javascript\nclient.gateways.channels;\n```\n\n## Customizing the options for each built-in gateway\n\nThis is available in 0.5.0 since the PR [#152](https://github.com/dirigeants/klasa/pull/152), and you're able to configure the three built-in gateways: `guilds`, `users` and `clientStorage`. The option to configure them is {@link KlasaClientOptions.gateways}, where you would add the option `gateways` to your KlasaClientOptions:\n\n```javascript\nnew Klasa.Client({\n\tprefix: 'k!',\n\tproviders: { default: 'json' },\n\tgateways: {\n\t\tguilds: { provider: 'rethinkdb' },\n\t\tusers: { provider: 'postgresql' }\n\t}\n}).login('A_BEAUTIFUL_TOKEN_AINT_IT?');\n```\n\nWhere the *clientStorage* gateway would take the default options (json provider), the *guilds* gateway would use the rethinkdb provider, and finally the *users* one would use the postgresql provider. These options are {@link GatewayDriver.GatewayDriverAddOptions}.\n\n## Further Reading:\n\n- {@tutorial UnderstandingSchemaPieces}\n- {@tutorial UnderstandingSchemaFolders}\n- {@tutorial SettingsGatewayKeyTypes}\n- {@tutorial SettingsGatewaySettingsUpdate}\n","path":"guides/Getting Started/UnderstandingSettingsGateway.md"},"UnderstandingUsageStrings":{"name":"Understanding Usage Strings","type":"md","content":"## Usage Structure\n\n`<>` required argument, `[]` optional argument `<Name:Type{Min,Max}/Regex/Flags>`\n\n- **Name** Mostly used for debugging message, unless the type is Literal in which it compares the argument to the name.\n- **Type** The type of variable you are expecting.\n- **Min, Max** Minimum or Maximum for a giving variable (works on strings in terms of length, and on all types of numbers in terms of value) You are allowed to define any combination of min and max. Omit for none, `{min}` for min, `{,max}` for max. If you set `min` and `max` with the same integer, then the provided string must have equal length.\n- **Regex, Flags** A regular expression with double escaped `\\` to match against the argument. It is only valid for regex types of arguments, but gives you great flexibility on custom argument parsing. Flags are regex flags to apply to the regex pattern.\n- **Special Repeat Tag** `[...]` will repeat the last usage optionally until you run out of arguments. Useful for doing something like `<SearchTerm:str> [...]` which will allow you to take as many search terms as you want, per your Usage Delimiter.\n\n> Note: You can set multiple options in an argument by writing `|`. For example: `<Message:message|Content:string{4,16}>` will work when you provide a message ID or a string with a length between 4 and 16 (including both limits).\n\n### Usage Types\n\n| Type                       | Description                                                                                                                        |\n| -------------------------: | ---------------------------------------------------------------------------------------------------------------------------------- |\n| `literal`                  | Literally equal to the name. This is the default type if none is defined.                                                          |\n| `boolean`                  | A [Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean).                             |\n| `float` , `num` , `number` | A [Floating Point Number](https://en.wikipedia.org/wiki/Floating-point_arithmetic).                                                |\n| `int` , `integer`          | An [Integer](https://en.wikipedia.org/wiki/Integer).                                                                               |\n| `reg` , `regex` , `regexp` | A [Regular Expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).                   |\n| `str` , `string`           | A [String](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String).                                  |\n| `url`                      | A [URL](https://en.wikipedia.org/wiki/URL).                                                                                        |\n| `channel`                  | A [TextChannel](https://discord.js.org/#/docs/main/master/class/TextChannel) instance returned from the channel ID or channel tag. |\n| `guild`                    | A [Guild](https://discord.js.org/#/docs/main/master/class/Guild) instance returned from the guild ID.                              |\n| `member`                   | A [GuildMember](https://discord.js.org/#/docs/main/master/class/GuildMember) instance returned from the member ID or mention.      |\n| `msg` , `message`          | A [Message](https://discord.js.org/#/docs/main/master/class/Message) instance returned from the message ID.                        |\n| `role`                     | A [Role](https://discord.js.org/#/docs/main/master/class/Role) instance returned from the role ID or mention.                      |\n| `user` , `mention`         | A [User](https://discord.js.org/#/docs/main/master/class/User) instance returned from the user ID or mention.                      |\n| `custom`                   | A custom argument resolver, takes a custom method as fourth parameter.                                                             |\n| `store`                    | Any store, whichever resolves first in order of store types alphabetically.                                                        |\n| `piece`                    | Any piece, whichever resolves first in order of piece types alphabetically.                                                        |\n| `cmd` , `command`          | A {@link Command} instance returned from the command name or alias.                                                                |\n| `event`                    | An {@link Event} instance returned from the event name.                                                                            |\n| `extendable`               | An {@link Extendable} instance returned from the extendable name.                                                                  |\n| `finalizer`                | A {@link Finalizer} instance returned from the finalizer name.                                                                     |\n| `inhibitor`                | An {@link Inhibitor} instance returned from the inhibitor name.                                                                    |\n| `language`                 | A {@link Language} instance returned from the language name.                                                                       |\n| `monitor`                  | A {@link Monitor} instance returned from the monitor name.                                                                         |\n| `provider`                 | A {@link Provider} instance returned from the provider name.                                                                       |\n| `task`                     | A {@link Task} instance returned from the task name.                                                                               |\n| `date`                     | A Date instance returned from the parse of a string into the Date constructor.                                                     |\n| `duration`                 | A Date instance returned from the parsed human duration to milliseconds.                                                           |\n| `time`                     | A Date instance returned from date or duration.                                                                                    |\n\n> Note: `Literal` is very useful in arguments with multiple options.\n\n___\n\n# Using arguments in your command.\n\nNow, after we understand how to configure the command, we'll start writing it:\n\n```javascript\nmodule.exports = class extends Command {\n\n\tasync run(message, [...params]) {\n\t\t// This is where you place the code you want to run when your command is called\n\t}\n\n};\n```\n\n`[...params]` represents a variable number of parameters given when the command is run. The name of the parameters in the array (and their count) is determined by the `usage` property and its given arguments.\n\n> Note that the commands' parameters are an array. This is a trick called [Destructuring assignment](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\nFor example, when you have: `\"<msg:message> <delete|edit> [newContent:string]\"` as your usage, and `\"|\"` as your usageDelim, then the following code block is an example of how it would look like, and how we would work with them.\n\n```javascript\nmodule.exports = class extends Command {\n\n\tasync run(message, [msg, action, newContent]) {\n\t\t// code\n\t}\n\n};\n```\n\nIn which `message` is the argument assigned to the message object as provided in `<Message:message>` argument from usage. Same does `action` for `<delete|edit>` and respectively.\n\n> Keep in mind that we declared `newContent` as an optional argument, if it's not provided, it'll return undefined.\n\nKeep in mind that arguments are delimited by the character or combination of characters written in *usageDelim*. In this case, we have assigned the character `|` for it. How do we use this command? Easy:\n\n`+messager 293107496191655936|delete`\n\nThe line above will execute the command with the name `messager` (or a command with `messager` as an alias), it'll use [Channel.messages.fetch](https://discord.js.org/#/docs/main/master/class/MessageStore?scrollTo=fetch). If the message is not found (you mistyped it or the message is in another channel) it'll warn you that the message hasn't been found. The next argument is a literal, in which must be either `delete` or `edit`.\n\n# Using regex arguments in your command.\n\nRegex arguments give you even more flexibility to define custom matching. Regex in usage needs to be double escaped like the following: `<hexColor:regex/#?([\\\\da-f]{6})/i>`. That regex will resolve into: `/#?([\\da-f]{6})/i` which should match any hexcolor string. When you use a regex argument, the result of [RegExp.prototype.exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) will be passed into the command.\n\nSo we can do the following destructuring to get the first matching group of the hexColor arg:\n\n```javascript\nmodule.exports = class extends Command {\n\n\tasync run(message, [[, hexColor]]) {\n\t\t// code\n\t}\n\n};\n```\n\nSo the command `+getrgb #ab24ff` would make hexColor: 'ab24ff'.\n","path":"guides/Getting Started/UnderstandingUsageStrings.md"},"faq":{"name":"Frequently Asked Questions","type":"md","content":"# Frequently Asked Questions\n\n## Why doesn't my [reboot](https://github.com/dirigeants/klasa/blob/master/src/commands/Admin/reboot.js) command work?\n\nThe reboot command calls [process.exit()](https://nodejs.org/api/process.html#process_process_exit_code), which terminates the process of your bot. For it to automatically turn back on, you need to install a process manager.\n\nA commonly used process manager is [PM2](http://pm2.keymetrics.io/), to set it up for to use for your bot, follow these two steps:\n\n1. Run `npm install pm2 -g`\n1. Start your bot using `pm2 start app.js`, where `app.js` is your main bot file.\n\nFor more information on PM2, check out their [documentation](http://pm2.keymetrics.io/docs/usage/quick-start/) or for a very quick summary, the [Cheat Sheet](http://pm2.keymetrics.io/docs/usage/quick-start/#cheatsheet)\n\n## How do I remove or change a command that's included in Klasa?\n\nIf you want to disable or modify a piece (commands included) which is built into Klasa, you can use the [transfer](https://github.com/dirigeants/klasa/blob/master/src/commands/Admin/transfer.js) command.\n\nRun `+transfer <piece>`, where `<piece>` is the name of the command/piece that you want to modify.\n\nThis will create a copy of the piece into your directory which will override the built-in one, and you can now modify it however you like.\n\nTo disable it, you can set the [enabled option](https://klasa.js.org/#/docs/klasa/master/search?q=enabled) to `false`.\n\n## How do I hide my token from Github?\n\nYou should never expose your token to anyone for any reason. To hide it from Github, you can set it as an [environment variable](https://www.twilio.com/blog/2017/08/working-with-environment-variables-in-node-js.html), or place it in a JSON file.\n\n### JSON File\n\n1. Create a `config.json` file next to your `app.js` file, and paste the following JSON into it:\n\n ```json\n{\n    \"token\": \"\"\n}\n ```\n\n Then, copy your token into the field.\n\n1. In your `.gitignore` file (create one if you don't have it), add `config.json` to it. For information on what the `.gitignore` file is and what it does, visit: <https://git-scm.com/docs/gitignore>.\n\n1. At the top of your `app.js` file, import the token from the `config.json` like so:\n\n```js\nconst { token } = require('./config.json');\n```\n\n1. Finally, **remove your token** from your `app.js` file, and replace it with the `token` variable.\n\n### Environment Variable\n\nFor a tutorial\n\n1. Set `process.env.DISCORD_TOKEN` equal to your bot's token, you can do this by either\n\n    * using the console to set the environment variable every time you run the bot, by doing `set DISCORD_TOKEN=token` \n\n    * using the [dotenv](https://www.npmjs.com/package/dotenv) package. Run `npm install dotenv --save`\n\n1. Put this code at the top of your `app.js` file:\n\n    ```js\n    require('dotenv').config();\n    ```\n\n1. Create a file called `.env` next  to your `app.js`, and put this in it:\n\n    ```toml\n    DISCORD_TOKEN = \"\"\n    ```\n\n    > Place your token after the `=`.\n\n1. Finally, **remove your token** from your `app.js` file, so nothing is passed to the login method, discord.js will [automatically use](https://github.com/discordjs/discord.js/blob/master/src/client/Client.js#L112) the token in the environment variable.\n\n    ```js\n    client.login();\n    ```\n","path":"guides/Getting Started/faq.md"}}},"Piece Basics":{"name":"Piece Basics","files":{"CreatingArguments":{"name":"Creating Arguments","type":"md","content":"Arguments are the resolvers used to convert strings padded by users, into fully resolved parameters that are passed into the command. New arguments are created in the `./arguments/` folder.\n\n```javascript\nconst { Argument } = require('klasa');\n\nmodule.exports = class extends Argument {\n\n\trun(arg, possible, message) {\n\t\t// This is where you want to validate arg and return a resolved param or throw an error\n\t}\n\n};\n```\n\nThe run method in {@link Argument} takes 3 parameters:\n\n| Name             | Type                 | Description                            |\n| ---------------- | -------------------- | -------------------------------------- |\n| **arg**          | string               | The parameter given to parse           |\n| **possible**     | {@link Possible}     | The Possible instance that is running  |\n| **message**      | {@link KlasaMessage} | The message that triggered the command |\n\n```javascript\nconst { Argument } = require('klasa');\nconst REGEX_EMOJI = /^(?:<a?:\\w{2,32}:)?(\\d{17,19})>?$/;\n\nmodule.exports = class extends Argument {\n\n\trun(arg, possible, message) {\n\t\tconst results = REGEX_EMOJI.exec(arg);\n\t\tconst emoji = results ? this.client.emojis.get(results[1]) : null;\n\t\tif (emoji) return emoji;\n\t\tthrow message.language.get('RESOLVER_INVALID_EMOJI', possible.name);\n\t}\n\n};\n```\n\nHow does the new argument work?\n\n1. Let's consider arg is `<:klasa:354702113147846666>`. The result of `exec`uting `REGEX_EMOJI` on that string gives an array-like object: `['<:klasa:354702113147846666>', '354702113147846666', index: 0, input: '<:klasa:354702113147846666>']`.\n1. There are cases the argument does not match, in that case, `results` would be `null`. So we verify its existence and get the first grouping match: `(\\d{17,19})`, which gets the **id** of the emoji, and as we see in the result, it is in the second index: `'354702113147846666'`, and we get the emoji with said id.\n1. If `results` was null, `emoji` would be `null` too due to the ternary condition, but there is also the possibility of emoji being undefined: when the client does not have the Emoji instance cached or is in a guild the bot is not in. The case is, **if the emoji is valid and found, we should return it**.\n1. Finally, the argument was required and/or looping/repeating, so we should throw an error. That error must be a string and you can use i18n to have localized errors.\n\nAnd now, you can use this type in a command! For example, the following:\n\n```javascript\nconst { Command } = require('klasa');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tdescription: 'Get the name of an emoji.',\n\t\t\tusage: '<emoji:emoji>'\n\t\t});\n\t}\n\n\trun(msg, [emoji]) {\n\t\treturn msg.send(`The name of the emoji ${emoji} is: ${emoji.name}`);\n\t}\n\n};\n```\n\n>**note:** An Emoji argument already comes included with Klasa.\n\n## Examples\n\nYou can take a look at the [included core Arguments](https://github.com/dirigeants/klasa/tree/{@branch}/src/arguments), or see some [prebuilt Arguments on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/arguments).\n\n## Further reading\n\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingArguments.md"},"CreatingCommands":{"name":"Creating Commands","type":"md","content":"New commands are created in the `./commands/` folder, where subfolders are the categories offered in the help command. For instance adding `./commands/Misc/test.js` will create a command named `test` in the `Misc` category. Subcategories can also be created by adding a second folder level.\n\n```javascript\nconst { Command } = require('klasa');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tname: 'yourCommandName',\n\t\t\tenabled: true,\n\t\t\trunIn: ['text', 'dm'],\n\t\t\tcooldown: 0,\n\t\t\tdeletable: false,\n\t\t\tbucket: 1,\n\t\t\taliases: [],\n\t\t\tguarded: false,\n\t\t\tnsfw: false,\n\t\t\tpermissionLevel: 0,\n\t\t\trequiredPermissions: [],\n\t\t\trequiredSettings: [],\n\t\t\tsubcommands: false,\n\t\t\tdescription: '',\n\t\t\tquotedStringSupport: false,\n\t\t\tusage: '',\n\t\t\tusageDelim: undefined,\n\t\t\textendedHelp: 'No extended help available.'\n\t\t});\n\t}\n\n\tasync run(message, [...params]) {\n\t\t// This is where you place the code you want to run for your command\n\t}\n\n\tasync init() {\n\t\t/*\n\t\t * You can optionally define this method which will be run when the bot starts\n\t\t * (after login, so discord data is available via this.client)\n\t\t */\n\t}\n\n};\n```\n\n## Options\n\n{@typedef CommandOptions}\n\n> All commands are required to return an [Object Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) you can do that by adding the `async` keyword to the function, there's no need to change anything else.\n\n> All {@link CommandOptions command options} are optional, the code above shows all default values. You can delete any line with an optional value that matches the default value.\n\n>`[...params]` represents a variable number of arguments give when the command is run. The name of the arguments in the array (and their count) is determined by the `usage` property and its given arguments.\n\n## Examples\n\nYou can take a look at the [included core Commands](https://github.com/dirigeants/klasa/tree/{@branch}/src/commands), or see some [prebuilt Commands on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/commands).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingCommands.md"},"CreatingEvents":{"name":"Creating Events","type":"md","content":"Events are placed in `./events/`. If a conflicting event is present in both the core and your client, *only your client version* is loaded and will run when that event is triggered.\n\nTheir structure is the following:\n\n```javascript\nconst { Event } = require('klasa');\n\nmodule.exports = class extends Event {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tname: 'yourEventName',\n\t\t\tenabled: true,\n\t\t\tevent: 'theEventToListenTo',\n\t\t\temitter: client,\n\t\t\tonce: false\n\t\t});\n\t}\n\n\trun(...params) {\n\t\t// This is where you place the code you want to run for your event\n\t}\n\n\tasync init() {\n\t\t/*\n\t\t * You can optionally define this method which will be run when the bot starts\n\t\t * (after login, so discord data is available via this.client)\n\t\t */\n\t}\n\n};\n```\n\nWhere `...params` are arguments you would *normally* get from those events. For example, while the `ready` event would only have none, the `guildMemberAdd` event would be `member`.\n\n## Options\n\n{@typedef EventOptions}\n\n## Examples\n\nYou can take a look at the [included core Events](https://github.com/dirigeants/klasa/tree/{@branch}/src/events), or see some [prebuilt Events on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/events).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingEvents.md"},"CreatingExtendables":{"name":"Creating Extendables","type":"md","content":"Extendables are functions that extend current Discord.js classes by adding methods or properties.\n\nExtendables have the following syntax:\n\n<!-- eslint-disable no-dupe-class-members, no-inline-comments -->\n\n```javascript\nconst { Extendable } = require('klasa');\n\nclass MyExtendable extends Extendable {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tappliesTo: [],\n\t\t\tname: 'nameOfExtendable',\n\t\t\tenabled: true\n\t\t});\n\t}\n\n\t// Getters\n\n\tget myProperty() {\n\t\t// Make a getter\n\t}\n\n\t// Setters\n\n\tset myProperty(value) {\n\t\t// Make a setter\n\t}\n\n\t// Methods\n\n\tmyMethod() {\n\t\t// Make a method\n\t}\n\n\t// Static Methods\n\n\tstatic myMethod() {\n\t\t// Make a static method\n\t}\n\n}\n\n// Static Properties\n\nMyExtendable.myStaticProperty = 'wew'; // Make a static property\n\nmodule.exports = MyExtendable;\n```\n\n<!-- eslint-enable no-dupe-class-members, no-inline-comments -->\n\n## Understanding extendable settings\n\n```javascript\nconst { Extendable } = require('klasa');\n\nmodule.exports = class extends Extendable {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tappliesTo: [],\n\t\t\tname: 'nameOfExtendable',\n\t\t\tenabled: true\n\t\t});\n\t}\n\n};\n```\n\n{@typedef ExtendableOptions}\n\n## Understanding extendables\n\nUnderstanding classes like a blueprint, and all its members (instance and static setters, getters, properties, and methods) as pieces of it, an Extendable would copy all the pieces into all the targetted structures with their respective names. You can define multiple members with different names inside the extended class.\n\n## For Example\n\nImagine we want to extend the [Message](https://discord.js.org/#/docs/main/master/class/Message) class\nso it has a method called `prompt` so you can do `Message#prompt(\"Are you sure you want to continue?\")`\neverywhere in your code, resolving if the user confirms the prompt, or rejecting otherwise. Then, your\nextendable is likely to be like the following:\n\n> You can extend the Message object with this because you're likely to lock the prompt for a user in a channel,\nand Message has both properties of `author` and `channel`.\n\n```js\nconst { Extendable } = require('klasa');\nconst { Message } = require('discord.js');\nconst makePrompt = require('../lib/util/Prompt');\n\nmodule.exports = class extends Extendable {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { appliesTo: [Message] });\n\t}\n\n\tprompt() {\n\t\t// `this` is an instance of Message\n\t\treturn makePrompt(this);\n\t}\n\n};\n```\n\nAfter loading this extendable, `Message.prototype.prompt` will be available as a method that calls and returns `makePrompt`.\n\n## Examples\n\nYou can take a look at the [included core Extendables](https://github.com/dirigeants/klasa/tree/{@branch}/src/extendables), or see some [prebuilt Extendables on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/extendables).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingExtendables.md"},"CreatingFinalizers":{"name":"Creating Finalizers","type":"md","content":"Finalizers are functions run after successful commands, and this is the reason of why all commands **must** return an\n[Object Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\nFinalizers have the following syntax:\n\n```javascript\nconst { Finalizer } = require('klasa');\n\nmodule.exports = class extends Finalizer {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tname: 'myFinalizerName',\n\t\t\tenabled: true\n\t\t});\n\t}\n\n\trun(message, command, response, runTime) {\n\t\t// This is where you place the code you want to run for your finalizer\n\t}\n\n\tasync init() {\n\t\t/*\n\t\t * You can optionally define this method which will be run when the bot starts\n\t\t * (after login, so discord data is available via this.client)\n\t\t */\n\t}\n\n};\n```\n\n## Options\n\n{@typedef PieceOptions}\n\n## Arguments:\n\n- **message**: The message object.\n- **command**: The command used (may not be the same as message.command).\n- **response**: The value the command returns.\n- **runTime**: The time it took to run the command.\n\n## Examples\n\nYou can take a look at the [included core Finalizers](https://github.com/dirigeants/klasa/tree/{@branch}/src/finalizers), or see some [prebuilt Finalizers on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/finalizers).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingFinalizers.md"},"CreatingInhibitors":{"name":"Creating Inhibitors","type":"md","content":"Inhibitors are only ran on commands. They are used to check a variety of conditions before a\ncommand is ever ran, such as checking if a user has the right amount of permissions to use a\ncommand. Core inhibitors are loaded first, and if your code contains an inhibitor of the same name\nit overrides the core inhibitor.\n\nAn inhibitor blocks a command by returning a truthy value (or a promise that fulfills with a\ntruthy value): either a string (which is shown to the user) or `true` (for silent rejections). It\ndoesn't matter whether you return or throw (or resolve or reject a returned promise); the value is\ntreated the same.\n\n```javascript\nconst { Inhibitor } = require('klasa');\n\nmodule.exports = class extends Inhibitor {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tname: 'myInhibitorName',\n\t\t\tenabled: true,\n\t\t\tspamProtection: false\n\t\t});\n\t}\n\n\tasync run(message, command) {\n\t\t// This is where you place the code you want to run for your inhibitor\n\t}\n\n\tasync init() {\n\t\t/*\n\t\t * You can optionally define this method which will be run when the bot starts\n\t\t * (after login, so discord data is available via this.client)\n\t\t */\n\t}\n\n};\n\n```\n\n## Options\n\n{@typedef InhibitorOptions}\n\n## Examples\n\nYou can take a look at the [included core Inhibitors](https://github.com/dirigeants/klasa/tree/{@branch}/src/inhibitors), or see some [prebuilt Inhibitors on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/inhibitors).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingInhibitors.md"},"CreatingLanguages":{"name":"Creating Languages","type":"md","content":"Languages provide localizations to your bot. The built in ones allow you full control over anything the core bot will say. Transferring them (disabling those you don't want to use), and adding on to them, allows you to have a completely multi-lingual bot.\n\nLanguages have the following syntax:\n\n```javascript\nconst { Language } = require('klasa');\n\nmodule.exports = class extends Language {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tname: 'myLanguageName',\n\t\t\tenabled: true\n\t\t});\n\n\t\tthis.language = {\n\t\t\tDEFAULT: (key) => `${key} has not been localized for en-US yet.`,\n\t\t\tDEFAULT_LANGUAGE: 'Default Language',\n\t\t\tSETTING_GATEWAY_EXPECTS_GUILD: 'The parameter <Guild> expects either a Guild or a Guild Object.',\n\t\t\t// ...\n\t\t\tCOMMAND_CONF_RESET: (key, response) => `The key **${key}** has been reset to: \\`${response}\\``\n\t\t};\n\t}\n\n\tasync init() {\n\t\t/*\n\t\t * You can optionally define this method which will be run when the bot starts\n\t\t * (after login, so discord data is available via this.client)\n\t\t * please note, that as the Language is loaded before the client is loaded,\n\t\t * using this.client in a literal sense may throw errors such as:\n\t\t * this.client.user.username would throw \"can't get property username of null\"\n\t\t */\n\t}\n\n};\n```\n\n## Options\n\n{@typedef PieceOptions}\n\n## Using Languages:\n\nThere are some extendables to help use languages. message.language is a read-only property that gets a language instance depending on the configuration. At the same time. The method `message.language.get` is used to get an value from the language package, if it exists, that can accept one or more parameters, being the first one always the key's name, followed by parameters that are used by keys that may have variables. If a key is constant, they're optional.\n\n```javascript\n// message.language will fetch the settings for the guild if it's in a guild or the default if it's in DMs.\n\n// Will skip the settings fetch and return the language which name is that one.\nthis.client.languages.get('en-US');\n\n/*\n * returns 'Default Language' in this example,\n * but if the guild has fr-FR as the configured language it would respond 'Langue par défaut'\n * message.language.get('DEFAULT_LANGUAGE');\n */\n\n/*\n * returns 'The key **prefix** has been reset to: \\`%\\`' in this example,\n * but if the guild has fr-FR as the configured language,\n * it would respond 'La clef **prefix** a été réinitialisée à : \\`%\\`'\n * message.language.get('COMMAND_CONF_RESET', 'prefix', '%');\n */\n```\n\nAdditionally, if one language is lagging behind another, the bot will let the user know, and provide the string in the bot's default language as follows:\n\n```javascript\nmessage.language.get('SomeKeyThatExistsOnlyInEnglish');\n\n// Assuming the bot is configured for fr-FR, the response would be:\n/*\n * `SomeKeyThatExistsOnlyInEnglish n'a pas encore été traduit en 'fr-FR'.\n *\n * Langue par défaut:\n * Whatever that key would respond to normally in english.`\n */\n```\n\nAlso, if a language is disabled, and a guild has it configured, the default language will be used exclusively until either that language is no-longer disabled, or the guild configures another enabled language.\n\n## Examples\n\nYou can take a look at the [included core Languages](https://github.com/dirigeants/klasa/tree/{@branch}/src/languages), or see some [prebuilt Languages on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/languages).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingLanguages.md"},"CreatingMonitors":{"name":"Creating Monitors","type":"md","content":"Monitors are special in that they will always run on any message. This is particularly\nuseful when you need to do checking on the message, such as checking if a message\ncontains a vulgar word (profanity filter). They are almost completely identical to\ninhibitors, the only difference between one is ran on the message, and the other\nis ran on the command. Monitors are loaded as core first, and if your code contains\na monitor of the same name it overrides the core monitor.\n\nTheir structure is identical to inhibitors, being the only difference is that you\ndon't pass a command parameter to them.\n\n```javascript\nconst { Monitor } = require('klasa');\n\nmodule.exports = class extends Monitor {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tname: 'yourMonitorName',\n\t\t\tenabled: true,\n\t\t\tignoreBots: true,\n\t\t\tignoreSelf: true,\n\t\t\tignoreOthers: true,\n\t\t\tignoreWebhooks: true,\n\t\t\tignoreEdits: true,\n\t\t\tignoreBlacklistedUsers: true,\n\t\t\tignoreBlacklistedGuilds: true\n\t\t});\n\t}\n\n\trun(message) {\n\t\t// This is where you place the code you want to run for your monitor\n\t}\n\n\tasync init() {\n\t\t/*\n\t\t * You can optionally define this method which will be run when the bot starts\n\t\t * (after login, so discord data is available via this.client)\n\t\t */\n\t}\n\n};\n```\n\n## Options\n\n{@typedef MonitorOptions}\n\n>As with all other pieces, you can omit any optional option that match the default values.\n\n## Examples\n\nYou can take a look at the [included core Monitors](https://github.com/dirigeants/klasa/tree/{@branch}/src/monitors), or see some [prebuilt Monitors on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/monitors).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingMonitors.md"},"CreatingProviders":{"name":"Creating Providers","type":"md","content":"Data Providers are special classes designed to make your life easier when you're\nusing a **database**, there's **no** rule to make them. By default, Klasa uses\nJSON to store per-guild configuration.\n\nWhen you create a data provider, you can access to them by: `client.providers.get(ProviderName)`.\n\n```javascript\nconst { Provider } = require('klasa');\n\nmodule.exports = class extends Provider {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { name: 'providerName' });\n\t}\n\n\tinit() {\n\t\t// The init method, usually checking file existence in file based\n\t\t// databases or connect to them.\n\t}\n\n\t/* Table methods */\n\n\thasTable(table) {\n\t\t// The code to check if a table exists\n\t}\n\n\tcreateTable(table) {\n\t\t// The code to create a table, in SQL databases, they take two\n\t\t// arguments.\n\t}\n\n\tdeleteTable(table) {\n\t\t// The code to delete/drop a table.\n\t}\n\n\t/* Document methods */\n\n\tgetAll(table) {\n\t\t// Get all values from a table\n\t}\n\n\tgetKeys(table) {\n\t\t// Get all keys (ids) from a table\n\t}\n\n\tget(table, entryID) {\n\t\t// Get an entry from a table\n\t}\n\n\thas(table, entryID) {\n\t\t// Check if the entry exists in a table\n\t}\n\n\tgetRandom(table) {\n\t\t// Get a random key from the a table\n\t}\n\n\tcreate(table, entryID, data) {\n\t\t// Create a new entry to a table\n\t}\n\n\tset(...args) {\n\t\t// Reserved for retro-compatibility\n\t\treturn this.create(...args);\n\t}\n\n\tinsert(...args) {\n\t\t// Reserved for retro-compatibility\n\t\treturn this.create(...args);\n\t}\n\n\tupdate(table, entryID, data) {\n\t\t// Update an entry from a table\n\t}\n\n\treplace(table, entryID, data) {\n\t\t// Perform a destructive write, where the previous data gets overwritten by the new one\n\t}\n\n\tdelete(table, entryID) {\n\t\t// Delete an entry from a table\n\t}\n\n};\n\n```\n\nThe example above is the JSON provider used in klasa, and interfacing with the {@link SettingsGateway}.\n\n## Options\n\n{@typedef PieceOptions}\n\n## Accessing Providers\n\nThe {@link ProviderStore providers} are stored in the main {@link KlasaClient} object, in the {@link KlasaClient#providers providers} property. This has an entry\nfor each provider added, based on its `name`. So for example if you have it set as\n`postgresql` , you can access it through `client.providers.get('postgresql');`.\n\n## Examples\n\nYou can take a look at the [included core Providers](https://github.com/dirigeants/klasa/tree/{@branch}/src/providers), or see some [prebuilt Providers on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/providers).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingProviders.md"},"CreatingSerializers":{"name":"Creating Serializers","type":"md","content":"Serializers are pieces used for SettingsGateway's core to serialize and deserialize data. New serializers are created in the `./serializers/` folder.\n\n```javascript\nconst { Serializer } = require('klasa');\n\nmodule.exports = class extends Serializer {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { aliases: [] });\n\t}\n\n\tasync deserialize(data, piece, language, guild) {\n\t\t// Code to resolve primitives into resolved data for the cache\n\t}\n\n\tserialize(value) {\n\t\t// Code to convert resolved data into primitives for database storage\n\t}\n\n\tstringify(value) {\n\t\t// Code to convert the value into a meaningful string.\n\t}\n\n};\n```\n\nThe deserialize method in {@link Serializer} takes 4 parameters:\n\n| Name         | Type                | Description                                           |\n| ------------ | ------------------- | ----------------------------------------------------- |\n| **data**     | any                 | The data to deserialize                               |\n| **piece**    | {@link SchemaPiece} | The piece from the schema that called this serializer |\n| **language** | {@link Language}    | The language instance for usage in translated errors  |\n| **guild**    | {@link Guild}       | The guild instance passed in {@link Settings#update}  |\n\nThe serialize method takes 1 parameter:\n\n| Name      | Type      | Description                                 |\n| --------- | --------- | ------------------------------------------- |\n| **value** | Primitive | A primitive value (string, number, boolean) |\n\nThe stringify method takes 1 parameter:\n\n| Name      | Type      | Description                                 |\n| --------- | --------- | ------------------------------------------- |\n| **value** | Primitive | A primitive value (string, number, boolean) |\n\n## Examples\n\nYou can take a look at the [included core Serializers](https://github.com/dirigeants/klasa/tree/{@branch}/src/serializers), or see some [prebuilt Serializers on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/serializers).\n\n# Further reading\n\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSQLProviders}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingSerializers.md"},"CreatingSQLProviders":{"name":"Creating SQL Providers","type":"md","content":"This guide extends {@tutorial CreatingProviders} and aims for SQL providers. As mentioned previously, {@link Provider providers} are special pieces designed for database interaction.\n\n## Compatibility\n\nThis piece existed during SettingsGateway v1 (from 0.0.1 to 0.4.0) but got unified with normal providers after SettingsGateway v2, although getting a very different behavior and inconsistency. {@link SQLProvider SQLProviders} came back after [SettingsGateway v2.2.0](https://github.com/dirigeants/klasa/pull/284) aiming to make a more consistent library interface as well as separating the needs from a NoSQL database with SQL databases.\n\n> **NOTE**: This is an **advanced** tutorial, please consider downloading a provider from [klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/providers).\n\n## Base Code\n\n```javascript\nconst { SQLProvider, QueryBuilder } = require('klasa');\n\nmodule.exports = class extends SQLProvider {\n\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.qb = new QueryBuilder();\n\t}\n\n\t// All other Provider methods\n\n\tasync addColumn() {\n\t\t// The addColumn method which inserts/creates a new column to a table from the database.\n\t}\n\n\tasync removeColumn() {\n\t\t// The removeColumn method which inserts/creates a new column to a table from the database.\n\t}\n\n\tasync updateColumn() {\n\t\t// The updateColumn method which updates a column's datatype from a table from the database.\n\t}\n\n\tasync getColumns() {\n\t\t// The getColumns method which gets the name of all columns from a table from the database.\n\t}\n\n};\n```\n\nThe example above is a boilerplate code for a Klasa SQL Provider, complementing with all the methods from {@tutorial CreatingProviders}, interfacing with the {@link UnderstandingSettingsGateway SettingsGateway}.\n\n## Helpers\n\nThe {@link SQLProvider} class provides several resources to help the developer reduce the code duplication:\n\n- {@link SQLProvider#parseUpdateInput `SQLProvider#parseUpdateInput()`}: Parses SettingsGateway's and other overloads' input into an easier format. The TypeScript type for the overloads accepted are `SettingsUpdateResultEntry[] | [string, any][] | Object<string, *>`.\n- {@link SQLProvider#parseEntry `SQLProvider#parseEntry()`}: Converts plain dotted objects into parsed objects with nested object support. Uses the helper above to parse entries, and is powered by {@link SettingsGateway UnderstandingSettingsGateway} to improve security and parsing speed.\n- {@link SQLProvider#parseValue `SQLProvider#parseValue()`}: Converts a value into standard JavaScript objects, useful for SQL databases that do not cover all JavaScript primitives.\n\n## Options\n\nThe configuration is inherited by {@link Provider Providers}, SQL Providers only provide extra tools to convert SQL output to compatible JS objects.\n\n## QueryBuilder\n\nThe {@link QueryBuilder} class is a very special class. It was added in [PR#306 (SGv2.2.0 QueryBuilder)](https://github.com/dirigeants/klasa/pull/306) and is designed to abstract all SQL from {@tutorial UnderstandingSettingsGateway SettingsGateway}. The following code is an example of how it is used:\n\n```javascript\n// Create a QueryBuilder for PostgreSQL\nthis.qb = new QueryBuilder({\n\t// Declare the boolean type for PGSQL, which is 'BOOL'.\n\tboolean: 'BOOL',\n\tfloat: 'DOUBLE PRECISION',\n\t// Sometimes, you want adaptative datatypes, if it's not going to store\n\t// big numbers, you may want to use INTEGER instead of BIGINT. More options\n\t// are given with smaller units, but depends on the database. For this case,\n\t// we pass a function instead of a string, said function takes an instance of\n\t// SchemaPiece.\n\tinteger: ({ max }) => max >= 2 ** 32 ? 'BIGINT' : 'INTEGER',\n\t// You may want to define extra types for custom argument resolvers.\n\tany: { type: 'JSON', resolver: (input) => `'${JSON.stringify(input)}'::json` },\n\tjson: { type: 'JSON', resolver: (input) => `'${JSON.stringify(input)}'::json` },\n\tuuid: 'UUID',\n\n\t// After the datatype definitions, we can define the following keys:\n\n\t// In PGSQL, arrays are supported, and they have the following notation. If it's not\n\t// supported, it's advised to not use this option, it defaults to `() => 'TEXT'`, which\n\t// enables the JSON.parse/JSON.stringify mechanism from SQLProvider.\n\n\t// The following line converts a datatype, i.e. `INTEGER`, into `INTEGER[]` when the SchemaPiece\n\t// takes arrays and they are supported by the SQL database.\n\tarray: type => `${type}[]`,\n\n\t// To reduce code duplication, and due to how similar arrays are in the same database,\n\t// we may want to use an arrayResolver if our database supports arrays. This method also\n\t// passes the resolver for single arrays, which we can use to map values while reducing code\n\t// duplication.\n\n\t// In PGSQL, an empty array is interpreted as '{}', and an array with elements, for example, the\n\t// datatype is JSON[], then it will map each value with the resolver and wrap them in array[], making\n\t// results similar to `array['{\"a\":true}'::json, '{\"b\":true}'::json]`, which is valid. Therefore, we\n\t// resolve each value from the array with our resolver (look above, we have set up the resolver for json/any)\n\t// and wrap each value in array[], or return '{}' if it's empty.\n\tarrayResolver: (values, piece, resolver) => values.length ? `array[${values.map(value => resolver(value, piece)).join(', ')}]` : \"'{}'\",\n\n\t// The following function wraps the datatype generated with the previous options and the\n\t// default value from the SchemaPiece instance, plus the name. In PGSQL, names that have\n\t// uppercase letters are automatically lowercased if they aren't between quotes, giving\n\t// this option a chance. Normally, you don't need to define this.\n\tformatDatatype: (name, datatype, def = null) => `\"${name}\" ${datatype}${def !== null ? ` NOT NULL DEFAULT ${def}` : ''}`\n});\n```\n\n## QueryBuilder Defaults\n\nTo not have to configure all types, we have a predefined set of datatypes in our constants file:\n\n```javascript\nexports.DEFAULTS.QUERYBUILDER = {\n\tdatatypes: {\n\t\tany: { type: 'TEXT' },\n\t\tboolean: { type: 'BOOLEAN', resolver: value => value },\n\t\tcategorychannel: { type: 'VARCHAR(18)' },\n\t\tchannel: { type: 'VARCHAR(18)' },\n\t\tcommand: { type: 'TEXT' },\n\t\tfloat: { type: 'FLOAT', resolver: value => value },\n\t\tguild: { type: 'VARCHAR(18)' },\n\t\tinteger: { type: 'INTEGER', resolver: value => value },\n\t\tjson: { type: 'JSON', resolver: (value) => `'${JSON.stringify(value).replace(/'/g, \"''\")}'` },\n\t\tlanguage: { type: 'VARCHAR(5)' },\n\t\trole: { type: 'VARCHAR(18)' },\n\t\tstring: { type: ({ max }) => max ? `VARCHAR(${max})` : 'TEXT' },\n\t\ttextchannel: { type: 'VARCHAR(18)' },\n\t\turl: { type: 'TEXT' },\n\t\tuser: { type: 'VARCHAR(18)' },\n\t\tvoicechannel: { type: 'VARCHAR(18)' }\n\t},\n\tqueryBuilderOptions: {\n\t\tarray: () => 'TEXT',\n\t\tresolver: (value) => `'${String(value).replace(/'/g, \"''\")}'`,\n\t\tarrayResolver: (values) => `'${JSON.stringify(values)}'`,\n\t\tformatDatatype: (name, datatype, def = null) => `${name} ${datatype}${def !== null ? ` NOT NULL DEFAULT ${def}` : ''}`\n\t}\n};\n```\n\nWhere the other fields (`array` and `resolver`) are filled by your {@link QueryBuilderOptions} that defaults the other parameters for all keys using `util.mergeDefault`. By default, array support is not provided since not all SQL databases support them.\n\n## Design of QueryBuilder\n\nUntil SettingsGateway v2.2, the SQL was auto-generated by the schema, however, this was not always efficient because the SQL databases often had different datatypes that are not compatible, and the ones used were \"bases\" (datatypes supported by the majority of SQL databases). However, the more databases we supported, the more complicated it was to support them. For example, PostgreSQL has `BOOL` where MySQL has `BIT(1)` and SQLite has `INTEGER` (0 for `false`, 1 for `true`).\n\nAnother issue with the old design was portability: you can move from NoSQL to NoSQL, or from SQL to NoSQL without issues, because the SQL schema does not change. However, moving from different SQL databases led to issues. To address this, we implemented {@link QueryBuilder} which dynamically generates the datatypes that are **most efficient** for each SQL storage database, allowing them to take advantage of their potential (no more stringified JSON or arrays in PG, yay!).\n\n## Examples\n\nYou can take a look at the [included core Providers](https://github.com/dirigeants/klasa/tree/{@branch}/src/providers), or see some [prebuilt Providers on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/providers).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingTasks}\n","path":"guides/Piece Basics/CreatingSQLProviders.md"},"CreatingTasks":{"name":"Creating Tasks","type":"md","content":"New tasks are created in the `./tasks/` folder, they are simple pieces that run from {@link Schedule} after a {@link ScheduledTask} end-of-life or recurrence time. The `data` field, also called *metadata*, is an option that can contain anything, even an object. Note that this gets [`JSON.stringify()`'ed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) in SQL so it gets parsed back on start-up.\n\nTheir structure is the following:\n\n```javascript\nconst { Task } = require('klasa');\n\nmodule.exports = class extends Task {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { name: 'yourTaskName', enabled: true });\n\t}\n\n\tasync run(metadata) {\n\t\t// The code that will receive the metadata from the task\n\t}\n\n\tasync init() {\n\t\t/*\n\t\t * You can optionally define this method which will be run when the bot starts\n\t\t * (after login, so discord data is available via this.client)\n\t\t */\n\t}\n\n};\n```\n\nWhere `metadata` is what you passed to `ScheduledTaskOptions.data`, `null` if not passed.\n\n## Creating a timed ScheduledTask\n\nAfter you have created your {@link Task} piece, you'll be able to create the first scheduled tasks for it:\n\n```javascript\nthis.client.schedule.create('reminder', Date.now() + (1000 * 60), {\n\tdata: {\n\t\t// This is the metadata. In one minute after the creation of this scheduled\n\t\t// task, Schedule will call your new task with this object.\n\t\tuser: message.author.id,\n\t\ttext: 'This is a reminder',\n\t\tchannel: message.channel.id\n\t},\n\tcatchUp: true\n\t// This task will try to run again (catch up) if the bot was off when it was meant to fire\n});\n```\n\n> **NOTE**: What the data field stores is up to the developer, it serves the purpose of storing tiny metadata for later usage in a Task piece. You can omit this if you don't want to pass specific data (such as a `backup` task), it can be anything that can be `JSON.stringify()`ed and `JSON.parse()`ed: `null`, `number`, `string`, `boolean`, `array`, (literal) `object`...).\n\nSource code:\n\n```javascript\nconst { Task } = require('klasa');\n\nmodule.exports = class extends Task {\n\n\tasync run({ channel, user, text }) {\n\t\tconst _channel = this.client.channels.get(channel);\n\t\treturn _channel.send(`<@${user}> You wanted me to remind you: ${text}`);\n\t}\n\n};\n```\n\nCheck the source of the piece above [here](https://github.com/dirigeants/klasa-pieces/blob/9ba1c48b08ad2b1ea55aeadc6d7e8e067346c0a2/tasks/reminder.js).\n\n## Creating a recurring ScheduledTask\n\nRecurring tasks, as opposed to timed tasks, never end unless told to do so. They simply reschedule the task for the next possible time whenever executed. The recurring format is heavily based on [Cron](https://en.wikipedia.org/wiki/Cron) and has support for many wildcards. It also supports predefined patterns such as `'@daily'`, `'@weekly'`, `'@monthly'` and `'@yearly'` to improve simplicity. You can also generate these patterns with this tool: [**Crontab Generator**](https://crontab-generator.org/) (put a random command such as `echo \"test\"` to get the pattern), which allows you to create them quickly and check the next 5 dates the crontab pattern will run.\n\n```javascript\nthis.client.schedule.create('backup', '0 0 * * tue,fri');\n```\n\nThe pattern above is a **Crontab pattern** that runs every Tuesday and Friday at 00:00 UTC, and will execute the task `backup` every time it ends.\n\n## Options\n\n{@typedef PieceOptions}\n\n## Examples\n\nYou can take a look at the [included core Tasks](https://github.com/dirigeants/klasa/tree/{@branch}/src/tasks), or see some [prebuilt Tasks on klasa-pieces](https://github.com/dirigeants/klasa-pieces/tree/master/tasks).\n\n## Further Reading:\n\n- {@tutorial CreatingArguments}\n- {@tutorial CreatingCommands}\n- {@tutorial CreatingEvents}\n- {@tutorial CreatingExtendables}\n- {@tutorial CreatingFinalizers}\n- {@tutorial CreatingInhibitors}\n- {@tutorial CreatingLanguages}\n- {@tutorial CreatingMonitors}\n- {@tutorial CreatingProviders}\n- {@tutorial CreatingSerializers}\n- {@tutorial CreatingSQLProviders}\n","path":"guides/Piece Basics/CreatingTasks.md"}}},"Advanced Commands":{"name":"Advanced Commands","files":{"CommandsArguments":{"name":"Commands I: Arguments","type":"md","content":"This is an in-depth tutorial for **Klasa's Usage**. Unlike many other frameworks, Klasa and Komada use a system called **usage string** to improve simplicity, in the next three pages, you will learn how to use it correctly.\n\n## Command Arguments\n\nWhat are command arguments and how do they differ from parameters? Arguments are raw strings based on the input by the user split based on {@link Command#usageDelim} or {@link Command#quotedStringSupport}. A resolver converts the arguments to parameters based on the possible usage type.\n\nFor example, let's say you want a command to take a user and a channel, then you just put a string to usage being: `'<selectedUser:user> <selectedChannel:channel>'`, that tells the __internal parser__ to take and parse them, if both validate correctly in the command output (i.e. `[p]command @user #channel`), the internal parser will pass an instance of {@link KlasaUser} and {@link external:Channel} inside an array, being **parameters**.\n\nIn short, usage is what defines the input that the command and internal parser should take, message arguments ({@link KlasaMessage#args}) are the raw arguments (array of string), and message parameters ({@link KlasaMessage#params}) are an array with the parsed arguments.\n\n## Structure\n\nThe command usage is an option for {@link CommandOptions.usage} and **requires** a {@link CommandOptions.usageDelim} string when there are multiple arguments. Why? Because if there's no usageDelim, `undefined` is implied, and [String#split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) doesn't split the string but converts it to a __single value array__ (message arguments), you definitively don't want this behaviour when you have two command arguments because it'll require at least two message arguments.\n\nThe structure is rather simple, {@link CommandOptions.usage} is always a string and not an object, and is inspired by the [CLI format standard](http://docopt.org/), inheriting the meaning for the tokens `<>` (required arguments), `[]` (optional elements), `|` (mutually exclusive or multiple choice) and `...` (repeating arguments), but adds more elements.\n\nArguments can **only** have one requirement level and cannot be into another, neither can they have spaces inside. That is, everything must be enclosed by `<` with `>`, `[` with `]` or `(` with `)`. They have different meanings.\n\n- The first one (`<>`) defines **required** arguments, the command will not run until these arguments are processed correctly, they can be anywhere.\n- The second one (`[]`) defines **optional** arguments, they're ignored when the input is incorrect and said message argument may drift to the next. That is, if you have an optional argument taking `1` and the next argument is `2` (both literals) and you pass `2`, the first parameter will be ignored while the second will take it (do not confuse with arguments).\n- The latter (`()`) defines **semi-required** arguments, they are an hybrid between both and they can turn into required arguments when a value is the argument resolver dictates they are required (resolves to undefined if not required).\n\n> Semi-required arguments are implemented in Klasa since 0.5.0, check PR [here](https://github.com/dirigeants/klasa/pull/162).\n\nBut in difference to the CLI command format standard, we have **our own standard**, and we implement more things such the aforementioned **semi-required** arguments, and more.\n\nA more in-depth vision of arguments is that they are *arrays* of \"possibles\", that is, even if we aren't using the `|` token which defines extra types/possibles, there's always one for each argument. So `<nameOne:typeOne|nameTwo:typeTwo>` is an argument with **two possibles**. Each possible has their own structure and options:\n\n- They are grouped into a \"Tag\" or \"argument\", a Tag is a parsed argument that contains these multiple possibles, therefore, possibles inherit the required level from them. For example, if a Tag is required and has 3 possibles, the __internal parser__ will try to parse all three until it finds one that resolves, in the opposite case (no match), it'll ask for one of them.\n- They have their own names, types, and options. You can have a Tag with multiple types, for example, `<target:member|userID:string>` is a Tag with two possibles, one that will try to resolve into a `GuildMember` instance, or a `string` if it did not match (be careful as the `string` type is \"lazy\": it always resolve, so they should put last).\n\n## Repeating arguments\n\nUnlike in CLI, repeating arguments are **only** written as `[...]` and goes at the end of usage, making the last argument repeating. What does this mean? Let's say you want to have a [**choice**](https://github.com/dirigeants/klasa-pieces/blob/master/commands/Fun/choice.js) command, then you may want the user to write in multiple arguments, more likely with `,` as **usageDelim** to separate them. They you may put `<choice:string> [...]`, which makes the command take one or more parameters of this type.\n\nUnlike normal arguments, a repeating one can resolve into one or more parameters, all of the same type (or of the first one that resolves if using multiple possibles), that being said, it's advisable to use the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator) for arrays if you have multiple arguments.\n\n> **Note**: A common mistake is to use `[...choices]` in the `Command#run`, as you may know, `[...choices]` is identical to `choices` by the simple fact you're creating an array with all the elements of choices, or said in another way: an identical array. You can check it in the MDN link for spread syntax.\n\n## Possible Structure\n\nAs mentioned before, a `Tag` is a **parsed argument tag** (`<>`, `()` or `[]`) that contains an array of **multiple Possible**s. But what is their format? Generally, they're written as `name:type`, where `name` is the name of the argument, and `type` is the type. However, depending on the type you can use the options or not.\n\n- **name** is the name of the argument, they're used to identify an argument by giving it a name, a good name should be self explanatory and easy to read for the end user.\n- **type** is the name of the type, they're not arbitrary but depends on the methods {@link ArgResolver} has. By default, there are many of them, such as `string`, `integer`, `message`, `user`, `member`. You can also extend ArgResolver to implement extra methods, check this tutorial: {@tutorial CreatingCustomArguments}, however, if no type is given, the parser will assume them as **literal**.\n- **options** always have the format `{min,max}`, taking two integers, both optional (you can specify `{,max}` for an argument with no minimum, or `{min}` for an argument with a minimum but not a maximum), and they're used mostly in the `string`, `number` (float) and `integer`, being the string length and the number the variables to handle, respectively.\n\n## Examples\n\n- We want a required argument that takes a user, and an optional argument for a role: `<targetUser:user> [targetRole:role]`.\n- We want to accept `set`, `add`, `remove` or `reset` as required argument: `<set|add|remove|reset>`. (Remember that if no type is given, Usage will imply they are literals).\n- We want to get a GuildMember instance, or its user ID if the user is not in the guild: `<targetMember:member|userID:string{17,18}>`. (Either a GuildMember resolvable or a string with a length of 17-18, which matches with a Discord snowflake's length).\n\n## The Usage Analogy\n\nLet's make everything basic:\n\n- usage -> **blueprints**.\n- arguments -> **wood**.\n- resolvers -> **contractors**.\n- parameters -> **houses**.\n\nFirst, you write your blueprints for your houses, later, you receive wood from the woodcutters. The contractors will receive that wood and will try to build the houses with them based on the blueprints.\n\nIf the contractors work in a union, they pass on the wood to the next contractor until they can either build a house, or complain that nobody can. However, if the contractors says it's cool to not build a house here, they pass the wood on to the next place.\n\nCredits to [@bdistin](https://github.com/bdistin) for this analogy.\n\n## Further Reading:\n\n- {@tutorial CommandsSubcommands}\n- {@tutorial CommandsCustomResponses}\n- {@tutorial CommandsCustomResolvers}\n","path":"guides/Advanced Commands/CommandsArguments.md"},"CommandsSubcommands":{"name":"Commands II: Subcommands","type":"md","content":"> This feature is implemented in Klasa **0.5.0**, check the PR that implemented it [here](https://github.com/dirigeants/klasa/pull/162).\n\nIt is called **subcommand** to the special behaviour when a command takes multiple **Possible**s of literals as the first parameter, and the command has {@link CommandOptions.subcommands} set to true. An example is the [built-in conf](https://github.com/dirigeants/klasa/blob/master/src/commands/Admin/conf.js) command, which unlike any other command, it does not have a `Command#run` method.\n\nHow do subcommands work? The concept may be quite hard to *understand*; however, it's also very powerful. We will take the conf command as an example:\n\n```javascript\nconst { Command } = require('klasa');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tsubcommands: true,\n\t\t\tusage: '<set|remove|reset|show> (key:key) (value:value) [...]',\n\t\t\tusageDelim: ' '\n\t\t});\n\t}\n\n\tasync set(message, params) {}\n\tasync remove(message, params) {}\n\tasync reset(message, params) {}\n\tasync show(message, params) {}\n\n};\n```\n\nAs you may notice it, the command does not have a `Command#run` method, but it has one method for each literal that is taken as the first parameter, all of them lowercased. That is, to simplify the following pattern used in many commands:\n\n```javascript\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tusage: '<set|remove|reset|show> (key:key) (value:value) [...]',\n\t\t\tusageDelim: ' '\n\t\t});\n\t}\n\n\trun(message, [type, ...params]) {\n\t\treturn this[type](message, params);\n\t}\n\n\tasync set(message, params) {}\n\tasync remove(message, params) {}\n\tasync reset(message, params) {}\n\tasync show(message, params) {}\n\n};\n```\n\nBoth commands are equal, one key difference is that with the subcommands feature you omit the **run** method and Klasa does not call it anymore, saving you from using a \"dynamic\" usage based on the first (which is problematic for [TypeScript](https://www.typescriptlang.org/) users), and also saves time whilst the command keeps being simple and readable.\n\n## The default Subcommand\n\nYou can also define a default subcommand to be run in your usage, without the user having to pass that text (still works if they do though). So say we wanted show to be the default subcommand. We would just set the usage to `<set|remove|reset|show:default> (key:key) (value:value) [...]` and then we would be able to run `!conf language` to see the language of the guild that command is run in.\n\n> Please note that the default argument should always be last in your usage. The argument handler will always accept the default argument, as it's gotten to, so say it's first the command would always be run as show and would screw up the key value if passing any other subcommand.\n\n## The TypeScript issue\n\nDynamic object assessment has been an issue for TypeScript, you can use them in dynamic objects (object literals, for example) because they imply an explicit `{ [K: string]: V }` by default, and to do so, they *may* have more objects until the object is strongly typed (without dynamic keys). In fact, most objects in JavaScript are dynamic, you can add or remove properties to and from them (hence dynamic), but there are several exceptions, [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) and [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) (which implies a seal) \"seal\" the parameters for the object, making its parameters not longer editable (in the case of freeze, you cannot edit any property, they become readonly).\n\nHowever, classes primitives are also \"readonly-like\" for the TypeScript compiler, there's no explicit `{ [K: string]: V }` implied, therefore, `this[key]` fails. To counter this issue, some users had to do a workaround using a [switch-case](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) and hardcode the object accessment.\n\nThanks to this feature, they're not longer required to use this hacky behaviour, so they have less hardcoded, and much cleaner code. *(This feature had this issue solved as a side-effect, it was not even intended)*.\n\n## Further learning:\n\n- {@tutorial CommandsArguments}\n- {@tutorial CommandsCustomResponses}\n- {@tutorial CommandsCustomResolvers}\n","path":"guides/Advanced Commands/CommandsSubcommands.md"},"CommandsCustomResponses":{"name":"Commands III: Per-Command and per-parameter custom responses","type":"md","content":"> This feature is implemented in Klasa **0.5.0**, check the PR that implemented it [here](https://github.com/dirigeants/klasa/pull/162).\n\n## Custom Responses\n\nThis is one of the most requested features for Klasa: the ability to translate and/or customize the error messages when a parameter is missing. This is now achievable thanks to {@link Command.customizeResponse}, which takes the name of the key of the possible (remember the {@tutorial CommandsArguments} tutorial) and either a `string` or a `function` that takes one parameter: `message` being a `KlasaMessage` instance, that you can use to get the Language instance from (check {@link KlasaMessage.language}).\n\n## Configuring/Creating a custom response\n\nThey require an argument name from the `usageString`, as you have seen in {@tutorial CommandsArguments}, the `name` is what identifies a Tag/argument, to do so, you put that name, and Klasa will modify the Tag so when it's value is not providen or is incorrect, use your custom message. Let's say we have an Overwatch command and you want Klasa to reply with a *nicer* response, for example, when you have the [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) type with `/(\\w{3,12})#(\\d{4,5})/i` and you want to notify the user that they did not write the name correctly, then you may want to customize the message that the framework sends so they can understand what's going wrong better. Consider the following command example:\n\n```javascript\nconst { Command } = require('klasa');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tdescription: 'Check your Overwatch stats.',\n\t\t\tusage: '<battletag:reg/(\\\\w{3,12})#(\\\\d{4,5})/i>'\n\t\t});\n\t}\n\n\tasync run(message, [battletag]) {}\n\n};\n```\n\nAnd you want it to send 'You must insert a valid battletag with the format username#0000' when the user doesn't input a string matching the RegExp, then you may use the method {@link Command.customizeResponse} inside the commands' constructor:\n\n```javascript\nconst { Command } = require('klasa');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\tdescription: 'Check your Overwatch stats.',\n\t\t\tusage: '<battletag:reg/(\\\\w{3,12})#(\\\\d{4,5})/i>'\n\t\t});\n\n\t\tthis.customizeResponse('battletag',\n\t\t\t'You must insert a valid battletag with the format username#0000');\n\t}\n\n\tasync run(message, [battletag]) {}\n\n};\n```\n\nAnd when you miss that argument or you input something that doesn't match the RegExp pattern (triggering the required arguments' error message), it'll send the string you used instead of `'battletag is a required parameter.'`.\n\nFor multilanguage purposes, you can also pass a function with the parameters message ({@link KlasaMessage}) and possible ({@link Possible}), and if you have a `COMMAND_INVALID_BATTLETAG` key in your language files, you can do:\n\n```javascript\nthis.customizeResponse('battletag', message =>\n\tmessage.language.get('COMMAND_INVALID_BATTLETAG'));\n```\n\nIn a side note, `Command#customizeResponse` returns the command instance, meaning that you can chain it, for example:\n\n```javascript\nthis.customizeResponse('arg1', 'Response for argument 1')\n\t.customizeResponse('arg2', 'Response for argument 2')\n\t.customizeResponse('arg3', 'Response for argument 3')\n\t.customizeResponse('arg4', 'Response for argument 4');\n```\n\n> **Note**: If an argument already has a custom response, you cannot re-set it.\n\n## FAQ\n\n- How can I customize the response for a type with unions? Like `<add|set|delete|list>`? You can use one of the possible names, for example, `'set'`.\n- What happens if I have two arguments with the same name? Klasa will assign the custom response to the first argument that matches. A second call with that method with the same name would set it for the second.\n\n## Further Reading:\n\n- {@tutorial CommandsArguments}\n- {@tutorial CommandsCustomResolvers}\n- {@tutorial CommandsSubcommands}\n","path":"guides/Advanced Commands/CommandsCustomResponses.md"},"CommandsCustomResolvers":{"name":"Commands IV: Per-Command custom argument resolvers","type":"md","content":"> This feature is implemented in Klasa **0.5.0**, check the PR that implemented it [here](https://github.com/dirigeants/klasa/pull/162).\n\n## Custom Resolvers\n\nCustom resolvers allow developers to set up custom types for each command, they are highly customizable and can hold its own logic and type name. This is possible thanks to the {@link Command.createCustomResolver} method.\n\n## Creating a custom Command Resolver\n\nA custom resolver is usually created in the command constructor and its usage is identical to {@link ArgResolver} methods:\n\n```javascript\nthis.createCustomResolver('key', (arg, possible, message, params) => {\n\t// Logic\n});\n```\n\nWhere the first parameter is the name of the custom type, and the second is a function that takes `arg` (string), `possible` ({@link Possible}), `message` ({@link KlasaMessage}) and optionally, `params` (any[], remember parameters are parsed arguments).\n\nThen in your usage, you can use the type `key`, it'll be recognized as a *local* resolver that your command is able to use. Check a live example [here](https://github.com/dirigeants/klasa/blob/c47891581806e64ebf53706231a69037d70dd077/src/commands/Admin/conf.js#L5-L25). You can also check the tutorial {@tutorial CreatingCustomArguments} for further information.\n\n## Further Reading:\n\n- {@tutorial CommandsArguments}\n- {@tutorial CommandsCustomResponses}\n- {@tutorial CommandsSubcommands}\n","path":"guides/Advanced Commands/CommandsCustomResolvers.md"}}},"Advanced SettingsGateway":{"name":"Advanced SettingsGateway","files":{"UnderstandingSchemaFolders":{"name":"Understanding SchemaFolders","type":"md","content":"# Understanding Schema\n\nA schema works like a diagram or a blueprint, in SettingsGateway, the schema defines the keys present in the configuration for a specific gateway. This feature serves multiple purposes:\n\n1. Define what keys the {@link Gateway} manages and their properties.\n1. Define what type the keys must hold.\n1. Speed up performance when iterating over keys.\n\n## Adding keys\n\nAdding keys into the schema is similar to adding new levels with {@link PermissionLevels}, and it is like adding a piece into a box, but you can also have boxes inside other boxes. That being said, you get the box you want to modify and insert the new pieces or boxes into it. The methods to achieve that are {@link SchemaFolder#add} to add pieces (keys) and boxes (folders).\n\nThe built-in gateways (`guilds`, `users`, and `clientStorage`), can access to the pre-set schemas, accessible via {@link KlasaClient.defaultGuildSchema}, {@link KlasaClient.defaultUserSchema}, and {@link KlasaClient.defaultClientSchema}, respectively. However, similarly to {@link PermissionLevels}, you can either modify the default schema, overwrite it with new {@link Schema}, or making a new {@link Schema} and pass it into {@link KlasaClientOptions}.{@link GatewaysOptions gateways}.{@link GatewayDriverRegisterOptions gatewayName}.{@link Schema schema}, for example, `new KlasaClient({ gateways: { guilds: { schema: new Schema() } } });`.\n\nFor simplicity, in this guide, we will use the first option. For plugin developers, they may edit it via `this.client.gateways.gatewayName.schema`.\n\nAdding a new key to the guilds' schema would be as simple as doing this:\n\n```javascript\n// Add a new key or folder to the guild's schema\nKlasaClient.defaultGuildSchema.add(name, typeOrCallback, options);\n```\n\nThe parameters are:\n\n- **name**: The name of the new key. If it conflicts with a pre-existing key, it will overwrite the previous.\n- **typeOrCallback**: If it is a string, it will be a key, otherwise in case of a callback, this will be a folder.\n- **options**: The options for the new key. Check {@link SchemaFolderAddOptions}.\n\nA common example for bots is to have a configurable chat log in Discord, for simplicity, you may add it in the root folder, but the convention is to have folders holding the same type. For example:\n\n```javascript\n// Adding the key to the root folder\nKlasaClient.defaultGuildSchema.add('channelLog', 'TextChannel');\n\n// Adding the key to a channels folder\nKlasaClient.defaultGuildSchema.add('channels', folder => folder\n\t.add('log', 'TextChannel'));\n```\n\nWhere the first option would be accessible from `message.guild.settings.channelLog`, and the second from `message.guild.settings.channels.log`. Users would configure them with `[p]conf set channelLog #logs` or `[p]conf set channels.log #logs`, depending on how you structure it. (`[p]` being your bot's prefix).\n\nThe schema is also able to store multiple values in a single key, this is used for per-guild-configurable disabled commands, and for the client's {@link Task tasks}. Making a key accept an array only requires the usage of {@link SchemaPieceOptions}. For example, adding a user blacklist in the client schema for your bot (to prevent users from using or inviting your bot):\n\n```javascript\nKlasaClient.defaultClientSchema.add('userBlacklist', 'User', { array: true });\n```\n\nAnd now in your inhibitor or your guildCreate event, you can access to the array via `this.client.settings.userBlacklist`.\n\nA full example of a correctly configured schema would be the following:\n\n```javascript\nKlasaClient.defaultGuildSchema\n\t.add('channels', folder => folder\n\t\t.add('log', 'TextChannel')\n\t\t.add('announcement', 'TextChannel'))\n\t.add('roles', folder => folder\n\t\t.add('administrator', 'Role')\n\t\t.add('moderator', 'Role'))\n\t.add('disabledChannels', 'TextChannel', { array: true });\n```\n\n> **NOTE**: The type argument is not case sensitive, they are lowercased. For readability, you may want to use the case you are comfortable with.\n\n## Removing keys\n\nThe opposite of adding keys is removing them, this operation is pretty rare to do, and it does not modify the database (you might want to handle it using provider's methods), this operation only requires you to change {@link Schema#add} to {@link Schema#remove}:\n\n```javascript\n// Remove a key or folder from the guild's schema\nKlasaClient.defaultGuildSchema.remove(name);\n```\n\nLet's say you want to remove the `disabledChannels` key from the guild's schema, the code to do so is the following:\n\n```javascript\nKlasaClient.defaultGuildSchema.remove('disabledChannels');\n```\n\n## Ensuring the existence of a key.\n\nEnsuring that a key exists is as simple as checking if the Schema.has() the key name.\n\n```javascript\nconst { Client } = require('klasa');\n\n// Returns true or false, depending on if the Schema has the prefix key.\nClient.defaultGuildSchema.has('prefix');\n```\n\n> **NOTE**: In the past it was possible to add keys using the init function from the Piece. This is no longer the case and the only way to add new keys to schema is to do it in your entry file(index.js, app.js, etc.). You can also use plugins to insert more keys into your schema.\n\n## Key conflict\n\nWhen adding keys, specially when developing plugins, you may enter in conflict while adding them. To solve the issue of having to check too much, Schema merges the pre-existent and the new pieces in one, given the following conditions:\n\n- When adding a SchemaFolder over another SchemaFolder, the callback will be called with the pre-existent folder (pieces will be added to the old folder, \"merging\" them). If the previous was not a SchemaFolder, this operation will throw.\n- When adding a SchemaPiece over another SchemaPiece, {@link SchemaPiece#edit} will be called instead, merging all the options with the previous. If the previous was not a SchemaPiece, or any of the options were wrong, this operation will throw.\n\n## Further Reading:\n\n- {@tutorial UnderstandingSchemaPieces}\n- {@tutorial SettingsGatewayKeyTypes}\n- {@tutorial SettingsGatewaySettingsUpdate}\n","path":"guides/Advanced SettingsGateway/UnderstandingSchemaFolders.md"},"UnderstandingSchemaPieces":{"name":"Understanding SchemaPieces","type":"md","content":"# Understanding Schema's Keys\n\nAs mentioned in the previous tutorial, {@tutorial UnderstandingSchema}, SettingsGateway's schema is divided in two parts: **folders** and **pieces**. Pieces are contained in folders, but they cannot have keys nor folders. Instead, this holds the key's metadata such as its type, if it's configurable by the configuration command... you can check more information in the documentation: {@link SchemaPiece}.\n\n## Key options\n\nThere are multiple options that configure the piece, they are:\n\n| Option       | Description                                                                |\n| ------------ | -------------------------------------------------------------------------- |\n| array        | Whether the values should be stored in an array                            |\n| configurable | Whether this key can be configured with the built-in configuration command |\n| default      | The default value for this key                                             |\n| max          | The maximum value for this key, only applies for string and numbers        |\n| min          | The minimum value for this key, only applies for string and numbers        |\n| filter       | The filter function for this key                                           |\n\n> Check {@tutorial SettingsGatewayKeyTypes} for the supported types and how to extend them.\n\n## Default option\n\n*The default option is optional, but, what is its default value?*\n\nThe default option is one of the last options to default, **array** defaults to `false`, **max** and **min** defaults to `null`, **configurable** defaults to either `true` or `false`, the latter if **type** is `any`; and **type** is always obligatory.\n\n- If **array** is true, default will be an empty array: `[]`.\n- If **type** is boolean, default will be `false`.\n- In any other case, it will be `null`.\n\n## Filter option\n\nThe filter option serves to blacklist certain values. It's output is not used, but any thrown error will be handled by SettingsGateway's internals and displayed to the caller (for example in the conf command, it would display the message to the user). It also must be synchronous.\n\nInternally, we use this option to avoid users from disabling guarded commands (check {@link Command#guard}):\n\n```javascript\nconst filter = (client, command, piece, guild) => {\n\tif (client.commands.get(command).guarded) {\n\t\tthrow (guild ? guild.language : client.languages.default).get('COMMAND_CONF_GUARDED', command);\n\t}\n};\n```\n\nIn this case, `client` is the {@link KlasaClient} instance, `command` the resolved command (the output from the command's SchemaType), `piece` is a {@link SchemaPiece} instance, and guild is a {@link Guild} instance, which may be null.\n\n## Further Reading:\n\n- {@tutorial UnderstandingSchemaFolders}\n- {@tutorial SettingsGatewayKeyTypes}\n- {@tutorial SettingsGatewaySettingsUpdate}\n","path":"guides/Advanced SettingsGateway/UnderstandingSchemaPieces.md"},"SettingsGatewayKeyTypes":{"name":"SettingsGateway's Types","type":"md","content":"# SettingsGateway's Types\n\nBy default, there are several built-in types that the developer can use, and with the possibility to add custom types via {@link Serializer}s as explained below. The built-in types are:\n\n| Name                | Type                                              | Description                                                                              |\n| ------------------- | ------------------------------------------------- | ---------------------------------------------------------------------------------------- |\n| **any**             | Anything, no type restriction                     | Resolves anything, even objects. The usage of this type will make a key unconfigurable   |\n| **boolean**         | A {@link Boolean} resolvable                      | Resolves a boolean primitive value                                                       |\n| **categorychannel** | A {@link external:CategoryChannel} instance or id | Resolves a CategoryChannel                                                               |\n| **channel**         | A {@link external:Channel} instance or id         | Resolves a channel. Be careful with using this, as it accepts any type of channel        |\n| **command**         | A {@link Command} instance or name                | Resolves a Command                                                                       |\n| **float**           | A floating point number                           | Resolves a [float](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) |\n| **guild**           | A {@link KlasaGuild} instance or id               | Resolves a KlasaGuild (which extends Guild)                                              |\n| **integer**         | An integer number                                 | Resolves an [integer](https://en.wikipedia.org/wiki/Integer) number                      |\n| **language**        | A {@link Language} instance or name               | Resolves a language                                                                      |\n| **number**          | A number                                          | Resolves a [float](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) |\n| **role**            | A {@link external:Role} instance or id            | Resolves a Role                                                                          |\n| **string**          | A {@link external:StringResolvable}               | Resolves a string                                                                        |\n| **textchannel**     | A {@link external:TextChannel} instance or id     | Resolves a TextChannel                                                                   |\n| **url**             | A URL resolvable                                  | Resolves a URL with Node.js' URL parser                                                  |\n| **user**            | A {@link KlasaUser} instance or id                | Resolves a KlasaUser (which extends User)                                                |\n| **voicechannel**    | A {@link external:VoiceChannel} instance or id    | Resolves a VoiceChannel                                                                  |\n\n## Adding new types\n\nTo add new types, you make a class, extending {@link Serializer}. The following extendable is a template for this:\n\n```javascript\nconst { Serializer } = require('klasa');\n\n// Extend Serializer to create your own. These are loaded from  the Serializers folder.\nmodule.exports = class Date extends Serializer {\n\n\tconstructor(...args) {\n\t\t// If you want aliases for this, you can set them here.\n\t\tsuper(...args, { aliases: [] });\n\t}\n\n\t// This function is used to tell Settings what this data is actually representing\n\tdeserialize(data) {\n\t\t// Assuming data is stored in milliseconds\n\t\t// We can turn this date, given from your database, into a readable date.\n\t\t// new Date Object with our specified data\n\t\treturn new Date(data);\n\t}\n\n\t// This function is used to tell Settings what this data should be stored as\n\tserialize(value) {\n\t\t// Convert Date Object back into milliseconds so it can be stored by the database.\n\t\t// Value here is our Date Object from deserialized.\n\t\treturn value.getTime();\n\t}\n\n\t// This function is used to tell Settings what we should display the deserialized data as.\n\tstringify(value) {\n\t\t// Value here is our Date Object from deserialized\n\t\treturn value.toDateString();\n\t}\n\n};\n```\n\n**All serializers must resolve values into primitives or storable plain objects, otherwise, the provider may have issues with storing the value.**\n\n## Further Reading:\n\n- {@tutorial UnderstandingSchemaPieces}\n- {@tutorial UnderstandingSchemaFolders}\n- {@tutorial SettingsGatewaySettingsUpdate}\n","path":"guides/Advanced SettingsGateway/SettingsGatewayKeyTypes.md"},"SettingsGatewaySettingsUpdate":{"name":"Updating your Settings","type":"md","content":"# Updating your configuration\n\nOnce we have our schema completed with all the keys, folders and types needed, we may want to update our configuration via SettingsGateway, all of this is done via {@link Settings#update}. However, how can I update it? Use any of the following code snippets:\n\n```javascript\n// Updating the value of a key\n// This key is contained in the roles folder, and the second value is a role id, we also need\n// to pass a GuildResolvable.\nmessage.guild.settings.update('roles.administrator', '339943234405007361', message.guild);\n\n// For retrocompatibility, the object overload is still available, however, this is much slower.\n// If you store objects literals in keys that do not take an array, this may break, prefer the\n// other overload or use nested SchemaPieces for full consistency.\nmessage.guild.settings.update({ roles: { administrator: '339943234405007361' } }, message.guild);\n\n// Updating an array\n// userBlacklist, as mentioned in another tutorial, it's a piece with an array of users. Using\n// the following code will add or remove it, depending on the existence of the key in the configuration.\nmessage.guild.settings.update('userBlacklist', '272689325521502208');\n\n// Ensuring the function call adds (error if it exists)\nmessage.guild.settings.update('userBlacklist', '272689325521502208', { action: 'add' });\n\n// Ensuring the function call removes (error if it doesn't exist)\nmessage.guild.settings.update('userBlacklist', '272689325521502208', { action: 'remove' });\n\n// Updating multiple keys\nmessage.guild.settings.update([['prefix', 'k!'], ['language', 'es-ES']]);\n```\n\n> **Note**: Some types require a Guild instance to work, for example, *channels*, *roles* and *members*.\n\n> Additionally, if no 'action' option is passed to {@link SettingsUpdateOptions}, it'll assume the `auto` mode, which will add or remove depending on the existence of the key.\n\n## Further Reading:\n\n- {@tutorial UnderstandingSchemaPieces}\n- {@tutorial UnderstandingSchemaFolders}\n- {@tutorial SettingsGatewayKeyTypes}\n","path":"guides/Advanced SettingsGateway/SettingsGatewaySettingsUpdate.md"}}},"Other Subjects":{"name":"Other Subjects","files":{"PieceStores":{"name":"Piece Stores","type":"md","content":"Probably one of the most advanced and powerful tools in klasa is making your own stores and pieces, to do the things you want.\n\nThe most basic store:\n\n```javascript\nconst { Store } = require('klasa');\nconst Something = require('./Something');\n\nclass SomethingStore extends Store {\n\n\tconstructor(client) {\n\t\tsuper(client, 'somethings', Something);\n\t}\n\n}\n\nmodule.exports = SomethingStore;\n```\n\nThe most basic Piece:\n\n```javascript\nconst { Piece } = require('klasa');\n\nclass Something extends Piece {\n\n\trun() {\n\t\t// Defined in extension Classes\n\t}\n\n}\n\nmodule.exports = Something;\n```\n\nNow that probably doesn't give you much idea on what that means or why it is useful. But take the following idea: You are making a starboard for your bot, and you need raw events for messageReactionAdd. A switch case for rawEvents would do the trick, but it would be a lot of hassle if you wanted to add *more* raw events. So lets make a piece store for rawEvents, which will make loading, reloading and creating them much easier.\n\n```javascript\nconst { Store } = require('klasa');\nconst RawEvent = require('./RawEvent');\n\nclass RawEventStore extends Store {\n\n\tconstructor(client) {\n\t\tsuper(client, 'rawEvents', RawEvent);\n\t}\n\n}\n\nmodule.exports = RawEventStore;\n```\n\nSee? That's not that different from a simple store. Although be sure to take a look at all of the core stores. Sometimes, like in the case of Providers, we want to run a shutdown method before we delete the collection entry. In that case we also want to overwrite the clear method, and loop over the collection doing this.delete() so that all entries are shutdown properly.\n\n```javascript\nconst { Piece } = require('klasa');\n\nclass RawEvent extends Piece {\n\n\trun() {\n\t\t// Defined in extension Classes\n\t}\n\n}\n\nmodule.exports = RawEvent;\n```\n\nThere aren't a lot of options here, so you won't need the constructor most of the times anyways.\n\n```javascript\nconst RawEvent = require('../RawEvent');\n\nmodule.exports = class extends RawEvent {\n\n\tasync run(data) {\n\t\t// Overwrite this in your file\n\t}\n\n};\n```\n\nThis is great and all, but we need to register the store:\n\n```javascript\nconst { Client } = require('klasa');\nconst RawEventStore = require('./RawEventStore');\n\nclass MyClient extends Client {\n\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\t// Make a new RawEventStore and attach it to client\n\t\tthis.rawEvents = new RawEventStore();\n\n\t\t// Register the RawEventStore to be loaded, init, and available\n\t\t// to be used as an arg to be looked up in commands\n\t\tthis.registerStore(this.rawEvents);\n\t\t// Note: You will likely want to make a custom Argument for this new piece type\n\t}\n\n}\n\nnew MyClient({ pieceDefaults: { rawEvents: { enabled: true } } }).login('token-goes-here');\n```\n\nNow, to make our raw event store actually work, we're going to add this code in `events/raw.js` to run on every raw event received\n\n```javascript\nconst { Event } = require('klasa');\n\nmodule.exports = class extends Event {\n\n\tasync run(packet) {\n\t\tconst rawEvent = this.client.rawEvents.get(packet.t);\n\t\tif (rawEvent && rawEvent.enabled) {\n\t\t\trawEvent.run(packet.d);\n\t\t}\n\t}\n\n};\n```\n\nNow, for an example event, we'll have MESSAGE_REACTION_ADD, which will go in `rawEvents/MESSAGE_REACTION_ADD.js` and will run on all added reactions\n\n```javascript\nconst RawEvent = require('../RawEvent');\n\nmodule.exports = class extends RawEvent {\n\n\tasync run(data) {\n\t\t// Data is whatever Discord sent.\n\t\t// If you don't know what the data object can have, you should log it.\n\t\tconsole.log(data);\n\t}\n\n};\n```\n","path":"guides/Other Subjects/PieceStores.md"},"RichDisplay":{"name":"Rich Display","type":"md","content":"{@link RichDisplay} allows you to create a paginated embed that users of your bot will be able to browse by using reaction-based navigation.\n\nAn extremely simple working example can achieved by this code:\n\n```javascript\nconst { Command, RichDisplay } = require('klasa');\nconst { MessageEmbed } = require('discord.js');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { description: 'Test RichDisplay' });\n\t}\n\n\tasync run(message) {\n\t\treturn new RichDisplay()\n\t\t\t.addPage(new MessageEmbed().setDescription('First page'))\n\t\t\t.addPage(new MessageEmbed().setDescription('Second page'))\n\t\t\t.run(await message.send('Loading...'));\n\t}\n\n};\n```\n\nA more complex example with an actual usage is this:\n\n```javascript\nconst images = [\n\t'https://i.imgur.com/gh3vYgj.jpg',\n\t'https://i.imgur.com/vBV81m4.jpg',\n\t'https://i.imgur.com/92hAsqe.jpg'\n];\n\nmodule.exports = class extends Command {\n\n\tasync run(message) {\n\t\tconst display = new RichDisplay(new MessageEmbed()\n\t\t\t.setColor(0x673AB7)\n\t\t\t.setAuthor(this.client.user.name, this.client.user.avatarURL())\n\t\t\t.setTitle('Norway Pictures Slideshow')\n\t\t\t.setDescription('Scroll between the images using the provided reaction emotes.')\n\t\t);\n\n\t\tfor (let i = 0; i < images.length; i++) {\n\t\t\tdisplay.addPage(template => template.setImage(images[i]));\n\t\t}\n\n\t\treturn display.run(await message.send('Loading slideshow...'));\n\t}\n\n};\n```\n\n> The code is contained in the block of the aforementioned command, inside the `async run(message)` method but the display or its pages can easily be reused by placing its initialization in the command's constructor method.\n\n## Code Analysis\n\nFirst we create a new {@link RichDisplay} instance, but this time we pass in a [`MessageEmbed`](https://discord.js.org/#/docs/main/master/class/MessageEmbed) instance, which will represent our template, from which we will be able to extend upon to create our pages later on:\n\n```javascript\nconst display = new RichDisplay(new MessageEmbed()\n\t/* ... */\n);\n```\n\nThis [`MessageEmbed`](https://discord.js.org/#/docs/main/master/class/MessageEmbed) instance will be accessible to us by either calling the {@link RichDisplay.template} property of the {@link RichDisplay} instance, in a cloned manner, or directly through the {@link RichDisplay.addPage} method, if we pass in an arrow function or a callback.\n\n```javascript\nfor (const image of images) {\n\tdisplay.addPage(template => template.setImage(image));\n}\n```\n\nFrom here we will be able to add content or edit properties of the template, and then, return the final embed to the {@link RichDisplay.addPage} method to be processed into a {@link RichDisplay} page.\nIn our example, we will simply add a static image from the array we defined before.\n\n```javascript\ndisplay.addPage(template => {\n\ttemplate\n\t\t.setImage(image)\n\t\t.setColor(0xF44336);\n\t// You can change everything of the template\n});\n```\n\nThen, after the {@link RichDisplay} is setup, we return, executing it on a new message.\n\n```javascript\nmodule.exports = class extends Command {\n\n\tasync run(message) {\n\t\t// ...\n\t\treturn display.run(await message.send('Loading slideshow...'));\n\t}\n\n};\n```\n\nThe message will show the content we defined in {@link KlasaMessage#send} initially, then, when our {@link RichDisplay} will be ready it will replace the content with the first page we defined.\n\n## Info Page\n\nWe can also define an Info page, which will be available through the appropriate reaction emote.\nAll we have to do is simply call the {@link RichDisplay.setInfoPage} instead than {@link RichDisplay.addPage}. The template will be available to us in the same ways as before.\n\n> Note: only one info page can be set at once. Setting the info page more than once will override the previously defined info page.\n\n## Personalization\n\nBehavior managing can be handled through the second (optional) argument of the {@link RichDisplay.run} method.\nThe configuration must be defined as an [object literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).\nPlease refer to the {@link RichDisplayRunOptions} documentation page for information about each specific option.\n\n### Custom Behavior Handling\n\nTo handle whether or not a user should trigger an action when interacting with the reactions applied to the embed you can provide a `filter` function, which will be called every time a user reacts to the embed.\n\nA simple example for this would be a filter that only allows the user who executes the command to interact with it:\n\n```javascript\nmodule.exports = class extends Command {\n\n\tasync run(message) {\n\t\t// ...\n\t\tdisplay.run(await message.send('Loading slideshow...'), { filter: (reaction, user) => user === message.author });\n\t}\n\n};\n```\n","path":"guides/Other Subjects/RichDisplay.md"},"RichMenu":{"name":"Rich Menu","type":"md","content":"While {@tutorial RichDisplay} allows you to create fully configurable paginated embeds, {@link RichMenu} allows you to define menus using a similar interface.\n\nUnlike {@tutorial RichDisplay}, {@link RichMenu} manages a page's content and layout automatically and instead of calling {@link RichDisplay.addPage} that allows to customize the template (if provided), the user is presented with the {@link RichMenu.addOption} method, which only requires a `name` and a `body` and handles the organization of the options automatically.\n\nLike {@tutorial RichDisplay} there is the option to define a template [`MessageEmbed`](https://discord.js.org/#/docs/main/master/class/MessageEmbed) in its constructor, but it will be applied automatically to each page of the menu.\n\nAn example of how {@link RichMenu} could be used is in a `help`-like command, this is a simple demo of how it would work:\n\n```javascript\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args);\n\t\tthis.menu = new RichMenu(new MessageEmbed()\n\t\t\t.setColor(0x673AB7)\n\t\t\t.setAuthor(this.client.user.username, this.client.user.avatarURL())\n\t\t\t.setTitle('Advanced Commands Help:')\n\t\t\t.setDescription('Use the arrow reactions to scroll between pages.\\nUse number reactions to select an option.')\n\t\t);\n\t}\n\n\tasync run(message) {\n\t\tconst collector = await this.menu.run(await message.send('Loading commands...'));\n\n\t\tconst choice = await collector.selection;\n\t\tif (choice === null) {\n\t\t\treturn collector.message.delete();\n\t\t}\n\n\t\tconst command = this.client.commands.get(this.menu.options[choice].name);\n\t\tconst info = new MessageEmbed()\n\t\t\t.setTitle(`Command \\`${message.guild.settings.prefix}${command.name}\\``)\n\t\t\t.setDescription(typeof command.description === 'function' ? command.description(message) : command.description)\n\t\t\t.addField('Usage:', command.usageString);\n\n\t\tif (command.extendedHelp && command.extendedHelp !== '') {\n\t\t\tconst extendHelp = typeof command.extendedHelp === 'function' ? command.extendedHelp(message) : command.extendedHelp;\n\t\t\tinfo.addField('Help:', extendHelp);\n\t\t}\n\n\t\treturn message.sendEmbed(info);\n\t}\n\n\tinit() {\n\t\tfor (const command of this.client.commands.values()) {\n\t\t\tthis.menu.addOption(command.name, command.description);\n\t\t}\n\t}\n\n};\n```\n\n> The code is designed to be placed in a command, inside the `async run(message)` method but the menu or its options can easily be initialized within the constructor method or the {@link Command.init} method of the command.\n\n## Code Analysis\n\nThe creation of the {@link RichMenu} is the same as the one displayed in {@tutorial RichDisplay}, like most of the code and personalization options. Please refer to the {@tutorial RichDisplay} tutorial.\n\nWe begin by adding the options, which will be listed in the same order we defined.\n\n```javascript\nfor (const command of this.client.commands.values()) {\n\tmenu.addOption(command.name, command.description);\n}\n```\n\nAfter listing all the options we can call {@link RichMenu.run} on our menu to render it.\nWe will store the resulting {@link ReactionHandler} to later access the selected option.\n\n```javascript\nmodule.exports = class extends Command {\n\n\tasync run(message) {\n\t\t// ...\n\t\tconst collector = await menu.run(await message.send('Loading Commands...'));\n\t\t// ...\n\t}\n\n};\n```\n\nWe will also need to [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) for the user to select an option before continuing:\n\n```javascript\nmodule.exports = class extends Command {\n\n\tasync run(message) {\n\t\t// ...\n\t\tconst choice = await collector.selection;\n\t\t// ...\n\t}\n\n};\n```\n\nAfter obtaining the index of the selected option we can access the option's name through our menu:\n\n```javascript\nconst command = this.client.commands.get(menu.options[choice].name);\n```\n\nFinally, we show the user the selected command by editing the original [`MessageEmbed`](https://discord.js.org/#/docs/main/master/class/MessageEmbed):\n\n```javascript\nconst info = new MessageEmbed()\n\t.setTitle(`Command \\`${message.guild.settings.prefix}${command.name}\\``)\n\t.setDescription(typeof command.description === 'function' ? command.description(message) : command.description)\n\t.addField('Usage:', command.usageString);\n\ncollector.message.edit(info);\n```\n\n## Personalization\n\nPersonalization is the same offered by {@tutorial RichDisplay}. You can define an Info Page through {@link RichDisplay.setInfoPage} and you can define custom behavior handling by defining a function in the `filter` argument of {@link RichMenuRunOptions}\n","path":"guides/Other Subjects/RichMenu.md"},"Plugins":{"name":"Plugins","type":"md","content":"## Introducing Plugins\n\nPlugins are whatever you want them to be. They can be extensions to the code, or they can be complete modifications of the code. They allow you to build smaller (or bigger) projects that require Klasa, while still maintaining everything that Klasa offers.\n\nAn example of Klasa Plugins in work is [klasa-dashboard-hooks](https://github.com/dirigeants/klasa-dashboard-hooks).\n\n# To Get Started Using Plugins\n\nIt's very easy to get started with using the new plugin system.\n\nSay we have our main app like so:\n\n```javascript\nconst { Client } = require('klasa');\nconst config = require('./config.json');\n\nnew Client(config).login(config.token);\n```\n\nIf you wanted to use the klasa-dashboard-hooks plugin, you would insert the following code (assuming you installed klasa-dashboard-hooks):\n\n```javascript\nconst { Client } = require('klasa');\nconst config = require('./config.json');\n\nClient.use(require('klasa-dashboard-hooks'));\n\nnew Client(config).login(config.token);\n```\n\nThe client will be created, and you will be able to use all of the features of the plugin inside your bot.\n\nYou can have as many plugins as you want, and they will loaded in the same order that you added them in your main app.\n\n# To Get Started Making Plugins\n\nThe only requirement for making a plugin is to make sure you export an unbound function as the plugin. Here's a small example of what a plugin could look like:\n\n```javascript\n// index.js\nconst { Client: { plugin } } = require('klasa');\nmodule.exports = {\n\t// [plugin] must be typed exactly like this.\n\t[plugin]() {\n\t\tthis.klasaIsCool = true;\n\t}\n};\n```\n\nAccessing `this.client.klasaIsCool` from within your bot would be true here, assuming you followed steps above to insert the plugin into your code with the `use` method.\n\nBesides that, you can basically do anything with your code. Your plugin can extend Klasa code, modify it, or even remove it completely.\n","path":"guides/Other Subjects/Plugins.md"}}},"Building Your Bot":{"name":"Building Your Bot","files":{"CreatingPointsSystems":{"name":"Creating a Points System","type":"md","content":"Creating a points system (also known as a **Social Module**) in your bot is quite easy in Klasa, as we will use our configuration system: **SettingsGateway**. You do NOT need to rewrite any of your code to change the provider, but we also suggest to **NOT** use the JSON provider for this in production, as you may reach the limit of files you can open simultaneously in your [OS](https://en.wikipedia.org/wiki/Operating_system).\n\n## Setting the schema\n\nBefore we work with the social module, we need to update the built-in {@link GatewayDriver#users users' gateway} to implement a new key:\n\n```javascript\nKlasaClient.defaultUserSchema.add('experience', 'Integer', {\n\tdefault: 0,\n\tconfigurable: false\n});\n```\n\nIn this function, we are checking if the schema has the key `experience`. If it doesn't, we add it as a new key, with type `integer` (doubtfully we'll use `float` on this) and make it unconfigurable for the built-in userconf command so the end users do not cheat by modifying their stats.\n\n> **Note**: The name of the key can be anything, can be `xp`, `points`... but we will use this one for the guide.\n\n## Setting the monitor\n\nNow that we have set up the schema, we will want to create a monitor:\n\n```javascript\nconst { Monitor } = require('klasa');\n\nmodule.exports = class extends Monitor {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { ignoreOthers: false });\n\t}\n\n\tasync run(message) {\n\t\t// If the message was not sent in a TextChannel, ignore it.\n\t\tif (!message.guild) return;\n\n\t\t// Update the user's configuration entry by adding 1 to it.\n\t\tawait message.author.settings.update('experience', message.author.settings.experience + 1);\n\t}\n\n};\n```\n\n## Level up!\n\nSome social bots have level up messages. How do we set it up? There are two ways to achieve this:\n\n1. We calculate the current level and the next level on the fly. However, this system is harder to implement and is more expensive to execute, but it's also RAM friendly for massive bots. We won't cover this in the guide.\n1. We add a level field. This makes the configuration update slower by nature as it will need to update two values. First, we will create the key:\n\n```javascript\nKlasaClient.defaultUserSchema.add('level', 'Integer', {\n\tdefault: 0,\n\tconfigurable: false\n});\n```\n\nThen we pick up a level calculation algorithm, the following as an example:\n\n```javascript\nMath.floor(0.1 * Math.sqrt(POINTS + 1));\n```\n\nThen inside our monitor's run method:\n\n```javascript\nconst { Monitor } = require('klasa');\n\nmodule.exports = class extends Monitor {\n\n\t// Constructor\n\n\tasync run(message) {\n\t\t// If the message was not sent in a TextChannel, ignore it.\n\t\tif (!message.guild) return;\n\n\t\t// Calculate the next value for experience.\n\t\tconst nextValue = message.author.settings.experience + 1;\n\n\t\t// Cache the current level.\n\t\tconst currentLevel = message.author.settings.level;\n\n\t\t// Calculate the next level.\n\t\tconst nextLevel = Math.floor(0.1 * Math.sqrt(nextValue + 1));\n\n\t\t// Update the user's configuration entry by adding 1 to it, and update the level also.\n\t\tawait message.author.settings.update([['experience', nextValue], ['level', nextLevel]]);\n\n\t\t// If the current level and the next level are not the same, then it has increased, and you can send the message.\n\t\tif (currentLevel !== nextLevel) {\n\t\t\t// Send the message to the channel congratulating the user.\n\t\t\tawait message.send(`Congratulations! You leveled up to level **${currentLevel}**!`);\n\t\t}\n\t}\n\n\t// Init\n\n};\n```\n\nOptionally, you can check if `nextLevel === message.author.settings.level` is true and update a single key instead, but the speed difference is negligible and since [SettingsGateway v2.1](https://github.com/dirigeants/klasa/pull/179), the key `level` will not be updated if it did not change. As well, this overload is much faster than the JSON object overload, previously used as the only way to update multiple values.\n\n## Creating Our Commands\n\nTo allow users to know their current amount of points and level, we will create two commands:\n\n### Points Command\n\nLet's create a file in `commands/Social/points.js` with the following contents:\n\n```javascript\nconst { Command } = require('klasa');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { description: 'Check how many points you have.' });\n\t}\n\n\trun(message) {\n\t\treturn message.send(`You have a total of ${message.author.settings.experience} experience points!`);\n\t}\n\n};\n\n```\n\n### Level Command\n\nLet's create a file in `commands/Social/level.js` with the following contents:\n\n```javascript\nconst { Command } = require('klasa');\n\nmodule.exports = class extends Command {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { description: 'Check your current level.' });\n\t}\n\n\trun(message) {\n\t\treturn message.send(`You are currently level ${message.author.settings.level}!`);\n\t}\n\n};\n\n```\n","path":"guides/Building Your Bot/CreatingPointsSystems.md"}}}},"classes":[{"name":"KlasaClient","description":"The client for handling everything. See {@tutorial GettingStarted} for more information how to get started using this class.","extends":["external:Client"],"construct":{"name":"KlasaClient","description":"Constructs the Klasa client","params":[{"name":"options","description":"The config to pass to the new client","optional":true,"default":"{}","type":[[["KlasaClientOptions"]]]}]},"props":[{"name":"options","description":"The options the client was instantiated with.","type":[[["KlasaClientOptions"]]],"meta":{"line":141,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"userBaseDirectory","description":"The directory where the user files are at","type":[[["string"]]],"meta":{"line":153,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"console","description":"The console for this instance of klasa. You can disable timestamps, colors, and add writable streams as configuration options to configure this.","type":[[["KlasaConsole"]]],"meta":{"line":160,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"arguments","description":"The cache where argument resolvers are stored","type":[[["ArgumentStore"]]],"meta":{"line":167,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"commands","description":"The cache where commands are stored","type":[[["CommandStore"]]],"meta":{"line":174,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"inhibitors","description":"The cache where inhibitors are stored","type":[[["InhibitorStore"]]],"meta":{"line":181,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"finalizers","description":"The cache where finalizers are stored","type":[[["FinalizerStore"]]],"meta":{"line":188,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"monitors","description":"The cache where monitors are stored","type":[[["MonitorStore"]]],"meta":{"line":195,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"languages","description":"The cache where languages are stored","type":[[["LanguageStore"]]],"meta":{"line":202,"file":"Client.js","path":"src/lib"},"since":"0.2.1"},{"name":"providers","description":"The cache where providers are stored","type":[[["ProviderStore"]]],"meta":{"line":209,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"events","description":"The cache where events are stored","type":[[["EventStore"]]],"meta":{"line":216,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"extendables","description":"The cache where extendables are stored","type":[[["ExtendableStore"]]],"meta":{"line":223,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"tasks","description":"The cache where tasks are stored","type":[[["TaskStore"]]],"meta":{"line":230,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"serializers","description":"The Serializers where serializers are stored","type":[[["SerializerStore"]]],"meta":{"line":237,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"pieceStores","description":"A Store registry","type":[[["external:Collection"]]],"meta":{"line":244,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"permissionLevels","description":"The permissions structure for this bot","type":[[["PermissionLevels"]]],"meta":{"line":251,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"gateways","description":"The GatewayDriver instance where the gateways are stored","type":[[["GatewayDriver"]]],"meta":{"line":258,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"settings","description":"The Settings instance that handles this client's settings","type":[[["Settings"]]],"meta":{"line":289,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"application","description":"The application info cached from the discord api","type":[[["external:ClientApplication"]]],"meta":{"line":296,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"schedule","description":"The Schedule that runs the tasks","type":[[["Schedule"]]],"meta":{"line":318,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"ready","description":"Whether the client is truly ready or not","type":[[["boolean"]]],"meta":{"line":325,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"invite","description":"The invite link for the bot","readonly":true,"type":[[["string"]]],"meta":{"line":337,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"owner","description":"The owner for this bot","readonly":true,"nullable":true,"type":[[["KlasaUser"]]],"meta":{"line":348,"file":"Client.js","path":"src/lib"},"since":"0.1.1"},{"name":"plugin","description":"The plugin symbol to be used in external packages","scope":"static","type":[[["Symbol"]]],"meta":{"line":486,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"basePermissions","description":"The base Permissions that the {@link Client#invite} asks for. Defaults to [VIEW_CHANNEL, SEND_MESSAGES]","scope":"static","type":[[["Permissions"]]],"meta":{"line":493,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"defaultPermissionLevels","description":"The default PermissionLevels","scope":"static","type":[[["PermissionLevels"]]],"meta":{"line":500,"file":"Client.js","path":"src/lib"},"since":"0.2.1"},{"name":"defaultGuildSchema","description":"The default Guild Schema","scope":"static","type":[[["Schema"]]],"meta":{"line":513,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"defaultUserSchema","description":"The default User Schema","scope":"static","type":[[["Schema"]]],"meta":{"line":529,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"defaultClientSchema","description":"The default Client Schema","scope":"static","type":[[["Schema"]]],"meta":{"line":536,"file":"Client.js","path":"src/lib"},"since":"0.5.0"}],"methods":[{"name":"fetchApplication","description":"Obtains the OAuth Application of the bot from Discord.\nWhen ran, this function will update {@link KlasaClient#application}.","returns":[[["Promise","<"],["external:ClientApplication",">"]]],"async":true,"meta":{"line":358,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"validatePermissionLevels","description":"Validates the permission structure passed to the client","access":"private","returns":[[["PermissionLevels"]]],"meta":{"line":369,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"registerStore","description":"Registers a custom store to the client","params":[{"name":"store","description":"The store that pieces will be stored in","type":[[["Store"]]]}],"returns":[[["this"]]],"meta":{"line":383,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"unregisterStore","description":"Un-registers a custom store from the client","params":[{"name":"storeName","description":"The store that pieces will be stored in","type":[[["Store"]]]}],"returns":[[["this"]]],"meta":{"line":395,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"login","description":"Use this to login to Discord with your bot","params":[{"name":"token","description":"Your bot token","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"async":true,"meta":{"line":406,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones older than the max message or command message lifetime.\nIf the message has been edited, the time of the edit is used rather than the time of the original message.","params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\nwill be removed from the caches. The default is based on [ClientOptions#messageCacheLifetime]{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions?scrollTo=messageCacheLifetime}","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]},{"name":"commandLifetime","description":"Messages that are older than this (in seconds)\nwill be removed from the caches. The default is based on {@link KlasaClientOptions#commandMessageLifetime}","optional":true,"default":"this.options.commandMessageLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\nor -1 if the message cache lifetime is unlimited"},"meta":{"line":434,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"use","description":"Caches a plugin module to be used when creating a KlasaClient instance","scope":"static","params":[{"name":"mod","description":"The module of the plugin to use","type":[[["Object"]]]}],"returns":[[["this"]]],"meta":{"line":470,"file":"Client.js","path":"src/lib"},"since":"0.5.0"}],"events":[{"name":"klasaReady","description":"Emitted when Klasa is fully ready and initialized.","meta":{"line":541,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"log","description":"A central logging event for Klasa.","params":[{"name":"data","description":"The data to log","type":[[["string"]],[["Object"]]]}],"meta":{"line":547,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"verbose","description":"An event for handling verbose logs","params":[{"name":"data","description":"The data to log","type":[[["string"]],[["Object"]]]}],"meta":{"line":554,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"wtf","description":"An event for handling wtf logs (what a terrible failure)","params":[{"name":"data","description":"The data to log","type":[[["string"]],[["Object"]]]}],"meta":{"line":561,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"commandUnknown","description":"Emitted when an unknown command is called.","params":[{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command attempted to run","type":[[["string"]]]},{"name":"prefix","description":"The prefix used","type":[[["RegExp"]]]},{"name":"prefixLength","description":"The length of the prefix used","type":[[["number"]]]}],"meta":{"line":568,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"commandInhibited","description":"Emitted when a command has been inhibited.","params":[{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command triggered","type":[[["Command"]]]},{"name":"response","description":"The reason why it was inhibited if not silent","nullable":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":578,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"commandRun","description":"Emitted when a command has been run.","params":[{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command run","type":[[["Command"]]]},{"name":"args","description":"The raw arguments of the command","type":[[["Array","<"],["string",">"]]]}],"meta":{"line":587,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"commandSuccess","description":"Emitted when a command has been run.","params":[{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command run","type":[[["Command"]]]},{"name":"params","description":"The resolved parameters of the command","type":[[["Array","<"],["any",">"]]]},{"name":"response","description":"Usually a response message, but whatever the command returned","nullable":true,"type":[[["any"]]]}],"meta":{"line":596,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"commandError","description":"Emitted when a command has encountered an error.","params":[{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command run","type":[[["Command"]]]},{"name":"params","description":"The resolved parameters of the command","type":[[["Array","<"],["any",">"]]]},{"name":"error","description":"The command error","type":[[["string"]],[["Object"]]]}],"meta":{"line":606,"file":"Client.js","path":"src/lib"},"since":"0.3.0"},{"name":"eventError","description":"Emitted when an event has encountered an error.","params":[{"name":"event","description":"The event that errored","type":[[["Event"]]]},{"name":"args","description":"The event arguments","type":[[["Array","<"],["any",">"]]]},{"name":"error","description":"The event error","type":[[["string"]],[["Object"]]]}],"meta":{"line":616,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"monitorError","description":"Emitted when a monitor has encountered an error.","params":[{"name":"message","description":"The message that triggered the monitor","type":[[["KlasaMessage"]]]},{"name":"monitor","description":"The monitor run","type":[[["Monitor"]]]},{"name":"error","description":"The monitor error","type":[[["Error"]],[["string"]]]}],"meta":{"line":625,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"finalizerError","description":"Emitted when a finalizer has encountered an error.","params":[{"name":"message","description":"The message that triggered the finalizer","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command this finalizer is for (may be different than message.command)","type":[[["Command"]]]},{"name":"response","description":"The response from the command","type":[[["KlasaMessage"]],[["any"]]]},{"name":"timer","description":"The timer run from start to queue of the command","type":[[["Stopwatch"]]]},{"name":"finalizer","description":"The finalizer run","type":[[["Finalizer"]]]},{"name":"error","description":"The finalizer error","type":[[["Error"]],[["string"]]]}],"meta":{"line":634,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"taskError","description":"Emitted when a task has encountered an error.","params":[{"name":"scheduledTask","description":"The scheduled task","type":[[["ScheduledTask"]]]},{"name":"task","description":"The task run","type":[[["Task"]]]},{"name":"error","description":"The task error","type":[[["Error"]],[["string"]]]}],"meta":{"line":646,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"settingsUpdateEntry","description":"Emitted when {@link Settings#update} or {@link Settings#reset} is run.","params":[{"name":"entry","description":"The patched Settings instance","type":[[["Settings"]]]},{"name":"updated","description":"The keys that were updated","type":[[["Array","<"],["SettingsUpdateResultEntry",">"]]]}],"meta":{"line":655,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"settingsDeleteEntry","description":"Emitted when {@link Settings#destroy} is run.","params":[{"name":"entry","description":"The entry which got deleted","type":[[["Settings"]]]}],"meta":{"line":663,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"settingsCreateEntry","description":"Emitted when a new entry in the database has been created upon update.","params":[{"name":"entry","description":"The entry which got created","type":[[["Settings"]]]}],"meta":{"line":670,"file":"Client.js","path":"src/lib"},"since":"0.5.0"},{"name":"pieceLoaded","description":"Emitted when a piece is loaded. (This can be spammy on bot startup or anytime you reload all of a piece type.)","params":[{"name":"piece","description":"The piece that was loaded","type":[[["Piece"]]]}],"meta":{"line":677,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"pieceUnloaded","description":"Emitted when a piece is unloaded.","params":[{"name":"piece","description":"The piece that was unloaded","type":[[["Piece"]]]}],"meta":{"line":684,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"pieceReloaded","description":"Emitted when a piece is reloaded.","params":[{"name":"piece","description":"The piece that was reloaded","type":[[["Piece"]]]}],"meta":{"line":691,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"pieceEnabled","description":"Emitted when a piece is enabled.","params":[{"name":"piece","description":"The piece that was enabled","type":[[["Piece"]]]}],"meta":{"line":698,"file":"Client.js","path":"src/lib"},"since":"0.4.0"},{"name":"pieceDisabled","description":"Emitted when a piece is disabled.","params":[{"name":"piece","description":"The piece that was disabled","type":[[["Piece"]]]}],"meta":{"line":705,"file":"Client.js","path":"src/lib"},"since":"0.4.0"}],"meta":{"line":44,"file":"Client.js","path":"src/lib"}},{"name":"KlasaGuild","description":"Klasa's Extended Guild","extends":["external:Guild"],"construct":{"name":"KlasaGuild","params":[{"name":"args","description":"Normal D.JS Guild args","variable":true,"type":[["*"]]}]},"props":[{"name":"settings","description":"The guild level settings for this context (guild || default)","type":[[["Settings"]]],"meta":{"line":26,"file":"KlasaGuild.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"language","description":"The language configured for this guild","nullable":true,"type":[[["Language"]]],"meta":{"line":33,"file":"KlasaGuild.js","path":"src/lib/extensions"}}],"methods":[{"name":"toJSON","description":"Returns the JSON-compatible object of this instance.","returns":[[["KlasaGuildJSON"]]],"meta":{"line":42,"file":"KlasaGuild.js","path":"src/lib/extensions"},"since":"0.5.0"}],"meta":{"line":8,"file":"KlasaGuild.js","path":"src/lib/extensions"}},{"name":"KlasaMessage","description":"Klasa's Extended Message","extends":["external:Message"],"construct":{"name":"KlasaMessage","params":[{"name":"args","description":"Normal D.JS Message args","variable":true,"type":[["*"]]}]},"props":[{"name":"guildSettings","description":"The guild level settings for this context (guild || default)","type":[[["Settings"]]],"meta":{"line":21,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"command","description":"The command being run","nullable":true,"type":[[["Command"]]],"meta":{"line":28,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"prefix","description":"The prefix used","nullable":true,"type":[[["RegExp"]]],"meta":{"line":35,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"prefixLength","description":"The length of the prefix used","nullable":true,"type":[[["number"]]],"meta":{"line":42,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"prompter","description":"A command prompt/argument handler","access":"private","type":[[["CommandPrompt"]]],"meta":{"line":50,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"_responses","description":"The responses to this message","access":"private","type":[[["Array","<"],["external:KlasaMessage",">"]]],"meta":{"line":58,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"responses","description":"The previous responses to this message","readonly":true,"type":[[["Array","<"],["KlasaMessage",">"]]],"meta":{"line":67,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"args","description":"The string arguments derived from the usageDelim of the command","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"params","description":"The parameters resolved by this class","readonly":true,"type":[[["Array","<"],["any",">"]]],"meta":{"line":87,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"flags","description":"The flags resolved by this class","readonly":true,"type":[[["Object"]]],"meta":{"line":97,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"reprompted","description":"If the command reprompted for missing args","readonly":true,"type":[[["boolean"]]],"meta":{"line":107,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"reactable","description":"If this message can be reacted to by the bot","readonly":true,"type":[[["boolean"]]],"meta":{"line":117,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"levelID","description":"Gets the level id of this message (with respect to @{link Command#cooldownLevel})","access":"private","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":129,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"language","description":"The language in this setting","type":[[["Language"]]],"meta":{"line":287,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.3.0"}],"methods":[{"name":"prompt","description":"Awaits a response from the author.","params":[{"name":"text","description":"The text to prompt the author","type":[[["string"]]]},{"name":"time","description":"The time to wait before giving up","optional":true,"default":30000,"type":[[["number"]]]}],"returns":[[["Promise","<"],["KlasaMessage",">"]]],"async":true,"meta":{"line":140,"file":"KlasaMessage.js","path":"src/lib/extensions"}},{"name":"usableCommands","description":"The usable commands by the author in this message's context","returns":{"types":[[["Promise","<"],["Collection","<"],["string",", "],["Command",">>"]]],"description":"The filtered CommandStore"},"async":true,"meta":{"line":153,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"hasAtLeastPermissionLevel","description":"Checks if the author of this message, has applicable permission in this message's context of at least min","params":[{"name":"min","description":"The minimum level required","type":[[["number"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"async":true,"meta":{"line":171,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"sendMessage","description":"Sends a message that will be editable via command editing (if nothing is attached)","params":[{"name":"content","description":"The content to send","optional":true,"type":[[["external:StringResolvable"]],[["external:MessageEmbed"]],[["external:MessageAttachment"]]]},{"name":"options","description":"The D.JS message options","optional":true,"type":[[["external:MessageOptions"]]]}],"returns":[[["Promise","<"],["KlasaMessage",">"]],[["Promise","<"],["Array","<"],["KlasaMessage",">>"]]],"async":true,"meta":{"line":183,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"sendEmbed","description":"Sends an embed message that will be editable via command editing (if nothing is attached)","params":[{"name":"embed","description":"The embed to post","type":[[["external:MessageEmbed"]]]},{"name":"content","description":"The content to send","optional":true,"type":[[["external:StringResolvable"]]]},{"name":"options","description":"The D.JS message options","optional":true,"type":[[["external:MessageOptions"]]]}],"returns":[[["Promise","<("],["KlasaMessage","|"],["Array","<"],["KlasaMessage",">)>"]]],"meta":{"line":222,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"sendCode","description":"Sends a codeblock message that will be editable via command editing (if nothing is attached)","params":[{"name":"code","description":"The language of the codeblock","type":[[["string"]]]},{"name":"content","description":"The content to send","type":[[["external:StringResolvable"]]]},{"name":"options","description":"The D.JS message options","optional":true,"type":[[["external:MessageOptions"]]]}],"returns":[[["Promise","<("],["KlasaMessage","|"],["Array","<"],["KlasaMessage",">)>"]]],"meta":{"line":234,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"send","description":"Sends a message that will be editable via command editing (if nothing is attached)","params":[{"name":"content","description":"The content to send","optional":true,"type":[[["external:StringResolvable"]],[["external:MessageEmbed"]],[["external:MessageAttachment"]]]},{"name":"options","description":"The D.JS message options","optional":true,"type":[[["external:MessageOptions"]]]}],"returns":[[["Promise","<("],["KlasaMessage","|"],["Array","<"],["KlasaMessage",">)>"]]],"meta":{"line":245,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.0.1"},{"name":"sendLocale","description":"Sends a message that will be editable via command editing (if nothing is attached)","params":[{"name":"key","description":"The Language key to send","type":[[["string"]]]},{"name":"localeArgs","description":"The language arguments to pass","optional":true,"type":[[["Array","<"],["*",">"]]]},{"name":"options","description":"The D.JS message options plus Language arguments","optional":true,"type":[[["external:MessageOptions"]]]}],"returns":[[["Promise","<("],["KlasaMessage","|"],["Array","<"],["KlasaMessage",">)>"]]],"meta":{"line":257,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"patch","description":"Since d.js is dumb and has 2 patch methods, this is for edits","access":"private","params":[{"name":"data","description":"The data passed from the original constructor","type":[["*"]]}],"meta":{"line":268,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"_patch","description":"Extends the patch method from D.JS to attach and update the language to this instance","access":"private","params":[{"name":"data","description":"The data passed from the original constructor","type":[["*"]]}],"meta":{"line":279,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"},{"name":"_registerCommand","description":"Register's this message as a Command Message","access":"private","params":[{"name":"commandInfo","description":"The info about the command and prefix used","type":[[["Object"]]]}],"returns":[[["this"]]],"meta":{"line":300,"file":"KlasaMessage.js","path":"src/lib/extensions"},"since":"0.5.0"}],"meta":{"line":8,"file":"KlasaMessage.js","path":"src/lib/extensions"}},{"name":"KlasaUser","description":"Klasa's Extended User","extends":["external:User"],"construct":{"name":"KlasaUser","params":[{"name":"args","description":"Normal D.JS User args","variable":true,"type":[["*"]]}]},"props":[{"name":"settings","description":"The user level settings for this context (user || default)","type":[[["Settings"]]],"meta":{"line":26,"file":"KlasaUser.js","path":"src/lib/extensions"},"since":"0.5.0"}],"methods":[{"name":"toJSON","description":"Returns the JSON-compatible object of this instance.","returns":[[["KlasaUserJSON"]]],"meta":{"line":34,"file":"KlasaUser.js","path":"src/lib/extensions"},"since":"0.5.0"}],"meta":{"line":8,"file":"KlasaUser.js","path":"src/lib/extensions"}},{"name":"PermissionLevels","description":"Permission levels. See {@tutorial UnderstandingPermissionLevels} for more information how to use this class\nto define custom permissions.","extends":["external:Collection"],"construct":{"name":"PermissionLevels","description":"Creates a new PermissionLevels","params":[{"name":"levels","description":"How many permission levels there should be","default":11,"type":[[["number"]]]}]},"methods":[{"name":"add","description":"Adds levels to the levels cache","params":[{"name":"level","description":"The permission number for the level you are defining","type":[[["number"]]]},{"name":"check","description":"The permission checking function","type":[[["function"]]]},{"name":"options","description":"If the permission should auto fetch members","optional":true,"default":"{}","type":[[["PermissionLevelOptions"]]]}],"returns":[[["this"]]],"meta":{"line":44,"file":"PermissionLevels.js","path":"src/lib/permissions"},"since":"0.2.1"},{"name":"remove","description":"Removes levels from the levels cache","params":[{"name":"level","description":"The permission number for the level you are removing","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":54,"file":"PermissionLevels.js","path":"src/lib/permissions"},"since":"0.5.0"},{"name":"set","description":"Adds levels to the levels cache to be converted to valid permission structure","access":"private","params":[{"name":"level","description":"The permission number for the level you are defining","type":[[["number"]]]},{"name":"obj","description":"Whether the level should break (stop processing higher levels, and inhibit a no permission error)","type":[[["PermissionLevelOptions"]],[["symbol"]]]}],"returns":[[["this"]]],"meta":{"line":66,"file":"PermissionLevels.js","path":"src/lib/permissions"},"since":"0.2.1"},{"name":"isValid","description":"Checks if all permission levels are valid","returns":[[["boolean"]]],"meta":{"line":77,"file":"PermissionLevels.js","path":"src/lib/permissions"},"since":"0.2.1"},{"name":"debug","description":"Returns any errors in the perm levels","returns":{"types":[[["string"]]],"description":"Error message(s)"},"meta":{"line":86,"file":"PermissionLevels.js","path":"src/lib/permissions"},"since":"0.2.1"},{"name":"run","description":"Runs the defined permissionLevels","params":[{"name":"message","description":"The message to pass to perm level functions","type":[[["KlasaMessage"]]]},{"name":"min","description":"The minimum permissionLevel ok to pass","type":[[["number"]]]}],"returns":[[["Promise","<"],["PermissionLevelsData",">"]]],"async":true,"meta":{"line":105,"file":"PermissionLevels.js","path":"src/lib/permissions"},"since":"0.2.1"}],"meta":{"line":11,"file":"PermissionLevels.js","path":"src/lib/permissions"}},{"name":"Schedule","description":"<warning>Schedule is a singleton, use {@link KlasaClient#schedule} instead.</warning>\nThe Schedule class that manages all scheduled tasks","construct":{"name":"Schedule","params":[{"name":"client","description":"The Client that initialized this instance","type":[[["KlasaClient"]]]}]},"props":[{"name":"client","description":"The Client instance that initialized this instance","type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"tasks","description":"An array of all processed ScheduledTask instances","type":[[["Array","<"],["ScheduledTask",">"]]],"meta":{"line":33,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_interval","description":"The current interval that runs the tasks","access":"private","type":[[["NodeJSTimer"]]],"meta":{"line":41,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_tasks","description":"Get all the tasks from the cache","access":"private","type":[[["Array","<"],["ScheduledTaskOptions",">"]]],"meta":{"line":50,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"}],"methods":[{"name":"init","description":"Init the Schedule","async":true,"meta":{"line":58,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"execute","description":"Execute the current tasks","async":true,"meta":{"line":77,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"get","description":"Returns the next ScheduledTask from the id","params":[{"name":"id","description":"The id of the ScheduledTask you want","type":[[["string"]]]}],"returns":[[["ScheduledTask"]]],"meta":{"line":100,"file":"Schedule.js","path":"src/lib/schedule"}},{"name":"next","description":"Return the next ScheduledTask pending for execution","returns":[[["ScheduledTask"]]],"meta":{"line":108,"file":"Schedule.js","path":"src/lib/schedule"}},{"name":"create","description":"Adds a new task to the database","see":["https://en.wikipedia.org/wiki/Cron For more details"],"examples":["// Create a new reminder that ends in 2018-03-09T12:30:00.000Z (UTC)\nSchedule.create('reminder', new Date(Date.UTC(2018, 2, 9, 12, 30)), {\n    data: {\n        user: '242043489611808769',\n        db_id: 'jbifpb4f'\n    }\n});\n\n// Create a scheduled task that runs once a week\nSchedule.create('backup', '@weekly');\n\n// Or even, a weekly backup on Tuesday and Friday that fires at 00:00 (UTC)\nSchedule.create('backup', '0 0 * * tue,fri');\n\n// NOTE: It's highly advised ScheduledTaskOptions.data to be a small object or string,\n// as it being larger can cause a slowdown and memory increase. You can, however, have\n// a table in your database and query it by its entry id from the Task instance."],"params":[{"name":"taskName","description":"The name of the task","type":[[["string"]]]},{"name":"time","description":"The time or Cron pattern","type":[[["Date"]],[["number"]],[["string"]]]},{"name":"options","description":"The options for the ScheduleTask instance","optional":true,"type":[[["ScheduledTaskOptions"]]]}],"returns":{"types":[[["Promise","<"],["ScheduledTask",">"]]],"nullable":true},"async":true,"meta":{"line":139,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"delete","description":"Delete a Task by its ID","params":[{"name":"id","description":"The ID to search for","type":[[["string"]]]}],"returns":[[["Promise","<"],["this",">"]]],"async":true,"meta":{"line":152,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"clear","description":"Clear all the ScheduledTasks","async":true,"meta":{"line":168,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_add","description":"Adds a task to the cache","access":"private","params":[{"name":"taskName","description":"The name of the task","type":[[["string"]]]},{"name":"time","description":"The time or Cron pattern","type":[[["Date"]],[["number"]],[["string"]]]},{"name":"options","description":"The options for the ScheduledTask instance","optional":true,"default":"{}","type":[[["ScheduledTaskOptions"]]]}],"returns":{"types":[[["Promise","<"],["ScheduledTask",">"]]],"nullable":true},"async":true,"meta":{"line":183,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_insert","description":"Inserts the ScheduledTask instance in its sorted position for optimization","access":"private","params":[{"name":"task","description":"The ScheduledTask instance to insert","type":[[["ScheduledTask"]]]}],"returns":[[["ScheduledTask"]]],"meta":{"line":206,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_clearInterval","description":"Clear the current interval","access":"private","meta":{"line":218,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_checkInterval","description":"Sets the interval when needed","access":"private","meta":{"line":228,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"@@iterator","description":"Returns a new Iterator object that contains the values for each element contained in the task queue.","returns":[[["Iterator","<"],["ScheduledTask",">"]]],"generator":true,"meta":{"line":233,"file":"Schedule.js","path":"src/lib/schedule"},"since":"0.5.0"}],"meta":{"line":7,"file":"Schedule.js","path":"src/lib/schedule"}},{"name":"ScheduledTask","description":"The structure for future tasks to be run","construct":{"name":"ScheduledTask","description":"Initializes a new ScheduledTask","params":[{"name":"client","description":"The client that initialized this instance","type":[[["KlasaClient"]]]},{"name":"taskName","description":"The name of the task this ScheduledTask is for","type":[[["string"]]]},{"name":"time","description":"The time or {@link Cron} pattern","type":[[["TimeResolvable"]]]},{"name":"options","description":"The options for this ScheduledTask instance","optional":true,"default":"{}","type":[[["ScheduledTaskOptions"]]]}]},"props":[{"name":"client","description":"The Client instance that initialized this instance","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":48,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"taskName","description":"The name of the Task this scheduled task will run","type":[[["string"]]],"meta":{"line":62,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"recurring","description":"Whether this scheduled task is scheduled with the {@link Cron} pattern","nullable":true,"type":[[["Cron"]]],"meta":{"line":69,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"time","description":"The Date when this scheduled task ends","type":[[["Date"]]],"meta":{"line":76,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"id","description":"The id for this scheduled task","type":[[["string"]]],"meta":{"line":83,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"catchUp","description":"If the task should catch up in the event the bot is down","type":[[["string"]]],"meta":{"line":90,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"data","description":"The stored metadata to send to the Task","type":[["*"]],"meta":{"line":97,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"running","description":"If the ScheduledTask is being run currently","access":"private","type":[[["boolean"]]],"meta":{"line":105,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"store","description":"The Schedule class that manages all scheduled tasks","readonly":true,"type":[[["Schedule"]]],"meta":{"line":110,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"task","description":"The Task instance this scheduled task will run","readonly":true,"nullable":true,"type":[[["Task"]]],"meta":{"line":127,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"}],"methods":[{"name":"run","description":"Run the current task and bump it if needed","returns":[[["Promise","<"],["this",">"]]],"async":true,"meta":{"line":136,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"update","description":"Update the task","examples":["// Update the data from the current scheduled task. Let's say I want to change the reminder content to remind me\n// another thing\nScheduledTask.update({ data: { content: 'Woo! I edited this reminder\\'s content!' } });\n\n// But you can also update the time this will end at, for example, to change it so it ends in 1 hour:\nScheduledTask.update({ time: Date.now() + 60000 * 60 });"],"params":[{"name":"options","description":"The options to update","optional":true,"default":"{}","type":[[["ScheduledTaskUpdateOptions"]]]}],"returns":[[["Promise","<"],["this",">"]]],"async":true,"meta":{"line":165,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"delete","description":"Delete the task","examples":["ScheduledTask.delete()\n    .then(() => console.log('Successfully deleted the task'))\n    .catch(console.error);"],"returns":[[["Promise","<"],["Schedule",">"]]],"meta":{"line":193,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"toJSON","description":"Override for JSON.stringify","returns":[[["ScheduledTaskJSON"]]],"meta":{"line":202,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_resolveTime","description":"Resolve the time and cron","scope":"static","access":"private","params":[{"name":"time","description":"The time or {@link Cron} pattern","type":[[["TimeResolvable"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":220,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_generateID","description":"Generate a new ID based on timestamp and shard","scope":"static","access":"private","params":[{"name":"client","description":"The Discord client","type":[[["KlasaClient"]]]}],"returns":[[["string"]]],"meta":{"line":238,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"},{"name":"_validate","description":"Validate a task","scope":"static","access":"private","params":[{"name":"st","description":"The task to validate","type":[[["ScheduledTask"]]]}],"meta":{"line":249,"file":"ScheduledTask.js","path":"src/lib/schedule"},"since":"0.5.0"}],"meta":{"line":7,"file":"ScheduledTask.js","path":"src/lib/schedule"}},{"name":"Gateway","description":"<danger>You should never create a Gateway instance by yourself.\nPlease check {@link UnderstandingSettingsGateway} about how to construct your own Gateway.</danger>\nThe Gateway class that manages the data input, parsing, and output, of an entire database, while keeping a cache system sync with the changes.","extends":["GatewayStorage"],"construct":{"name":"Gateway","params":[{"name":"store","description":"The GatewayDriver instance which initiated this instance","type":[[["GatewayDriver"]]]},{"name":"type","description":"The name of this Gateway","type":[[["string"]]]},{"name":"schema","description":"The schema for this gateway","type":[[["Schema"]]]},{"name":"provider","description":"The provider's name for this gateway","type":[[["string"]]]}]},"props":[{"name":"store","description":"The GatewayDriver that manages this Gateway","type":[[["GatewayDriver"]]],"meta":{"line":28,"file":"Gateway.js","path":"src/lib/settings"},"since":"0.0.1"},{"name":"cache","description":"The cached entries for this Gateway or the external datastore to get the settings from","type":[[["external:Collection","<"],["string",", "],["Settings",">"]],[["external:DataStore"]]],"meta":{"line":35,"file":"Gateway.js","path":"src/lib/settings"},"since":"0.0.1"},{"name":"syncQueue","description":"The synchronization queue for all Settings instances","type":[[["external:Collection","<"],["string",", "],["Promise","<"],["Settings",">>"]]],"meta":{"line":42,"file":"Gateway.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"Settings","description":"The Settings that this class should make.","access":"private","readonly":true,"type":[[["Settings"]]],"meta":{"line":59,"file":"Gateway.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"client","description":"The client this GatewayStorage was created with.","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":32,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"type","description":"The type of this GatewayStorage.","readonly":true,"type":[[["string"]]],"meta":{"line":41,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"providerName","description":"The name of this instance's provider.","readonly":true,"type":[[["string"]]],"meta":{"line":50,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"schema","type":[[["Schema"]]],"meta":{"line":63,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"ready","type":[[["boolean"]]],"meta":{"line":69,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"provider","description":"Get the provider that manages the persistent data.","readonly":true,"nullable":true,"type":[[["Provider"]]],"meta":{"line":78,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"defaults","description":"Get this gateway's defaults.","readonly":true,"type":[[["Object"]]],"meta":{"line":88,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"}],"methods":[{"name":"get","description":"Get an entry from the cache.","params":[{"name":"id","description":"The key to get from the cache","type":[[["string"]]]},{"name":"create","description":"Whether SG should create a new instance of Settings in the background, if the entry does not already exist.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Settings"]]],"nullable":true},"meta":{"line":70,"file":"Gateway.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"sync","description":"Sync either all entries from the cache with the persistent database, or a single one.","params":[{"name":"input","description":"An object containing a id property, like discord.js objects, or a string","optional":true,"default":"Array<string>","type":[[["Array","<"],["string",">"]],[["string"]]]}],"returns":{"types":[[["Promise","<"],["Gateway",">"]],[["Promise","<"],["Settings",">"]]],"nullable":true},"async":true,"meta":{"line":87,"file":"Gateway.js","path":"src/lib/settings"},"since":"0.0.1"},{"name":"getPath","description":"Resolve a path from a string.","inherits":"GatewayStorage#getPath","inherited":true,"params":[{"name":"key","description":"A string to resolve","optional":true,"default":null,"type":[[["string"]]]},{"name":"options","description":"Whether the Gateway should avoid configuring the selected key","optional":true,"default":"{}","type":[[["GatewayGetPathOptions"]]]}],"returns":{"types":[[["GatewayGetPathResult"]]],"nullable":true},"meta":{"line":99,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"init","description":"Inits the current Gateway.","inherits":"GatewayStorage#init","inherited":true,"async":true,"meta":{"line":144,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toJSON","description":"Get a JSON object containing the schema and options.","inherits":"GatewayStorage#toJSON","inherited":true,"returns":[[["GatewayJSON"]]],"meta":{"line":188,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toString","description":"Stringify a value or the instance itself.","inherits":"GatewayStorage#toString","inherited":true,"returns":[[["string"]]],"meta":{"line":201,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"}],"meta":{"line":11,"file":"Gateway.js","path":"src/lib/settings"}},{"name":"GatewayDriver","description":"<warning>GatewayDriver is a singleton, use {@link KlasaClient#gateways} instead.</warning>\nGateway's driver to make new instances of it, with the purpose to handle different databases simultaneously.","construct":{"name":"GatewayDriver","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]}]},"props":[{"name":"client","description":"The client this GatewayDriver was created with.","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":22,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.3.0"},{"name":"_queue","description":"The register creation queue.","access":"private","readonly":true,"type":[[["Array","<"],["function","()>"]]],"meta":{"line":31,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"keys","description":"All the gateways added","type":[[["Set","<"],["string",">"]]],"meta":{"line":45,"file":"GatewayDriver.js","path":"src/lib/settings"}},{"name":"guilds","description":"The Gateway that manages per-guild data","nullable":true,"type":[[["Gateway"]]],"meta":{"line":51,"file":"GatewayDriver.js","path":"src/lib/settings"}},{"name":"users","description":"The Gateway that manages per-user data","nullable":true,"type":[[["Gateway"]]],"meta":{"line":57,"file":"GatewayDriver.js","path":"src/lib/settings"}},{"name":"clientStorage","description":"The Gateway that manages per-client data","nullable":true,"type":[[["Gateway"]]],"meta":{"line":63,"file":"GatewayDriver.js","path":"src/lib/settings"}}],"methods":[{"name":"register","description":"Registers a new Gateway.","params":[{"name":"name","description":"The name for the new gateway","type":[[["string"]]]},{"name":"options","description":"The options for the new gateway","optional":true,"default":"{}","type":[[["GatewayDriverRegisterOptions"]]]}],"returns":[[["this"]]],"meta":{"line":75,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"init","description":"Initializes all gateways from the queue","async":true,"meta":{"line":92,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"sync","description":"Sync all gateways","params":[{"name":"input","description":"The arguments to pass to each Gateway#sync","type":[[["string"]],[["Array","<"],["string",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["Gateway",">>"]]],"meta":{"line":103,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"@@iterator","description":"Returns a new Iterator object that contains the values for each gateway contained in this driver.","returns":[[["Iterator","<"],["Array","<("],["string","|"],["Gateway",")>>"]]],"generator":true,"meta":{"line":107,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toJSON","description":"The GatewayDriver with all gateways, types and keys as JSON.","returns":[[["Object"]]],"meta":{"line":127,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toString","description":"The stringified GatewayDriver with all the managed gateways.","returns":[[["string"]]],"meta":{"line":140,"file":"GatewayDriver.js","path":"src/lib/settings"},"since":"0.5.0"}],"meta":{"line":8,"file":"GatewayDriver.js","path":"src/lib/settings"}},{"name":"GatewayStorage","access":"private","construct":{"name":"GatewayStorage","description":"<warning>You should never create an instance of this class as it's abstract.</warning>","params":[{"name":"client","description":"The client this GatewayStorage was created with","type":[[["KlasaClient"]]]},{"name":"type","description":"The name of this GatewayStorage","type":[[["string"]]]},{"name":"schema","description":"The schema for this gateway","type":[[["Schema"]]]},{"name":"provider","description":"The provider's name","optional":true,"type":[[["string"]]]}]},"props":[{"name":"client","description":"The client this GatewayStorage was created with.","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":32,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"type","description":"The type of this GatewayStorage.","readonly":true,"type":[[["string"]]],"meta":{"line":41,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"providerName","description":"The name of this instance's provider.","readonly":true,"type":[[["string"]]],"meta":{"line":50,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"schema","type":[[["Schema"]]],"meta":{"line":63,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"ready","type":[[["boolean"]]],"meta":{"line":69,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"provider","description":"Get the provider that manages the persistent data.","readonly":true,"nullable":true,"type":[[["Provider"]]],"meta":{"line":78,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"defaults","description":"Get this gateway's defaults.","readonly":true,"type":[[["Object"]]],"meta":{"line":88,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"}],"methods":[{"name":"getPath","description":"Resolve a path from a string.","params":[{"name":"key","description":"A string to resolve","optional":true,"default":null,"type":[[["string"]]]},{"name":"options","description":"Whether the Gateway should avoid configuring the selected key","optional":true,"default":"{}","type":[[["GatewayGetPathOptions"]]]}],"returns":{"types":[[["GatewayGetPathResult"]]],"nullable":true},"meta":{"line":99,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"init","description":"Inits the current Gateway.","async":true,"meta":{"line":144,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toJSON","description":"Get a JSON object containing the schema and options.","returns":[[["GatewayJSON"]]],"meta":{"line":188,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toString","description":"Stringify a value or the instance itself.","returns":[[["string"]]],"meta":{"line":201,"file":"GatewayStorage.js","path":"src/lib/settings"},"since":"0.5.0"}],"meta":{"line":31,"file":"GatewayStorage.js","path":"src/lib/settings"}},{"name":"Schema","description":"The base Schema for {@link Gateway}s","extends":["Map"],"construct":{"name":"Schema","params":[{"name":"basePath","description":"The base schema path","optional":true,"default":"''","type":[[["string"]]]}]},"props":[{"name":"path","description":"Returns the path for this schema","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"configurableKeys","description":"Get the configurable keys for the current SchemaFolder or Schema instance","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":41,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"defaults","description":"Get the defaults for the current SchemaFolder or Schema instance","readonly":true,"type":[[["Object"]]],"meta":{"line":53,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"paths","description":"Get the paths for the current SchemaFolder or Schema instance","readonly":true,"type":[[["Map","<"],["string",", ("],["SchemaFolder","|"],["SchemaPiece",")>"]]],"meta":{"line":63,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"}],"methods":[{"name":"add","description":"Adds a Folder or Piece instance to the current SchemaFolder or Schema instance","examples":["// callback is always passed the created folder to encourage chaining\nSchema.add('folder', (folder) => folder.add('piece', 'textchannel'));\n// or\nSchema.add('piece', 'string', { default: 'klasa!' });"],"params":[{"name":"key","description":"The name of this new piece you are trying to add.","type":[[["string"]]]},{"name":"typeOrCallback","description":"A function to add a folder or a string to add a new SchemaPiece","type":[[["string"]],[["function"]]]},{"name":"options","description":"An object of options used for SchemaPieces","optional":true,"type":[[["SchemaPieceOptions"]]]}],"returns":[[["this"]]],"meta":{"line":83,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"remove","description":"Remove a key from the schema","params":[{"name":"key","description":"The key to remove","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":133,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"get","description":"Get a SchemaPiece or a SchemaFolder given a path","params":[{"name":"key","description":"The key to get from the schema","type":[[["string"]],[["Array","<"],["string",">"]]]}],"returns":[[["SchemaPiece"]],[["SchemaFolder"]]],"meta":{"line":144,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"keys","description":"Returns a new Iterator object that contains the keys for each element contained in this folder.\nIdentical to [Map.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys)","params":[{"name":"recursive","description":"Whether the iteration should be recursive","default":false,"type":[[["boolean"]]]}],"yields":[[["string"]]],"generator":true,"meta":{"line":159,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"values","description":"Returns a new Iterator object that contains the values for each element contained in this folder.\nIdentical to [Map.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values)","params":[{"name":"recursive","description":"Whether the iteration should be recursive","default":false,"type":[[["boolean"]]]}],"yields":[[["SchemaFolder"]],[["SchemaPiece"]]],"generator":true,"meta":{"line":177,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"entries","description":"Returns a new Iterator object that contains the `[key, value]` pairs for each element contained in this folder.\nIdentical to [Map.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries)","params":[{"name":"recursive","description":"Whether the iteration should be recursive","default":false,"type":[[["boolean"]]]}],"yields":[[["Array","<("],["string","|"],["SchemaFolder","|"],["SchemaPiece",")>"]]],"generator":true,"meta":{"line":195,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"toJSON","description":"Get a JSON object containing data from this SchemaFolder","returns":[[["Object"]]],"meta":{"line":211,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"}],"meta":{"line":8,"file":"Schema.js","path":"src/lib/settings/schema"}},{"name":"SchemaFolder","description":"A Folder for organizing {@link SchemaPiece}s","extends":["Schema"],"construct":{"name":"SchemaFolder","params":[{"name":"parent","description":"The parent folder or schema for this folder instance","type":[[["SchemaFolder"]],[["Schema"]]]},{"name":"key","description":"The name of this folder instance","type":[[["string"]]]}]},"props":[{"name":"type","description":"The type of this SchemaFolder (always 'Folder')","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"parent","description":"The parent of this SchemaFolder","readonly":true,"type":[[["Schema"]],[["SchemaFolder"]]],"meta":{"line":17,"file":"SchemaFolder.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"key","description":"The name of this SchemaFolder","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"SchemaFolder.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"path","description":"Returns the path for this schema","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"configurableKeys","description":"Get the configurable keys for the current SchemaFolder or Schema instance","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":41,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"defaults","description":"Get the defaults for the current SchemaFolder or Schema instance","readonly":true,"type":[[["Object"]]],"meta":{"line":53,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"paths","description":"Get the paths for the current SchemaFolder or Schema instance","readonly":true,"type":[[["Map","<"],["string",", ("],["SchemaFolder","|"],["SchemaPiece",")>"]]],"meta":{"line":63,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"}],"methods":[{"name":"add","description":"Adds a Folder or Piece instance to the current SchemaFolder or Schema instance","inherits":"Schema#add","inherited":true,"examples":["// callback is always passed the created folder to encourage chaining\nSchema.add('folder', (folder) => folder.add('piece', 'textchannel'));\n// or\nSchema.add('piece', 'string', { default: 'klasa!' });"],"params":[{"name":"key","description":"The name of this new piece you are trying to add.","type":[[["string"]]]},{"name":"typeOrCallback","description":"A function to add a folder or a string to add a new SchemaPiece","type":[[["string"]],[["function"]]]},{"name":"options","description":"An object of options used for SchemaPieces","optional":true,"type":[[["SchemaPieceOptions"]]]}],"returns":[[["this"]]],"meta":{"line":83,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"remove","description":"Remove a key from the schema","inherits":"Schema#remove","inherited":true,"params":[{"name":"key","description":"The key to remove","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":133,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"get","description":"Get a SchemaPiece or a SchemaFolder given a path","inherits":"Schema#get","inherited":true,"params":[{"name":"key","description":"The key to get from the schema","type":[[["string"]],[["Array","<"],["string",">"]]]}],"returns":[[["SchemaPiece"]],[["SchemaFolder"]]],"meta":{"line":144,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"keys","description":"Returns a new Iterator object that contains the keys for each element contained in this folder.\nIdentical to [Map.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys)","inherits":"Schema#keys","inherited":true,"params":[{"name":"recursive","description":"Whether the iteration should be recursive","default":false,"type":[[["boolean"]]]}],"yields":[[["string"]]],"generator":true,"meta":{"line":159,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"values","description":"Returns a new Iterator object that contains the values for each element contained in this folder.\nIdentical to [Map.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values)","inherits":"Schema#values","inherited":true,"params":[{"name":"recursive","description":"Whether the iteration should be recursive","default":false,"type":[[["boolean"]]]}],"yields":[[["SchemaFolder"]],[["SchemaPiece"]]],"generator":true,"meta":{"line":177,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"entries","description":"Returns a new Iterator object that contains the `[key, value]` pairs for each element contained in this folder.\nIdentical to [Map.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries)","inherits":"Schema#entries","inherited":true,"params":[{"name":"recursive","description":"Whether the iteration should be recursive","default":false,"type":[[["boolean"]]]}],"yields":[[["Array","<("],["string","|"],["SchemaFolder","|"],["SchemaPiece",")>"]]],"generator":true,"meta":{"line":195,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"toJSON","description":"Get a JSON object containing data from this SchemaFolder","inherits":"Schema#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":211,"file":"Schema.js","path":"src/lib/settings/schema"},"since":"0.5.0"}],"meta":{"line":8,"file":"SchemaFolder.js","path":"src/lib/settings/schema"}},{"name":"SchemaPiece","construct":{"name":"SchemaPiece","description":"Creates our SchemaPiece instance","params":[{"name":"parent","description":"The parent folder or schema for this piece instance","type":[[["SchemaFolder"]],[["Schema"]]]},{"name":"key","description":"The name of this piece instance","type":[[["string"]]]},{"name":"type","description":"The type for this piece instance","type":[[["string"]]]},{"name":"options","description":"The options for this SchemaPiece instance","optional":true,"default":"{}","type":[[["SchemaPieceOptions"]]]}]},"props":[{"name":"Client","description":"The KlasaClient for this SchemaPiece","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":29,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"parent","description":"The parent of this SchemaPiece, either a SchemaFolder instance or Schema instance","readonly":true,"type":[[["SchemaFolder"]],[["Schema"]]],"meta":{"line":38,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"key","description":"The name of this SchemaPiece instance","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"path","description":"The path of this SchemaPiece instance","readonly":true,"type":[[["string"]]],"meta":{"line":56,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"type","description":"The type this SchemaPiece instance is for","type":[[["string"]]],"meta":{"line":70,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"array","description":"Whether or not this key should hold an array of data, or a single piece of data","type":[[["boolean"]]],"meta":{"line":77,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"default","description":"The default data this key will revert back to if reset, or if the key is never set","type":[["*"]],"meta":{"line":84,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"min","description":"The minimum value for this key.","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"max","description":"The maximum value for this key.","nullable":true,"type":[[["number"]]],"meta":{"line":98,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"configurable","description":"Whether this key should be configurable by the config command. When type is any, this key defaults to false.","type":[[["boolean"]]],"meta":{"line":105,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"filter","description":"The filter to use for this key when resolving.","type":[[["function"]]],"meta":{"line":112,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"serializer","description":"The serializer for this SchemaPiece","readonly":true,"type":[[["Serializer"]]],"meta":{"line":121,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"}],"methods":[{"name":"edit","description":"Edit this SchemaPiece's properties","params":[{"name":"options","description":"The options for this SchemaPiece","optional":true,"default":"{}","type":[[["SchemaPieceEditOptions"]]]}],"returns":[[["this"]]],"meta":{"line":131,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"isValid","description":"Checks whether or not this SchemaPiece is valid.","returns":[[["boolean"]]],"meta":{"line":151,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"parse","description":"Parses a value into a resolved format for Settings","params":[{"name":"value","description":"A value to parse","type":[["*"]]},{"name":"guild","description":"A guild to use during parsing.","optional":true,"type":[[["external:Guild"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":187,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"_generateDefault","description":"Generate a default value if none is given","access":"private","returns":[[["Array","<"],["*",">"]],[["false"]],[["null"]]],"meta":{"line":200,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"},{"name":"toJSON","description":"Get a JSON object containing data from this SchemaPiece","returns":[[["Object"]]],"meta":{"line":211,"file":"SchemaPiece.js","path":"src/lib/settings/schema"},"since":"0.5.0"}],"meta":{"line":28,"file":"SchemaPiece.js","path":"src/lib/settings/schema"}},{"name":"Settings","description":"<warning>Creating your own Settings instances is often discouraged and unneeded. SettingsGateway handles them internally for you.</warning>\nThe Settings class that stores the cache for each entry in SettingsGateway.","construct":{"name":"Settings","params":[{"name":"manager","description":"The Gateway that manages this Settings instance","type":[[["Gateway"]]]},{"name":"data","description":"The data that is cached in this Settings instance","type":[[["Object"]]]}]},"props":[{"name":"client","description":"The client this Settings was created with.","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":48,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"gateway","description":"The Gateway that manages this Settings instance.","readonly":true,"type":[[["Gateway"]]],"meta":{"line":57,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"id","description":"The ID that identifies this instance.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_existsInDB","description":"Whether this entry exists in the DB or not.","access":"private","nullable":true,"type":[[["boolean"]]],"meta":{"line":75,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"synchronizing","description":"Check whether this Settings is being synchronized in the Gateway's sync queue.","type":[[["boolean"]]],"meta":{"line":94,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"}],"methods":[{"name":"get","description":"Get a value from the configuration. Accepts nested objects separating by dot.","params":[{"name":"path","description":"The path of the key's value to get from this instance","type":[[["string"]],[["Array","<"],["string",">"]]]}],"returns":[["*"]],"meta":{"line":104,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"clone","description":"Clone this instance.","returns":[[["Settings"]]],"meta":{"line":120,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"sync","description":"Sync the data from the database with the cache.","params":[{"name":"force","description":"Whether the sync should download from the database","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["this",">"]]],"meta":{"line":130,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"destroy","description":"Delete this entry from the database and cache.","returns":[[["Promise","<"],["this",">"]]],"async":true,"meta":{"line":152,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"reset","description":"Reset a value from an entry.","examples":["// Reset all keys for this instance\nSettings#reset();\n\n// Reset multiple keys for this instance\nSettings#reset(['prefix', 'channels.modlog']);\n\n// Reset a key\nSettings#reset('prefix');"],"params":[{"name":"keys","description":"The key to reset","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"guild","description":"A KlasaGuild instance for multilingual support","optional":true,"type":[[["KlasaGuild"]]]},{"name":"options","description":"The options for the reset","optional":true,"default":"{}","type":[[["SettingsResetOptions"]]]}],"returns":[[["Promise","<"],["SettingsUpdateResult",">"]]],"async":true,"meta":{"line":177,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"update","description":"Update a value from an entry.","examples":["// Updating the value of a key\nSettings#update('roles.administrator', '339943234405007361', message.guild);\n\n// Updating an array:\nSettings#update('userBlacklist', '272689325521502208');\n\n// Ensuring the function call adds (error if it exists):\nSettings#update('userBlacklist', '272689325521502208', { action: 'add' });\n\n// Updating it with a json object:\nSettings#update({ roles: { administrator: '339943234405007361' } }, message.guild);\n\n// Updating multiple keys (with json object):\nSettings#update({ prefix: 'k!', language: 'es-ES' }, message.guild);\n\n// Updating multiple keys (with arrays):\nSettings#update([['prefix', 'k!'], ['language', 'es-ES']]);"],"params":[{"name":"key","description":"The key to modify","type":[[["string"]],[["Object"]]]},{"name":"value","description":"The value to parse and save","optional":true,"type":[["*"]]},{"name":"guild","description":"A guild resolvable","optional":true,"default":null,"type":[[["GuildResolvable"]]]},{"name":"options","description":"The options for the update","optional":true,"default":"{}","type":[[["SettingsUpdateOptions"]]]}],"returns":[[["Promise","<"],["SettingsUpdateResult",">"]]],"async":true,"meta":{"line":235,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"list","description":"Get a list.","params":[{"name":"message","description":"The Message instance","type":[[["KlasaMessage"]]]},{"name":"path","description":"The path to resolve","type":[[["Schema"]],[["string"]]]}],"returns":[[["string"]]],"meta":{"line":274,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"resolveString","description":"Resolve a string.","access":"private","params":[{"name":"message","description":"The Message to use","type":[[["KlasaMessage"]]]},{"name":"path","description":"The path to resolve","type":[[["SchemaPiece"]],[["string"]]]}],"returns":[[["string"]]],"meta":{"line":310,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_update","description":"Update this Settings instance","access":"private","params":[{"name":"entries","description":"The entries to update","type":[[["Array","<"],["Array","<"],["*",">>"]]]},{"name":"guild","description":"The KlasaGuild for context in SchemaPiece#parse","nullable":true,"type":[[["KlasaGuild"]]]},{"name":"options","description":"The parse options","type":[[["SettingsUpdateOptions"]]]}],"returns":[[["Promise","<"],["SettingsUpdateResult",">"]]],"async":true,"meta":{"line":327,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_parse","description":"Parse a value","access":"private","params":[{"name":"value","description":"The value to parse","type":[["*"]]},{"name":"guild","description":"The KlasaGuild for context in SchemaPiece#parse","nullable":true,"type":[[["KlasaGuild"]]]},{"name":"options","description":"The parse options","type":[[["SettingsUpdateOptions"]]]},{"name":"result","description":"The updated result","type":[[["SettingsUpdateResult"]]]},{"name":"path","description":"The path result","type":[[["GatewayGetPathResult"]]]}],"async":true,"meta":{"line":366,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_save","description":"Save the data to the database.","access":"private","params":[{"name":"result","description":"The data to save","type":[[["SettingsUpdateResult"]]]}],"async":true,"meta":{"line":387,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_parseArray","description":"Parse a single value for an array","access":"private","params":[{"name":"piece","description":"The SchemaPiece pointer that parses this entry","type":[[["SchemaPiece"]]]},{"name":"route","description":"The path bits for property accesses","type":[[["Array","<"],["string",">"]]]},{"name":"parsed","description":"The parsed value","type":[["*"]]},{"name":"options","description":"The parse options","type":[[["SettingsUpdateOptions"]]]},{"name":"result","description":"The updated result","type":[[["SettingsUpdateResult"]]]}],"meta":{"line":410,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_parseAll","description":"Parse all values from an array","access":"private","params":[{"name":"piece","description":"The SchemaPiece pointer that parses this entry","type":[[["SchemaPiece"]]]},{"name":"values","description":"The values to parse","type":[[["Array","<"],["*",">"]]]},{"name":"guild","description":"The KlasaGuild for context in SchemaPiece#parse","nullable":true,"type":[[["KlasaGuild"]]]},{"name":"errors","description":"The Errors array","type":[[["Array","<"],["Error",">"]]]}],"returns":[[["Promise","<"],["Array","<("],["number","|"],["string",")>>"]]],"async":true,"meta":{"line":452,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_setValueByPath","description":"Set a value by its path","access":"private","params":[{"name":"piece","description":"The piece that manages the key","type":[[["SchemaPiece"]]]},{"name":"parsedID","description":"The parsed ID value","type":[["*"]]},{"name":"force","description":"Whether this should skip the equality checks or not","type":[[["boolean"]]]}],"returns":[[["Object"]]],"meta":{"line":470,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"_patch","description":"Path this Settings instance.","access":"private","params":[{"name":"data","description":"The data to patch","type":[[["Object"]]]},{"name":"instance","description":"The reference of this instance for recursion","optional":true,"default":"this","type":[[["Object"]]]},{"name":"schema","description":"The Schema that sets the schema for this configuration's gateway","optional":true,"default":"this.gateway.schema","type":[[["Schema"]]]}],"meta":{"line":492,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toJSON","description":"Returns the JSON-compatible object of this instance.","returns":[[["SettingsJSON"]]],"meta":{"line":508,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"},{"name":"toString","description":"Returns a better string when an instance of this class gets stringified.","returns":[[["string"]]],"meta":{"line":517,"file":"Settings.js","path":"src/lib/settings"},"since":"0.5.0"}],"meta":{"line":9,"file":"Settings.js","path":"src/lib/settings"}},{"name":"Argument","description":"Base class for all Klasa Arguments. See {@tutorial CreatingArguments} for more information how to use this class\nto build custom arguments.","extends":["AliasPiece"],"props":[{"name":"aliases","description":"The aliases for this piece","type":[[["Array","<"],["string",">"]]],"meta":{"line":32,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"regex","description":"Standard regular expressions for matching mentions and snowflake ids","scope":"static","type":[[["Object"]]],"props":[{"name":"userOrMember","description":"Regex for users or members","type":[[["RegExp"]]]},{"name":"channel","description":"Regex for channels","type":[[["RegExp"]]]},{"name":"emoji","description":"Regex for custom emojis","type":[[["RegExp"]]]},{"name":"role","description":"Regex for roles","type":[[["RegExp"]]]},{"name":"snowflake","description":"Regex for simple snowflake ids","type":[[["RegExp"]]]}],"meta":{"line":67,"file":"Argument.js","path":"src/lib/structures"},"since":"0.5.0"}],"methods":[{"name":"run","description":"The run method to be overwritten in actual Arguments","abstract":true,"params":[{"name":"argument","description":"The string argument string to resolve","type":[[["string"]]]},{"name":"possible","description":"This current usage possible","type":[[["Possible"]]]},{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]}],"async":true,"meta":{"line":20,"file":"Argument.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this argument.","inherits":"AliasPiece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":40,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"minOrMax","description":"Checks min and max values","scope":"static","access":"private","params":[{"name":"client","description":"The client of this bot","type":[[["KlasaClient"]]]},{"name":"value","description":"The value to check against","type":[[["number"]]]},{"name":"min","description":"The minimum value","default":null,"nullable":true,"type":[[["number"]]]},{"name":"max","description":"The maximum value","default":null,"nullable":true,"type":[[["number"]]]},{"name":"possible","description":"The id of the current possible usage","type":[[["Possible"]]]},{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]},{"name":"suffix","description":"An error suffix","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":38,"file":"Argument.js","path":"src/lib/structures"},"since":"0.5.0"}],"meta":{"line":10,"file":"Argument.js","path":"src/lib/structures"}},{"name":"ArgumentStore","description":"Stores all the arguments usable in Klasa","extends":["AliasStore"],"construct":{"name":"ArgumentStore","description":"Constructs our ArgumentStore for use in Klasa","params":[{"name":"client","description":"The Klasa Client","type":[[["KlasaClient"]]]}]},"props":[{"name":"aliases","description":"The different aliases that represent the arguments in this store.","type":[[["external:Collection"]]],"meta":{"line":21,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"get","description":"Returns an argument in the store if it exists by its name or by an alias.","inherits":"AliasStore#get","inherited":true,"params":[{"name":"name","description":"A argument or alias name","type":[[["string"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":30,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"has","description":"Returns a boolean if the argument or alias is found within the store.","inherits":"AliasStore#has","inherited":true,"params":[{"name":"name","description":"A command or alias name","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":40,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"set","description":"Sets up an argument in our store.","inherits":"AliasStore#set","inherited":true,"params":[{"name":"piece","description":"The command piece we are setting up","type":[[["Argument"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":50,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"delete","description":"Deletes an argument from the store.","inherits":"AliasStore#delete","inherited":true,"params":[{"name":"name","description":"An argument object or a string representing an argument or alias name","type":[[["Argument"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":63,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"clear","description":"Clears the arguments and aliases from this store","inherits":"AliasStore#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":75,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"meta":{"line":8,"file":"ArgumentStore.js","path":"src/lib/structures"}},{"name":"AliasPiece","description":"The common class for all pieces with aliases","see":["Command","Argument","Serializer"],"construct":{"name":"AliasPiece","params":[{"name":"client","description":"The klasa client","type":[[["KlasaClient"]]]},{"name":"store","description":"The store this piece is for","type":[[["Store"]]]},{"name":"file","description":"The path from the pieces folder to the extendable file","type":[[["Array","<"],["string",">"]]]},{"name":"directory","description":"The base directory to the pieces folder","type":[[["string"]]]},{"name":"options","description":"The options for this piece","optional":true,"default":"{}","type":[[["AliasPieceOptions"]]]}]},"props":[{"name":"aliases","description":"The aliases for this piece","type":[[["Array","<"],["string",">"]]],"meta":{"line":32,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"toJSON","description":"Defines the JSON.stringify behavior of this argument.","returns":[[["Object"]]],"meta":{"line":40,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"meta":{"line":9,"file":"AliasPiece.js","path":"src/lib/structures/base"}},{"name":"AliasStore","description":"The common base for all stores with aliases","see":["CommandStore","ArgumentStore","SerializerStore"],"extends":["Store"],"props":[{"name":"aliases","description":"The different aliases that represent the arguments in this store.","type":[[["external:Collection"]]],"meta":{"line":21,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"get","description":"Returns an argument in the store if it exists by its name or by an alias.","params":[{"name":"name","description":"A argument or alias name","type":[[["string"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":30,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"has","description":"Returns a boolean if the argument or alias is found within the store.","params":[{"name":"name","description":"A command or alias name","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":40,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"set","description":"Sets up an argument in our store.","params":[{"name":"piece","description":"The command piece we are setting up","type":[[["Argument"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":50,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"delete","description":"Deletes an argument from the store.","params":[{"name":"name","description":"An argument object or a string representing an argument or alias name","type":[[["Argument"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":63,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"clear","description":"Clears the arguments and aliases from this store","returns":[[["void"]]],"meta":{"line":75,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":11,"file":"AliasStore.js","path":"src/lib/structures/base"}},{"name":"Piece","description":"The common class for all pieces","see":["Argument","Command","Event","Extendable","Finalizer","Inhibitor","Language","Monitor","Provider","SqlProvider","Serializer","Task"],"construct":{"name":"Piece","params":[{"name":"client","description":"The klasa client","type":[[["KlasaClient"]]]},{"name":"store","description":"The store this piece is for","type":[[["Store"]]]},{"name":"file","description":"The path from the pieces folder to the extendable file","type":[[["Array","<"],["string",">"]]]},{"name":"directory","description":"The base directory to the pieces folder","type":[[["string"]]]},{"name":"options","description":"The options for this piece","optional":true,"default":"{}","type":[[["PieceOptions"]]]}]},"props":[{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"reload","description":"Reloads this piece","returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","abstract":true,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this task.","returns":[[["Object"]]],"meta":{"line":172,"file":"Piece.js","path":"src/lib/structures/base"}}],"meta":{"line":19,"file":"Piece.js","path":"src/lib/structures/base"}},{"name":"Store","description":"The common base for all stores","see":["ArgumentStore","CommandStore","EventStore","ExtendableStore","FinalizerStore","InhibitorStore","LanguageStore","MonitorStore","ProviderStore","SerializerStore","TaskStore"],"extends":["external:Collection"],"props":[{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"set","description":"Sets up a piece in our store.","params":[{"name":"piece","description":"The piece we are setting up","type":[[["Piece"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":137,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"delete","description":"Deletes a command from the store.","params":[{"name":"name","description":"A command object or a string representing a command or alias name","type":[[["Piece"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":152,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"walk","description":"Walks our directory of Pieces for the user and core directories.","scope":"static","access":"private","params":[{"name":"store","description":"The store we're loading into","type":[[["Store"]]]},{"name":"directory","description":"The directory to walk in","optional":true,"default":"store.userDirectory","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["Piece",">>"]]],"async":true,"meta":{"line":187,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"meta":{"line":21,"file":"Store.js","path":"src/lib/structures/base"}},{"name":"Command","description":"Base class for all Klasa Commands. See {@tutorial CreatingCommands} for more information how to use this class\nto build custom commands.","extends":["AliasPiece"],"construct":{"name":"Command","params":[{"name":"client","description":"The Klasa Client","type":[[["KlasaClient"]]]},{"name":"store","description":"The Command store","type":[[["CommandStore"]]]},{"name":"file","description":"The path from the pieces folder to the command file","type":[[["Array"]]]},{"name":"directory","description":"The base directory to the pieces folder","type":[[["string"]]]},{"name":"options","description":"Optional Command settings","optional":true,"default":"{}","type":[[["CommandOptions"]]]}]},"props":[{"name":"requiredPermissions","description":"The required bot permissions to run this command","type":[[["external:Permissions"]]],"meta":{"line":68,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"deletable","description":"Whether this command should have it's responses deleted if the triggering message is deleted","type":[[["boolean"]]],"meta":{"line":76,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"description","description":"The description of the command","type":[[["string"]],[["function"]]],"meta":{"line":85,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"extendedHelp","description":"The extended help for the command","type":[[["string"]],[["function"]]],"meta":{"line":96,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"fullCategory","description":"The full category for the command","type":[[["Array","<"],["string",">"]]],"meta":{"line":105,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"guarded","description":"Whether this command should not be able to be disabled in a guild or not","type":[[["boolean"]]],"meta":{"line":112,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"hidden","description":"Whether this command is hidden or not","type":[[["boolean"]]],"meta":{"line":119,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"nsfw","description":"Whether this command should only run in NSFW channels or not","type":[[["boolean"]]],"meta":{"line":126,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"permissionLevel","description":"The required permissionLevel to run this command","type":[[["number"]]],"meta":{"line":133,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"promptLimit","description":"The number or attempts allowed for re-prompting an argument","type":[[["number"]]],"meta":{"line":140,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"promptTime","description":"The time allowed for re-prompting of this command","type":[[["number"]]],"meta":{"line":147,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"quotedStringSupport","description":"Whether to use quoted string support for this command or not","type":[[["boolean"]]],"meta":{"line":154,"file":"Command.js","path":"src/lib/structures"},"since":"0.2.1"},{"name":"requiredSettings","description":"The required per guild settings to run this command","type":[[["Array","<"],["string",">"]]],"meta":{"line":161,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"runIn","description":"What channels the command should run in","type":[[["Array","<"],["string",">"]]],"meta":{"line":168,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"subcommands","description":"Whether to enable subcommands or not","type":[[["boolean"]]],"meta":{"line":175,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"usage","description":"The parsed usage for the command","type":[[["CommandUsage"]]],"meta":{"line":182,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"cooldownLevel","description":"The level at which cooldowns should apply","type":[[["string"]]],"meta":{"line":189,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"cooldowns","description":"Any active cooldowns for the command","access":"private","type":[[["RateLimitManager"]]],"meta":{"line":199,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"bucket","description":"The number of times this command can be run before ratelimited by the cooldown","readonly":true,"type":[[["number"]]],"meta":{"line":208,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"cooldown","description":"The cooldown in seconds this command has","readonly":true,"type":[[["number"]]],"meta":{"line":217,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"category","description":"The main category for the command","readonly":true,"type":[[["string"]]],"meta":{"line":227,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"subCategory","description":"The sub category for the command","readonly":true,"type":[[["string"]]],"meta":{"line":237,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"usageDelim","description":"The usage deliminator for the command input","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":247,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"usageString","description":"The usage string for the command","readonly":true,"type":[[["string"]]],"meta":{"line":257,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"aliases","description":"The aliases for this piece","type":[[["Array","<"],["string",">"]]],"meta":{"line":32,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"definePrompt","description":"Creates a Usage to run custom prompts off of","params":[{"name":"usageString","description":"The string designating all parameters expected","type":[[["string"]]]},{"name":"usageDelim","description":"The string to delimit the input","type":[[["string"]]]}],"returns":[[["Usage"]]],"meta":{"line":267,"file":"Command.js","path":"src/lib/structures"}},{"name":"createCustomResolver","description":"Registers a one-off custom resolver. See tutorial {@link CommandsCustomResolvers}","params":[{"name":"type","description":"The type of the usage argument","type":[[["string"]]]},{"name":"resolver","description":"The one-off custom resolver","type":[[["function"]]]}],"returns":[[["this"]]],"meta":{"line":279,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"customizeResponse","description":"Customizes the response of an argument if it fails resolution. See tutorial {@link CommandsCustomResponses}","examples":["// Changing the message for a parameter called 'targetUser'\nthis.customizeResponse('targetUser', 'You did not give me a user...');\n\n// Or also using functions to have multilingual support:\nthis.customizeResponse('targetUser', (message) =>\n    message.language.get('COMMAND_REQUIRED_USER_FRIENDLY'));"],"params":[{"name":"name","description":"The name of the usage argument","type":[[["string"]]]},{"name":"response","description":"The custom response or i18n function","type":[[["string"]],[["function"]]]}],"returns":[[["this"]]],"meta":{"line":299,"file":"Command.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"run","description":"The run method to be overwritten in actual commands","abstract":true,"params":[{"name":"message","description":"The command message mapped on top of the message used to trigger this command","type":[[["KlasaMessage"]]]},{"name":"params","description":"The fully resolved parameters based on your usage / usageDelim","type":[[["Array","<"],["any",">"]]]}],"returns":{"types":[[["Promise","<"],["KlasaMessage",">"]],[["Promise","<"],["Array","<"],["KlasaMessage",">>"]]],"description":"You should return the response message whenever possible"},"async":true,"meta":{"line":312,"file":"Command.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this command.","returns":[[["Object"]]],"meta":{"line":321,"file":"Command.js","path":"src/lib/structures"}}],"meta":{"line":14,"file":"Command.js","path":"src/lib/structures"}},{"name":"CommandStore","description":"Stores all the commands usable in Klasa","extends":["AliasStore"],"construct":{"name":"CommandStore","description":"Constructs our CommandStore for use in Klasa","params":[{"name":"client","description":"The Klasa Client","type":[[["KlasaClient"]]]}]},"props":[{"name":"aliases","description":"The different aliases that represent the arguments in this store.","type":[[["external:Collection"]]],"meta":{"line":21,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"get","description":"Returns an argument in the store if it exists by its name or by an alias.","inherits":"AliasStore#get","inherited":true,"params":[{"name":"name","description":"A argument or alias name","type":[[["string"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":30,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"has","description":"Returns a boolean if the argument or alias is found within the store.","inherits":"AliasStore#has","inherited":true,"params":[{"name":"name","description":"A command or alias name","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":40,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"set","description":"Sets up an argument in our store.","inherits":"AliasStore#set","inherited":true,"params":[{"name":"piece","description":"The command piece we are setting up","type":[[["Argument"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":50,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"delete","description":"Deletes an argument from the store.","inherits":"AliasStore#delete","inherited":true,"params":[{"name":"name","description":"An argument object or a string representing an argument or alias name","type":[[["Argument"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":63,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"clear","description":"Clears the arguments and aliases from this store","inherits":"AliasStore#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":75,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"meta":{"line":8,"file":"CommandStore.js","path":"src/lib/structures"}},{"name":"Event","description":"Base class for all Klasa Events. See {@tutorial CreatingEvents} for more information how to use this class\nto build custom events.","extends":["Piece"],"construct":{"name":"Event","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]},{"name":"store","description":"The Event Store","type":[[["EventStore"]]]},{"name":"file","description":"The path from the pieces folder to the event file","type":[[["string"]]]},{"name":"directory","description":"The base directory to the pieces folder","type":[[["string"]]]},{"name":"options","description":"Optional Event settings","optional":true,"default":"{}","type":[[["EventOptions"]]]}]},"props":[{"name":"once","description":"If this event should only be run once and then unloaded","type":[[["boolean"]]],"meta":{"line":34,"file":"Event.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"emitter","description":"The emitter this event is for","type":[[["EventEmitter"]]],"meta":{"line":41,"file":"Event.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"event","description":"The event to listen for","type":[[["string"]]],"meta":{"line":48,"file":"Event.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"_listener","description":"Stored bound on method, so it can be properly unlistened to later","access":"private","type":[[["function"]]],"meta":{"line":56,"file":"Event.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"run","description":"The run method to be overwritten in actual event handlers","abstract":true,"params":[{"name":"param","description":"The event parameters emitted","type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":66,"file":"Event.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"disable","description":"Disables this Event","returns":[[["this"]]],"meta":{"line":77,"file":"Event.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"enable","description":"Enables this Event","returns":[[["this"]]],"meta":{"line":88,"file":"Event.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"_run","description":"A wrapper for the run method, to easily disable/enable events","access":"private","params":[{"name":"param","description":"The event parameters emitted","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":100,"file":"Event.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"_runOnce","description":"A wrapper for the _run method for once handling","access":"private","params":[{"name":"param","description":"The event parameters emitted","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":115,"file":"Event.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"_listen","description":"Attaches the proper listener to the emitter","access":"private","returns":[[["void"]]],"meta":{"line":127,"file":"Event.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"_unlisten","description":"Removes the listener from the emitter","access":"private","returns":[[["void"]]],"meta":{"line":137,"file":"Event.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this extendable.","returns":[[["Object"]]],"meta":{"line":145,"file":"Event.js","path":"src/lib/structures"}},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","inherits":"Piece#init","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":9,"file":"Event.js","path":"src/lib/structures"}},{"name":"EventStore","description":"Stores all the events that a part of Klasa","extends":["Store"],"construct":{"name":"EventStore","description":"Constructs our EventStore for use in Klasa","params":[{"name":"client","description":"The klasa client initializing this store.","type":[[["KlasaClient"]]]}]},"props":[{"name":"_onceEvents","description":"Once events that have already run (so once means once)","access":"private","type":[[["Set","<"],["string",">"]]],"meta":{"line":24,"file":"EventStore.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","params":[{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"core","description":"If the file is located in the core directory or not","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":34,"file":"EventStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"clear","description":"Clears the events from the store and removes the listeners.","returns":[[["void"]]],"meta":{"line":44,"file":"EventStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"delete","description":"Deletes an event from the store.","params":[{"name":"name","description":"An event object or a string representing the event name.","type":[[["Event"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":54,"file":"EventStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"set","description":"Sets up an event in our store.","params":[{"name":"piece","description":"The event piece we are setting up","type":[[["Event"]]]}],"returns":{"types":[[["Event"]]],"nullable":true},"meta":{"line":67,"file":"EventStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"EventStore.js","path":"src/lib/structures"}},{"name":"Extendable","description":"Base class for all Klasa Extendables. See {@tutorial CreatingExtendables} for more information how to use this class\nto build custom extendables.","extends":["Piece"],"construct":{"name":"Extendable","params":[{"name":"client","description":"The klasa client","type":[[["KlasaClient"]]]},{"name":"store","description":"The extendable store","type":[[["ExtendableStore"]]]},{"name":"file","description":"The path from the pieces folder to the extendable file","type":[[["Array","<"],["string",">"]]]},{"name":"directory","description":"The base directory to the pieces folder","type":[[["string"]]]},{"name":"options","description":"The options for this extendable","optional":true,"default":"{}","type":[[["ExtendableOptions"]]]}]},"props":[{"name":"staticPropertyDescriptors","description":"The static property descriptors of this extendable","access":"private","type":[[["any"]]],"meta":{"line":45,"file":"Extendable.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"instancePropertyDescriptors","description":"The instance property descriptors of this extendable","access":"private","type":[[["any"]]],"meta":{"line":54,"file":"Extendable.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"originals","description":"The original property descriptors for each of the original classes","access":"private","type":[[["Map","<"],["any",", "],["OriginalPropertyDescriptors",">"]]],"meta":{"line":63,"file":"Extendable.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"appliesTo","description":"The discord classes this extendable applies to","readonly":true,"type":[[["Array","<"],["any",">"]]],"meta":{"line":77,"file":"Extendable.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"init","description":"The init method to apply the extend method to the Discord.js Class","returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":86,"file":"Extendable.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","returns":[[["this"]]],"meta":{"line":96,"file":"Extendable.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","params":[{"name":"init","description":"If the piece is being init or not","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":113,"file":"Extendable.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this extendable.","returns":[[["Object"]]],"meta":{"line":127,"file":"Extendable.js","path":"src/lib/structures"}},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":9,"file":"Extendable.js","path":"src/lib/structures"}},{"name":"ExtendableStore","description":"Stores all of our extendables that extend Discord.js and Klasa structures","extends":["Store"],"construct":{"name":"ExtendableStore","description":"Constructs our ExtendableStore for use in Klasa","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]}]},"props":[{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"delete","description":"Deletes an extendable from the store.","params":[{"name":"name","description":"A extendable object or a string representing a command or alias name","type":[[["Extendable"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"ExtendableStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"clear","description":"Clears the extendable from the store and removes the extensions.","meta":{"line":36,"file":"ExtendableStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"set","description":"Sets up an extendable in our store.","params":[{"name":"piece","description":"The extendable piece we are setting up","type":[[["Extendable"]]]}],"returns":{"types":[[["Extendable"]]],"nullable":true},"meta":{"line":46,"file":"ExtendableStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"ExtendableStore.js","path":"src/lib/structures"}},{"name":"Finalizer","description":"Base class for all Klasa Finalizers. See {@tutorial CreatingFinalizers} for more information how to use this class\nto build custom finalizers.","extends":["Piece"],"props":[{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"_run","description":"Run a finalizer and catch any uncaught promises","access":"private","params":[{"name":"message","description":"The message that called the command","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command this finalizer is for (may be different than message.command)","type":[[["Command"]]]},{"name":"response","description":"The bot's response message, if one is returned","type":[[["KlasaMessage"]],[["Array","<"],["KlasaMessage",">"]]]},{"name":"runTime","description":"The time it took to generate the command","type":[[["Stopwatch"]]]}],"async":true,"meta":{"line":20,"file":"Finalizer.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"run","description":"The run method to be overwritten in actual finalizers","abstract":true,"params":[{"name":"message","description":"The message used to trigger this finalizer","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command this finalizer is for (may be different than message.command)","type":[[["Command"]]]},{"name":"response","description":"The bot's response message, if one is returned","type":[[["KlasaMessage"]],[["Array","<"],["KlasaMessage",">"]]]},{"name":"runTime","description":"The time it took to generate the command","type":[[["Stopwatch"]]]}],"returns":[[["void"]]],"meta":{"line":38,"file":"Finalizer.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","inherits":"Piece#disable","inherited":true,"returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","inherits":"Piece#enable","inherited":true,"returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","inherits":"Piece#init","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this task.","inherits":"Piece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":172,"file":"Piece.js","path":"src/lib/structures/base"}}],"meta":{"line":9,"file":"Finalizer.js","path":"src/lib/structures"}},{"name":"FinalizerStore","description":"Stores all finalizers for use in Klasa.","extends":["Store"],"construct":{"name":"FinalizerStore","description":"Constructs our FinalizerStore for use in Klasa","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]}]},"props":[{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"run","description":"Runs all of our finalizers after a command is ran successfully.","params":[{"name":"message","description":"The message that called the command","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command this finalizer is for (may be different than message.command)","type":[[["Command"]]]},{"name":"response","description":"The response of the command","type":[[["KlasaMessage"]],[["any"]]]},{"name":"timer","description":"The timer run from start to queue of the command","type":[[["StopWatch"]]]}],"returns":[[["void"]]],"meta":{"line":28,"file":"FinalizerStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"set","description":"Sets up a piece in our store.","inherits":"Store#set","inherited":true,"params":[{"name":"piece","description":"The piece we are setting up","type":[[["Piece"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":137,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"delete","description":"Deletes a command from the store.","inherits":"Store#delete","inherited":true,"params":[{"name":"name","description":"A command object or a string representing a command or alias name","type":[[["Piece"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":152,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"FinalizerStore.js","path":"src/lib/structures"}},{"name":"Inhibitor","description":"Base class for all Klasa Inhibitors. See {@tutorial CreatingInhibitors} for more information how to use this class\nto build custom inhibitors.","extends":["Piece"],"construct":{"name":"Inhibitor","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]},{"name":"store","description":"The Inhibitor Store","type":[[["InhibitorStore"]]]},{"name":"file","description":"The path from the pieces folder to the inhibitor file","type":[[["string"]]]},{"name":"directory","description":"The base directory to the pieces folder","type":[[["string"]]]},{"name":"options","description":"Optional Inhibitor settings","optional":true,"default":"{}","type":[[["InhibitorOptions"]]]}]},"props":[{"name":"spamProtection","description":"If this inhibitor is meant for spamProtection (disables the inhibitor while generating help)","type":[[["boolean"]]],"meta":{"line":32,"file":"Inhibitor.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"_run","description":"The async wrapper for running inhibitors","access":"private","params":[{"name":"message","description":"The message that triggered this inhibitor","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command to run","type":[[["Command"]]]}],"returns":[[["Promise","<"],["void",">"]],[["Promise","<"],["string",">"]]],"async":true,"meta":{"line":43,"file":"Inhibitor.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"run","description":"The run method to be overwritten in actual inhibitors","abstract":true,"params":[{"name":"message","description":"The message that triggered this inhibitor","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command to run","type":[[["Command"]]]}],"returns":[[["Promise","<"],["void",">"]],[["Promise","<"],["string",">"]]],"async":true,"meta":{"line":59,"file":"Inhibitor.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this inhibitor.","returns":[[["Object"]]],"meta":{"line":68,"file":"Inhibitor.js","path":"src/lib/structures"}},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","inherits":"Piece#disable","inherited":true,"returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","inherits":"Piece#enable","inherited":true,"returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","inherits":"Piece#init","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":9,"file":"Inhibitor.js","path":"src/lib/structures"}},{"name":"InhibitorStore","description":"Stores all the inhibitors in Klasa","extends":["Store"],"construct":{"name":"InhibitorStore","description":"Constructs our InhibitorStore for use in Klasa","params":[{"name":"client","description":"The Klasa Client","type":[[["KlasaClient"]]]}]},"props":[{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"run","description":"Runs our inhibitors on the command.","params":[{"name":"message","description":"The message object from Discord.js","type":[[["KlasaMessage"]]]},{"name":"command","description":"The command being ran.","type":[[["Command"]]]},{"name":"selective","description":"Whether or not we should ignore certain inhibitors to prevent spam.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":27,"file":"InhibitorStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"set","description":"Sets up a piece in our store.","inherits":"Store#set","inherited":true,"params":[{"name":"piece","description":"The piece we are setting up","type":[[["Piece"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":137,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"delete","description":"Deletes a command from the store.","inherits":"Store#delete","inherited":true,"params":[{"name":"name","description":"A command object or a string representing a command or alias name","type":[[["Piece"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":152,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"InhibitorStore.js","path":"src/lib/structures"}},{"name":"Language","description":"Base class for all Klasa Languages. See {@tutorial CreatingLanguages} for more information how to use this class\nto build custom languages.","extends":["Piece"],"props":[{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"get","description":"The method to get language strings","params":[{"name":"term","description":"The string or function to look up","type":[[["string"]]]},{"name":"args","description":"Any arguments to pass to the lookup","variable":true,"type":[["*"]]}],"returns":[[["string"]],[["function"]]],"meta":{"line":21,"file":"Language.js","path":"src/lib/structures"},"since":"0.2.1"},{"name":"init","description":"The init method to be optionally overwritten in actual languages","abstract":true,"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":41,"file":"Language.js","path":"src/lib/structures"},"since":"0.2.1"},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","inherits":"Piece#disable","inherited":true,"returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","inherits":"Piece#enable","inherited":true,"returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this task.","inherits":"Piece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":172,"file":"Piece.js","path":"src/lib/structures/base"}}],"meta":{"line":12,"file":"Language.js","path":"src/lib/structures"}},{"name":"LanguageStore","description":"Stores all languages for use in Klasa","extends":["Store"],"construct":{"name":"LanguageStore","description":"Constructs our LanguageStore for use in Klasa","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]}]},"props":[{"name":"default","description":"The default language set in {@link KlasaClientOptions.language}","readonly":true,"nullable":true,"type":[[["Language"]]],"meta":{"line":25,"file":"LanguageStore.js","path":"src/lib/structures"},"since":"0.2.1"},{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"set","description":"Sets up a piece in our store.","inherits":"Store#set","inherited":true,"params":[{"name":"piece","description":"The piece we are setting up","type":[[["Piece"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":137,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"delete","description":"Deletes a command from the store.","inherits":"Store#delete","inherited":true,"params":[{"name":"name","description":"A command object or a string representing a command or alias name","type":[[["Piece"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":152,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"LanguageStore.js","path":"src/lib/structures"}},{"name":"Monitor","description":"Base class for all Klasa Monitors. See {@tutorial CreatingMonitors} for more information how to use this class\nto build custom monitors.","extends":["Piece"],"construct":{"name":"Monitor","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]},{"name":"store","description":"The Monitor Store","type":[[["MonitorStore"]]]},{"name":"file","description":"The path from the pieces folder to the monitor file","type":[[["string"]]]},{"name":"directory","description":"The base directory to the pieces folder","type":[[["string"]]]},{"name":"options","description":"Optional Monitor settings","optional":true,"default":"{}","type":[[["MonitorOptions"]]]}]},"props":[{"name":"ignoreBots","description":"Whether the monitor ignores bots or not","type":[[["boolean"]]],"meta":{"line":38,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"ignoreSelf","description":"Whether the monitor ignores itself or not","type":[[["boolean"]]],"meta":{"line":45,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"ignoreOthers","description":"Whether the monitor ignores others or not","type":[[["boolean"]]],"meta":{"line":52,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.4.0"},{"name":"ignoreWebhooks","description":"Whether the monitor ignores webhooks or not","type":[[["boolean"]]],"meta":{"line":59,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"ignoreEdits","description":"Whether the monitor ignores edits or not","type":[[["boolean"]]],"meta":{"line":66,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"ignoreBlacklistedUsers","description":"Wether the monitor should ignore blacklisted users","type":[[["boolean"]]],"meta":{"line":73,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"ignoreBlacklistedGuilds","description":"Wether the monitor should ignore blacklisted guilds","type":[[["boolean"]]],"meta":{"line":80,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"_run","description":"Run a monitor and catch any uncaught promises","access":"private","params":[{"name":"message","description":"The message object from Discord.js","type":[[["KlasaMessage"]]]}],"async":true,"meta":{"line":89,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"run","description":"The run method to be overwritten in actual monitor pieces","abstract":true,"params":[{"name":"message","description":"The discord message","type":[[["KlasaMessage"]]]}],"returns":[[["void"]]],"meta":{"line":104,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"shouldRun","description":"If the monitor should run based on the filter options","params":[{"name":"message","description":"The message to check","type":[[["KlasaMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":115,"file":"Monitor.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this monitor.","returns":[[["Object"]]],"meta":{"line":130,"file":"Monitor.js","path":"src/lib/structures"}},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","inherits":"Piece#disable","inherited":true,"returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","inherits":"Piece#enable","inherited":true,"returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","inherits":"Piece#init","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":9,"file":"Monitor.js","path":"src/lib/structures"}},{"name":"MonitorStore","description":"Stores all monitors for use in Klasa","extends":["Store"],"construct":{"name":"MonitorStore","description":"Constructs our MonitorStore for use in Klasa","params":[{"name":"client","description":"The Klasa Client","type":[[["KlasaClient"]]]}]},"props":[{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"run","description":"Runs our monitors on the message.","params":[{"name":"message","description":"The message object from Discord.js","type":[[["KlasaMessage"]]]}],"meta":{"line":24,"file":"MonitorStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"set","description":"Sets up a piece in our store.","inherits":"Store#set","inherited":true,"params":[{"name":"piece","description":"The piece we are setting up","type":[[["Piece"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":137,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"delete","description":"Deletes a command from the store.","inherits":"Store#delete","inherited":true,"params":[{"name":"name","description":"A command object or a string representing a command or alias name","type":[[["Piece"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":152,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"MonitorStore.js","path":"src/lib/structures"}},{"name":"MultiArgument","description":"Base Abstracted class for Multi-Resolving D.JS and Klasa Structures.","extends":["Argument"],"props":[{"name":"base","description":"A getter for the base argument","readonly":true,"abstract":true,"type":[[["Argument"]]],"meta":{"line":16,"file":"MultiArgument.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"aliases","description":"The aliases for this piece","type":[[["Array","<"],["string",">"]]],"meta":{"line":32,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"run","description":"The run method for handling MultiArguments (not to be implemented in extended classes)","params":[{"name":"argument","description":"The string argument string to resolve","type":[[["string"]]]},{"name":"possible","description":"This current usage possible","type":[[["Possible"]]]},{"name":"message","description":"The message that triggered the command","type":[[["KlasaMessage"]]]}],"async":true,"meta":{"line":27,"file":"MultiArgument.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this argument.","inherits":"AliasPiece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":40,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"meta":{"line":7,"file":"MultiArgument.js","path":"src/lib/structures"}},{"name":"Provider","description":"Base class for all Klasa Providers. See {@tutorial CreatingProviders} for more information how to use this class\nto build custom providers.","extends":["Piece"],"props":[{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"createTable","description":"Inserts or creates a table in the database.","abstract":true,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":19,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"deleteTable","description":"Deletes or drops a table from the database.","abstract":true,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":30,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"hasTable","description":"Checks if a table exists in the database.","abstract":true,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"async":true,"meta":{"line":41,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"create","description":"Inserts new entries into a table.","abstract":true,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to create","type":[[["string"]]]},{"name":"data","description":"The data to insert","type":[[["ProviderResolvable"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":54,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"delete","description":"Removes entries from a table.","abstract":true,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The ID of the entry to delete","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":66,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"get","description":"Retrieve a single entry from a table.","abstract":true,"params":[{"name":"table","description":"The table to query","type":[[["string"]]]},{"name":"entryID","description":"The ID of the entry to retrieve","type":[[["string"]]]}],"returns":[[["Promise","<"],["Object","<"],["string",", "],["*",">>"]]],"async":true,"meta":{"line":78,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"getAll","description":"Retrieve all entries from a table.","abstract":true,"params":[{"name":"table","description":"The table to query","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["Object","<"],["string",", "],["*",">>>"]]],"async":true,"meta":{"line":89,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"getKeys","description":"Retrieves all entries' keys from a table.","abstract":true,"params":[{"name":"table","description":"The table to query","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["string",">>"]]],"async":true,"meta":{"line":100,"file":"Provider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"has","description":"Check if an entry exists in a table.","abstract":true,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"async":true,"meta":{"line":112,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"replace","description":"Overwrites the data from an entry in a table.","abstract":true,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to update","type":[[["string"]]]},{"name":"data","description":"The new data for the entry","type":[[["ProviderResolvable"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":125,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"update","description":"Updates an entry from a table.","abstract":true,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to update","type":[[["string"]]]},{"name":"data","description":"The data to update","type":[[["ProviderResolvable"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":138,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"shutdown","description":"The shutdown method to be optionally overwritten in actual provider pieces.","abstract":true,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":148,"file":"Provider.js","path":"src/lib/structures"},"since":"0.3.0"},{"name":"parseUpdateInput","description":"Parse the gateway input for easier operation","access":"protected","params":[{"name":"updated","description":"The updated entries","type":[[["Object","<"],["string",", "],["*",">"]],[["Array","<"],["SettingsUpdateResult",">"]]]}],"returns":[[["Object","<"],["string",", "],["*",">"]]],"meta":{"line":176,"file":"Provider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","inherits":"Piece#disable","inherited":true,"returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","inherits":"Piece#enable","inherited":true,"returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","inherits":"Piece#init","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this task.","inherits":"Piece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":172,"file":"Piece.js","path":"src/lib/structures/base"}}],"meta":{"line":10,"file":"Provider.js","path":"src/lib/structures"}},{"name":"ProviderStore","description":"Stores all providers for use in Klasa","extends":["Store"],"construct":{"name":"ProviderStore","description":"Constructs our ProviderStore for use in Klasa","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]}]},"props":[{"name":"default","description":"The default provider set in {@link KlasaClientOptions.providers}","readonly":true,"nullable":true,"type":[[["Provider"]]],"meta":{"line":25,"file":"ProviderStore.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"clear","description":"Clears the providers from the store and waits for them to shutdown.","meta":{"line":33,"file":"ProviderStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"delete","description":"Deletes a provider from the store","params":[{"name":"name","description":"The provider object or a string representing the structure this store caches","type":[[["Provider"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":43,"file":"ProviderStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"set","description":"Sets up a piece in our store.","inherits":"Store#set","inherited":true,"params":[{"name":"piece","description":"The piece we are setting up","type":[[["Piece"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":137,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"ProviderStore.js","path":"src/lib/structures"}},{"name":"Serializer","description":"Base class for all Klasa Serializers. See {@tutorial CreatingSerializers} for more information how to use this class\nto build custom serializers.","extends":["AliasPiece"],"props":[{"name":"aliases","description":"The aliases for this piece","type":[[["Array","<"],["string",">"]]],"meta":{"line":32,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"regex","description":"Standard regular expressions for matching mentions and snowflake ids","scope":"static","type":[[["Object","<"],["string",", "],["RegExp",">"]]],"props":[{"name":"userOrMember","description":"Regex for users or members","type":[[["RegExp"]]]},{"name":"channel","description":"Regex for channels","type":[[["RegExp"]]]},{"name":"emoji","description":"Regex for custom emojis","type":[[["RegExp"]]]},{"name":"role","description":"Regex for roles","type":[[["RegExp"]]]},{"name":"snowflake","description":"Regex for simple snowflake ids","type":[[["RegExp"]]]}],"meta":{"line":59,"file":"Serializer.js","path":"src/lib/structures"},"since":"0.5.0"}],"methods":[{"name":"serialize","description":"The serialize method to be overwritten in actual Serializers","params":[{"name":"data","description":"The data to serialize","type":[["*"]]}],"returns":[[["string"]],[["number"]],[["boolean"]]],"meta":{"line":18,"file":"Serializer.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"deserialize","description":"The deserialize method to be overwritten in actual Serializers","abstract":true,"params":[{"name":"data","description":"The data to deserialize","type":[["*"]]},{"name":"piece","description":"The SchemaPiece we are deserializing for.","type":[[["SchemaPiece"]]]},{"name":"language","description":"The language to use when responding.","type":[[["Language"]]]},{"name":"guild","description":"The guild that will help deserialize","optional":true,"type":[[["external:Guild"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":32,"file":"Serializer.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"stringify","description":"The stringify method to be overwritten in actual Serializers","params":[{"name":"data","description":"The data to stringify","type":[["*"]]}],"returns":[[["string"]]],"meta":{"line":42,"file":"Serializer.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this argument.","inherits":"AliasPiece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":40,"file":"AliasPiece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"meta":{"line":10,"file":"Serializer.js","path":"src/lib/structures"}},{"name":"SerializerStore","description":"Stores all the serializers usable in Klasa","extends":["AliasStore"],"construct":{"name":"SerializerStore","description":"Constructs our SerializerStore for use in Klasa","params":[{"name":"client","description":"The Klasa Client","type":[[["KlasaClient"]]]}]},"props":[{"name":"aliases","description":"The different aliases that represent the arguments in this store.","type":[[["external:Collection"]]],"meta":{"line":21,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"get","description":"Returns an argument in the store if it exists by its name or by an alias.","inherits":"AliasStore#get","inherited":true,"params":[{"name":"name","description":"A argument or alias name","type":[[["string"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":30,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"has","description":"Returns a boolean if the argument or alias is found within the store.","inherits":"AliasStore#has","inherited":true,"params":[{"name":"name","description":"A command or alias name","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":40,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"set","description":"Sets up an argument in our store.","inherits":"AliasStore#set","inherited":true,"params":[{"name":"piece","description":"The command piece we are setting up","type":[[["Argument"]]]}],"returns":{"types":[[["Argument"]]],"nullable":true},"meta":{"line":50,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"delete","description":"Deletes an argument from the store.","inherits":"AliasStore#delete","inherited":true,"params":[{"name":"name","description":"An argument object or a string representing an argument or alias name","type":[[["Argument"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":63,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"clear","description":"Clears the arguments and aliases from this store","inherits":"AliasStore#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":75,"file":"AliasStore.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"meta":{"line":8,"file":"SerializerStore.js","path":"src/lib/structures"}},{"name":"SQLProvider","description":"Base class for all Klasa SQL Providers. See {@tutorial CreatingSQLProviders} for more information how to use this class\nto build custom providers.","extends":["Provider"],"props":[{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"addColumn","description":"The addColumn method which inserts/creates a new table to the database.","abstract":true,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]},{"name":"piece","description":"The SchemaFolder or SchemaPiece added to the schema","type":[[["SchemaFolder"]],[["SchemaPiece"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":22,"file":"SQLProvider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"removeColumn","description":"The removeColumn method which inserts/creates a new table to the database.","abstract":true,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]},{"name":"columns","description":"The column names to remove","type":[[["Array","<"],["string",">"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":34,"file":"SQLProvider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"updateColumn","description":"The updateColumn method which alters the datatype from a column.","abstract":true,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]},{"name":"piece","description":"The modified SchemaPiece","type":[[["SchemaPiece"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":46,"file":"SQLProvider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"getColumns","description":"The getColumns method which gets the name of all columns.","abstract":true,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["string",">>"]]],"async":true,"meta":{"line":57,"file":"SQLProvider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"parseUpdateInput","description":"Parse the gateway input for easier operation","access":"protected","params":[{"name":"updated","description":"The updated entries","optional":true,"type":[[["Array","<"],["SettingsUpdateResultEntry",">"]],[["Array","<"],["Array","<"],["string",">>"]],[["Object","<"],["string",", "],["*",">"]]]},{"name":"resolve","description":"Whether this should resolve the values using QueryBuilder#resolve or not","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Array","<"],["Array","<"],["any",">>"]]],"meta":{"line":69,"file":"SQLProvider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"parseEntry","description":"Parses an entry","access":"protected","params":[{"name":"gateway","description":"The gateway with the schema to parse","type":[[["string"]],[["Gateway"]]]},{"name":"entry","description":"An entry to parse","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":99,"file":"SQLProvider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"parseValue","description":"Parse SQL values.","access":"protected","params":[{"name":"value","description":"The value to parse","type":[["*"]]},{"name":"schemaPiece","description":"The SchemaPiece this is parsing inner keys for","type":[[["SchemaPiece"]]]}],"returns":[["*"]],"meta":{"line":120,"file":"SQLProvider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"_parseGatewayInput","description":"Parse the SettingsUpdateResultEntry[] overload","access":"private","params":[{"name":"updated","description":"The updated keys","type":[[["Array","<"],["SettingsUpdateResultEntry",">"]]]},{"name":"keys","description":"The keys to update","type":[[["Array","<"],["string",">"]]]},{"name":"values","description":"The values to update","type":[[["Array","<"],["any",">"]]]},{"name":"resolve","description":"Whether this should resolve the values using QueryBuilder#resolve or not","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":161,"file":"SQLProvider.js","path":"src/lib/structures"}},{"name":"createTable","description":"Inserts or creates a table in the database.","inherits":"Provider#createTable","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":19,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"deleteTable","description":"Deletes or drops a table from the database.","inherits":"Provider#deleteTable","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":30,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"hasTable","description":"Checks if a table exists in the database.","inherits":"Provider#hasTable","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"async":true,"meta":{"line":41,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"create","description":"Inserts new entries into a table.","inherits":"Provider#create","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to create","type":[[["string"]]]},{"name":"data","description":"The data to insert","type":[[["ProviderResolvable"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":54,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"delete","description":"Removes entries from a table.","inherits":"Provider#delete","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The ID of the entry to delete","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":66,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"get","description":"Retrieve a single entry from a table.","inherits":"Provider#get","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to query","type":[[["string"]]]},{"name":"entryID","description":"The ID of the entry to retrieve","type":[[["string"]]]}],"returns":[[["Promise","<"],["Object","<"],["string",", "],["*",">>"]]],"async":true,"meta":{"line":78,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"getAll","description":"Retrieve all entries from a table.","inherits":"Provider#getAll","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to query","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["Object","<"],["string",", "],["*",">>>"]]],"async":true,"meta":{"line":89,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"getKeys","description":"Retrieves all entries' keys from a table.","inherits":"Provider#getKeys","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to query","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["string",">>"]]],"async":true,"meta":{"line":100,"file":"Provider.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"has","description":"Check if an entry exists in a table.","inherits":"Provider#has","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to check against","type":[[["string"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"async":true,"meta":{"line":112,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"replace","description":"Overwrites the data from an entry in a table.","inherits":"Provider#replace","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to update","type":[[["string"]]]},{"name":"data","description":"The new data for the entry","type":[[["ProviderResolvable"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":125,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"update","description":"Updates an entry from a table.","inherits":"Provider#update","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table to update","type":[[["string"]]]},{"name":"entryID","description":"The entry's ID to update","type":[[["string"]]]},{"name":"data","description":"The data to update","type":[[["ProviderResolvable"]]]}],"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":138,"file":"Provider.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"shutdown","description":"The shutdown method to be optionally overwritten in actual provider pieces.","inherits":"Provider#shutdown","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":148,"file":"Provider.js","path":"src/lib/structures"},"since":"0.3.0"},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","inherits":"Piece#disable","inherited":true,"returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","inherits":"Piece#enable","inherited":true,"returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","inherits":"Piece#init","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this task.","inherits":"Piece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":172,"file":"Piece.js","path":"src/lib/structures/base"}}],"meta":{"line":12,"file":"SQLProvider.js","path":"src/lib/structures"}},{"name":"Task","description":"Base class for all Klasa Task pieces. See {@tutorial CreatingTasks} for more information how to use this class\nto build custom tasks.","extends":["Piece"],"props":[{"name":"client","description":"The client this Piece was created with","type":[[["KlasaClient"]]],"meta":{"line":44,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"file","description":"The file location where this Piece is stored","type":[[["Array","<"],["string",">"]]],"meta":{"line":51,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of the Piece","type":[[["string"]]],"meta":{"line":58,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enabled","description":"If the Piece is enabled or not","type":[[["boolean"]]],"meta":{"line":65,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"store","description":"The store this Piece is from","type":[[["Store"]]],"meta":{"line":72,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"directory","description":"The base directory this Piece is stored in","type":[[["string"]]],"meta":{"line":79,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"type","description":"The type of Klasa piece this is","readonly":true,"type":[[["string"]]],"meta":{"line":88,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"path","description":"The absolute path to this piece","readonly":true,"type":[[["string"]]],"meta":{"line":98,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.5.0"}],"methods":[{"name":"run","description":"The run method to be overwritten in actual Task pieces","abstract":true,"params":[{"name":"data","description":"The data from the ScheduledTask instance","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":18,"file":"Task.js","path":"src/lib/structures"},"since":"0.5.0"},{"name":"reload","description":"Reloads this piece","inherits":"Piece#reload","inherited":true,"returns":{"types":[[["Promise","<"],["Piece",">"]]],"description":"The newly loaded piece"},"async":true,"meta":{"line":107,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"unload","description":"Unloads this piece","inherits":"Piece#unload","inherited":true,"returns":[[["void"]]],"meta":{"line":119,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"disable","description":"Disables this piece","inherits":"Piece#disable","inherited":true,"returns":[[["this"]]],"meta":{"line":130,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"enable","description":"Enables this piece","inherits":"Piece#enable","inherited":true,"returns":[[["this"]]],"meta":{"line":142,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"init","description":"The init method to be optionally overwritten in actual commands","inherits":"Piece#init","inherited":true,"abstract":false,"returns":[[["Promise","<"],["*",">"]]],"async":true,"meta":{"line":155,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for pieces","inherits":"Piece#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This piece name"},"meta":{"line":164,"file":"Piece.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"toJSON","description":"Defines the JSON.stringify behavior of this task.","inherits":"Piece#toJSON","inherited":true,"returns":[[["Object"]]],"meta":{"line":172,"file":"Piece.js","path":"src/lib/structures/base"}}],"meta":{"line":9,"file":"Task.js","path":"src/lib/structures"}},{"name":"TaskStore","description":"Stores all task pieces for use in Klasa","extends":["Store"],"construct":{"name":"TaskStore","description":"Constructs our TaskStore for use in Klasa","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]}]},"props":[{"name":"client","description":"The client this Store was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"name","description":"The name of what this holds","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"},{"name":"holds","description":"The type of structure this store holds","readonly":true,"type":[[["Piece"]]],"meta":{"line":44,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.1.1"},{"name":"coreDirectories","description":"The core directories pieces of this store can hold","access":"private","readonly":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":53,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"userDirectory","description":"The directory of local pieces relative to where you run Klasa from.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"}],"methods":[{"name":"registerCoreDirectory","description":"Registers a core directory to check for pieces","access":"protected","inherits":"Store#registerCoreDirectory","inherited":true,"params":[{"name":"directory","description":"The directory to check for core pieces","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":81,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.5.0"},{"name":"init","description":"Initializes all pieces in this store.","inherits":"Store#init","inherited":true,"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":91,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"load","description":"Loads a piece into Klasa so it can be saved in this store.","inherits":"Store#load","inherited":true,"params":[{"name":"directory","description":"The directory the file is located in","type":[[["string"]]]},{"name":"file","description":"A string or array of strings showing where the file is located.","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":102,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"loadAll","description":"Loads all of our Pieces from both the user and core directories.","inherits":"Store#loadAll","inherited":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of Pieces loaded."},"async":true,"meta":{"line":122,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"set","description":"Sets up a piece in our store.","inherits":"Store#set","inherited":true,"params":[{"name":"piece","description":"The piece we are setting up","type":[[["Piece"]]]}],"returns":{"types":[[["Piece"]]],"nullable":true},"meta":{"line":137,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"delete","description":"Deletes a command from the store.","inherits":"Store#delete","inherited":true,"params":[{"name":"name","description":"A command object or a string representing a command or alias name","type":[[["Piece"]],[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"whether or not the delete was successful."},"meta":{"line":152,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"resolve","description":"Resolve a string or piece into a piece object.","inherits":"Store#resolve","inherited":true,"params":[{"name":"name","description":"The piece object or a string representing a piece's name","type":[[["Piece"]],[["string"]]]}],"returns":[[["Piece"]]],"meta":{"line":165,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.0.1"},{"name":"toString","description":"Defines toString behavior for stores","inherits":"Store#toString","inherited":true,"returns":{"types":[[["string"]]],"description":"This store name"},"meta":{"line":175,"file":"Store.js","path":"src/lib/structures/base"},"since":"0.3.0"}],"meta":{"line":8,"file":"TaskStore.js","path":"src/lib/structures"}},{"name":"CommandPrompt","description":"A class to handle argument collection and parameter resolution for commands","extends":["TextPrompt"],"construct":{"name":"CommandPrompt","params":[{"name":"message","description":"The message for the command","type":[[["KlasaMessage"]]]},{"name":"usage","description":"The usage of the command","type":[[["CommandUsage"]]]},{"name":"options","description":"The options for this CommandPrompt","optional":true,"default":"{}","type":[[["TextPromptOptions"]]]}]},"props":[{"name":"typing","description":"The typing state of this CommandPrompt","access":"private","type":[[["boolean"]]],"meta":{"line":24,"file":"CommandPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"client","description":"The client this TextPrompt was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"message","description":"The message this prompt is for","type":[[["KlasaMessage"]]],"meta":{"line":40,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"usage","description":"The usage for this prompt","type":[[["Usage"]],[["CommandUsage"]]],"meta":{"line":47,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"reprompted","description":"If the command reprompted for missing args","type":[[["boolean"]]],"meta":{"line":54,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"flags","description":"The flag arguments resolved by this class","type":[[["Object"]]],"meta":{"line":61,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"args","description":"The string arguments derived from the usageDelim of the command","type":[[["Array","<"],["string",">"]]],"meta":{"line":68,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"params","description":"The parameters resolved by this class","type":[[["Array","<"],["any",">"]]],"meta":{"line":75,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"time","description":"The time-limit for re-prompting","type":[[["number"]]],"meta":{"line":82,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"limit","description":"The number of re-prompts before this TextPrompt gives up","type":[[["number"]]],"meta":{"line":89,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"quotedStringSupport","description":"Whether this prompt should respect quoted strings","type":[[["boolean"]]],"meta":{"line":96,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"_repeat","description":"Whether the current usage is a repeating arg","access":"private","type":[[["boolean"]]],"meta":{"line":104,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"_required","description":"Whether the current usage is required","access":"private","type":[[["number"]]],"meta":{"line":112,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"_prompted","description":"How many time this class has reprompted","access":"private","type":[[["boolean"]]],"meta":{"line":120,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"_currentUsage","description":"A cache of the current usage while validating","access":"private","type":[[["Tag"]]],"meta":{"line":128,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"responses","description":"A cache of the users responses","type":[[["external:Collection"]]],"meta":{"line":135,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"}],"methods":[{"name":"run","description":"Runs the internal validation, and re-prompts according to the settings","returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"The parameters resolved"},"meta":{"line":34,"file":"CommandPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"reprompt","description":"Collects missing required arguments.","access":"private","inherits":"TextPrompt#reprompt","inherited":true,"params":[{"name":"prompt","description":"The reprompt error","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"async":true,"meta":{"line":158,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"repeatingPrompt","description":"Collects repeating arguments.","access":"private","inherits":"TextPrompt#repeatingPrompt","inherited":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"async":true,"meta":{"line":185,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"validateArgs","description":"Validates and resolves args into parameters","access":"private","inherits":"TextPrompt#validateArgs","inherited":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"The resolved parameters"},"async":true,"meta":{"line":214,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"multiPossibles","description":"Validates and resolves args into parameters, when multiple types of usage is defined","access":"private","inherits":"TextPrompt#multiPossibles","inherited":true,"params":[{"name":"index","description":"The id of the possible usage currently being checked","type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"The resolved parameters"},"async":true,"meta":{"line":238,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"pushParam","description":"Pushes a parameter into this.params, and resets the re-prompt count.","access":"private","inherits":"TextPrompt#pushParam","inherited":true,"params":[{"name":"param","description":"The resolved parameter","type":[[["any"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":279,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"handleError","description":"Decides if the prompter should reprompt or throw the error found while validating.","access":"private","inherits":"TextPrompt#handleError","inherited":true,"params":[{"name":"err","description":"The error found while validating","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"async":true,"meta":{"line":291,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"finalize","description":"Finalizes parameters and arguments for this prompt.","access":"private","inherits":"TextPrompt#finalize","inherited":true,"returns":[[["Array","<"],["any",">"]]],"meta":{"line":303,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"_setup","description":"Splits the original message string into arguments.","access":"private","inherits":"TextPrompt#_setup","inherited":true,"params":[{"name":"original","description":"The original message string","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":316,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"}],"meta":{"line":7,"file":"CommandPrompt.js","path":"src/lib/usage"}},{"name":"CommandUsage","description":"Converts usage strings into objects to compare against later","extends":["Usage"],"construct":{"name":"CommandUsage","params":[{"name":"client","description":"The klasa client","type":[[["KlasaClient"]]]},{"name":"usageString","description":"The usage string for this command","type":[[["usageString"]]]},{"name":"usageDelim","description":"The usage deliminator for this command","type":[[["usageDelim"]]]},{"name":"command","description":"The command this parsed usage is for","type":[[["Command"]]]}]},"props":[{"name":"names","description":"All names and aliases for the command","type":[[["Array","<"],["string",">"]]],"meta":{"line":25,"file":"CommandUsage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"commands","description":"The compiled string for all names/aliases in a usage string","type":[[["string"]]],"meta":{"line":32,"file":"CommandUsage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"nearlyFullUsage","description":"The concatenated string of this.commands and this.deliminatedUsage","type":[[["string"]]],"meta":{"line":39,"file":"CommandUsage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"client","description":"The client this Usage was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":20,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"deliminatedUsage","description":"The usage string re-deliminated with the usageDelim","type":[[["string"]]],"meta":{"line":34,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"usageString","description":"The usage string","type":[[["string"]]],"meta":{"line":41,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"usageDelim","description":"The usage delim","type":[[["string"]]],"meta":{"line":48,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"parsedUsage","description":"The usage object to compare against later","type":[[["Array","<"],["Tag",">"]]],"meta":{"line":55,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"customResolvers","description":"Stores one-off custom resolvers for use with the custom type arg","type":[[["Object"]]],"meta":{"line":62,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"}],"methods":[{"name":"createPrompt","description":"Creates a CommandPrompt instance to collect and resolve arguments with","params":[{"name":"message","description":"The message context from the prompt","type":[[["KlasaMessage"]]]},{"name":"options","description":"The options for the prompt","optional":true,"default":"{}","type":[[["TextPromptOptions"]]]}],"returns":[[["CommandPrompt"]]],"meta":{"line":49,"file":"CommandUsage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"fullUsage","description":"Creates a full usage string including prefix and commands/aliases for documentation/help purposes","params":[{"name":"message","description":"The message context for which to generate usage for","type":[[["KlasaMessage"]]]}],"returns":[[["string"]]],"meta":{"line":59,"file":"CommandUsage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"toString","description":"Defines to string behavior of this class.","returns":[[["string"]]],"meta":{"line":71,"file":"CommandUsage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"createCustomResolver","description":"Registers a one-off custom resolver","inherits":"Usage#createCustomResolver","inherited":true,"params":[{"name":"type","description":"The type of the usage argument","type":[[["string"]]]},{"name":"resolver","description":"The one-off custom resolver","type":[[["function"]]]}],"returns":[[["this"]]],"meta":{"line":73,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"customizeResponse","description":"Customizes the response of an argument if it fails resolution.","inherits":"Usage#customizeResponse","inherited":true,"params":[{"name":"name","description":"The name of the usage argument","type":[[["string"]]]},{"name":"response","description":"The custom response or i18n function","type":[[["string"]],[["function"]]]}],"returns":[[["this"]]],"meta":{"line":86,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"toJSON","description":"Defines json stringify behavior of this class.","inherits":"Usage#toJSON","inherited":true,"returns":[[["Array","<"],["Tag",">"]]],"meta":{"line":107,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"}],"meta":{"line":8,"file":"CommandUsage.js","path":"src/lib/usage"}},{"name":"Possible","description":"Represents a possibility in a usage Tag","construct":{"name":"Possible","params":[{"name":"regexResults","description":"The regex results from parsing the tag member","type":[[["Array","<"],["string",">"]]]}]},"props":[{"name":"name","description":"The name of this possible","type":[[["string"]]],"meta":{"line":18,"file":"Possible.js","path":"src/lib/usage"},"since":"0.2.1"},{"name":"type","description":"The type of this possible","type":[[["string"]]],"meta":{"line":25,"file":"Possible.js","path":"src/lib/usage"},"since":"0.2.1"},{"name":"min","description":"The min of this possible","nullable":true,"type":[[["number"]]],"meta":{"line":32,"file":"Possible.js","path":"src/lib/usage"},"since":"0.2.1"},{"name":"max","description":"The max of this possible","nullable":true,"type":[[["number"]]],"meta":{"line":39,"file":"Possible.js","path":"src/lib/usage"},"since":"0.2.1"},{"name":"regex","description":"The regex of this possible","nullable":true,"type":[[["RegExp"]]],"meta":{"line":46,"file":"Possible.js","path":"src/lib/usage"},"since":"0.3.0"}],"methods":[{"name":"resolveLimit","description":"Resolves a limit","scope":"static","access":"private","params":[{"name":"limit","description":"The limit to evaluate","type":[[["string"]]]},{"name":"limitType","description":"The type of limit","type":[[["string"]]]}],"returns":[[["number"]]],"meta":{"line":59,"file":"Possible.js","path":"src/lib/usage"},"since":"0.2.1"}],"meta":{"line":6,"file":"Possible.js","path":"src/lib/usage"}},{"name":"Tag","description":"Represents a usage Tag","construct":{"name":"Tag","params":[{"name":"members","description":"The tag contents to parse","type":[[["string"]]]},{"name":"count","description":"The position of the tag in the usage string","type":[[["number"]]]},{"name":"required","description":"The type of tag (0 optional, 1 semi-required, 2 required)","type":[[["number"]]]}]},"props":[{"name":"required","description":"The type of this tag","type":[[["number"]]],"meta":{"line":20,"file":"Tag.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"repeat","description":"If this tag is repeating","type":[[["boolean"]]],"meta":{"line":27,"file":"Tag.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"possibles","description":"The possibilities of this tag","type":[[["Array","<"],["Possible",">"]]],"meta":{"line":34,"file":"Tag.js","path":"src/lib/usage"},"since":"0.2.1"},{"name":"response","description":"The custom response defined for this possible","nullable":true,"type":[[["string"]],[["function"]]],"meta":{"line":41,"file":"Tag.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"pattern","description":"Standard regular expressions for matching usage tags","scope":"static","access":"private","type":[[["RegExp"]]],"meta":{"line":127,"file":"Tag.js","path":"src/lib/usage"},"since":"0.5.0"}],"methods":[{"name":"register","description":"Registers a response","access":"private","params":[{"name":"name","description":"The argument name the response is for","type":[[["string"]]]},{"name":"response","description":"The custom response","type":[[["string"]],[["function"]]]}],"returns":[[["boolean"]]],"meta":{"line":52,"file":"Tag.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"parseMembers","description":"Parses members into usable possibles","scope":"static","access":"private","params":[{"name":"members","description":"The tag contents to parse","type":[[["string"]]]},{"name":"count","description":"The position of the tag in the usage string","type":[[["number"]]]}],"returns":[[["Array","<"],["Possible",">"]]],"meta":{"line":69,"file":"Tag.js","path":"src/lib/usage"},"since":"0.2.1"},{"name":"parseTrueMembers","description":"Parses raw members true members","scope":"static","access":"private","params":[{"name":"members","description":"The tag contents to parse","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":101,"file":"Tag.js","path":"src/lib/usage"},"since":"0.2.1"}],"meta":{"line":6,"file":"Tag.js","path":"src/lib/usage"}},{"name":"TextPrompt","description":"A class to handle argument collection and parameter resolution","construct":{"name":"TextPrompt","params":[{"name":"message","description":"The message this prompt is for","type":[[["KlasaMessage"]]]},{"name":"usage","description":"The usage for this prompt","type":[[["Usage"]]]},{"name":"options","description":"The options of this prompt","optional":true,"default":"{}","type":[[["TextPromptOptions"]]]}]},"props":[{"name":"client","description":"The client this TextPrompt was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":26,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"message","description":"The message this prompt is for","type":[[["KlasaMessage"]]],"meta":{"line":40,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"usage","description":"The usage for this prompt","type":[[["Usage"]],[["CommandUsage"]]],"meta":{"line":47,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"reprompted","description":"If the command reprompted for missing args","type":[[["boolean"]]],"meta":{"line":54,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"flags","description":"The flag arguments resolved by this class","type":[[["Object"]]],"meta":{"line":61,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"args","description":"The string arguments derived from the usageDelim of the command","type":[[["Array","<"],["string",">"]]],"meta":{"line":68,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"params","description":"The parameters resolved by this class","type":[[["Array","<"],["any",">"]]],"meta":{"line":75,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"time","description":"The time-limit for re-prompting","type":[[["number"]]],"meta":{"line":82,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"limit","description":"The number of re-prompts before this TextPrompt gives up","type":[[["number"]]],"meta":{"line":89,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"quotedStringSupport","description":"Whether this prompt should respect quoted strings","type":[[["boolean"]]],"meta":{"line":96,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"_repeat","description":"Whether the current usage is a repeating arg","access":"private","type":[[["boolean"]]],"meta":{"line":104,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"_required","description":"Whether the current usage is required","access":"private","type":[[["number"]]],"meta":{"line":112,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"_prompted","description":"How many time this class has reprompted","access":"private","type":[[["boolean"]]],"meta":{"line":120,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"_currentUsage","description":"A cache of the current usage while validating","access":"private","type":[[["Tag"]]],"meta":{"line":128,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"responses","description":"A cache of the users responses","type":[[["external:Collection"]]],"meta":{"line":135,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"delims","description":"Map of RegExps caching usageDelim's RegExps.","scope":"static","access":"private","type":[[["Map","<"],["string",", "],["RegExp",">"]]],"meta":{"line":412,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"flagRegex","description":"Regular Expression to match flags with quoted string support.","scope":"static","type":[[["RegExp"]]],"meta":{"line":420,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"}],"methods":[{"name":"run","description":"Runs the custom prompt.","params":[{"name":"prompt","description":"The message to initially prompt with","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"The parameters resolved"},"async":true,"meta":{"line":144,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"reprompt","description":"Collects missing required arguments.","access":"private","params":[{"name":"prompt","description":"The reprompt error","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"async":true,"meta":{"line":158,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"repeatingPrompt","description":"Collects repeating arguments.","access":"private","returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"async":true,"meta":{"line":185,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"validateArgs","description":"Validates and resolves args into parameters","access":"private","returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"The resolved parameters"},"async":true,"meta":{"line":214,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"multiPossibles","description":"Validates and resolves args into parameters, when multiple types of usage is defined","access":"private","params":[{"name":"index","description":"The id of the possible usage currently being checked","type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"The resolved parameters"},"async":true,"meta":{"line":238,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"pushParam","description":"Pushes a parameter into this.params, and resets the re-prompt count.","access":"private","params":[{"name":"param","description":"The resolved parameter","type":[[["any"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":279,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"handleError","description":"Decides if the prompter should reprompt or throw the error found while validating.","access":"private","params":[{"name":"err","description":"The error found while validating","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"async":true,"meta":{"line":291,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"finalize","description":"Finalizes parameters and arguments for this prompt.","access":"private","returns":[[["Array","<"],["any",">"]]],"meta":{"line":303,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"_setup","description":"Splits the original message string into arguments.","access":"private","params":[{"name":"original","description":"The original message string","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":316,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"getFlags","description":"Parses a message into string args","scope":"static","access":"private","params":[{"name":"content","description":"The remaining content","type":[[["string"]]]},{"name":"delim","description":"The delimiter","type":[[["string"]]]}],"returns":[[["Object"]]],"meta":{"line":332,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"getArgs","description":"Parses a message into string args","scope":"static","access":"private","params":[{"name":"content","description":"The remaining content","type":[[["string"]]]},{"name":"delim","description":"The delimiter","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":350,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"getQuotedStringArgs","description":"Parses a message into string args taking into account quoted strings","scope":"static","access":"private","params":[{"name":"content","description":"The remaining content","type":[[["string"]]]},{"name":"delim","description":"The delimiter","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":363,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"generateNewDelim","description":"Generate a new delimiter's RegExp and cache it","scope":"static","access":"private","params":[{"name":"delim","description":"The delimiter","type":[[["string"]]]}],"returns":[[["RegExp"]]],"meta":{"line":397,"file":"TextPrompt.js","path":"src/lib/usage"},"since":"0.5.0"}],"meta":{"line":8,"file":"TextPrompt.js","path":"src/lib/usage"}},{"name":"Usage","description":"Converts usage strings into objects to compare against later","construct":{"name":"Usage","params":[{"name":"client","description":"The klasa client","type":[[["KlasaClient"]]]},{"name":"usageString","description":"The raw usage string","type":[[["string"]]]},{"name":"usageDelim","description":"The deliminator for this usage","type":[[["string"]]]}]},"props":[{"name":"client","description":"The client this Usage was created with","readonly":true,"type":[[["KlasaClient"]]],"meta":{"line":20,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"deliminatedUsage","description":"The usage string re-deliminated with the usageDelim","type":[[["string"]]],"meta":{"line":34,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"usageString","description":"The usage string","type":[[["string"]]],"meta":{"line":41,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"usageDelim","description":"The usage delim","type":[[["string"]]],"meta":{"line":48,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"parsedUsage","description":"The usage object to compare against later","type":[[["Array","<"],["Tag",">"]]],"meta":{"line":55,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"customResolvers","description":"Stores one-off custom resolvers for use with the custom type arg","type":[[["Object"]]],"meta":{"line":62,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"}],"methods":[{"name":"createCustomResolver","description":"Registers a one-off custom resolver","params":[{"name":"type","description":"The type of the usage argument","type":[[["string"]]]},{"name":"resolver","description":"The one-off custom resolver","type":[[["function"]]]}],"returns":[[["this"]]],"meta":{"line":73,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"customizeResponse","description":"Customizes the response of an argument if it fails resolution.","params":[{"name":"name","description":"The name of the usage argument","type":[[["string"]]]},{"name":"response","description":"The custom response or i18n function","type":[[["string"]],[["function"]]]}],"returns":[[["this"]]],"meta":{"line":86,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"createPrompt","description":"Creates a TextPrompt instance to collect and resolve arguments with.","params":[{"name":"message","description":"The message context from the prompt","type":[[["KlasaMessage"]]]},{"name":"options","description":"The options for the prompt","optional":true,"type":[[["TextPromptOptions"]]]}],"returns":[[["TextPrompt"]]],"meta":{"line":98,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"toJSON","description":"Defines json stringify behavior of this class.","returns":[[["Array","<"],["Tag",">"]]],"meta":{"line":107,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"toString","description":"Defines to string behavior of this class.","returns":[[["string"]]],"meta":{"line":116,"file":"Usage.js","path":"src/lib/usage"},"since":"0.5.0"},{"name":"parseUsage","description":"Method responsible for building the usage object to check against","scope":"static","access":"private","params":[{"name":"usageString","description":"The usage string to parse","type":[[["string"]]]}],"returns":[[["Array","<"],["Tag",">"]]],"meta":{"line":127,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"tagOpen","description":"Method responsible for handling tag opens","scope":"static","access":"private","params":[{"name":"usage","description":"The current usage interim object","type":[[["Object"]]]},{"name":"char","description":"The character that triggered this function","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":176,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"tagClose","description":"Method responsible for handling tag closes","scope":"static","access":"private","params":[{"name":"usage","description":"The current usage interim object","type":[[["Object"]]]},{"name":"char","description":"The character that triggered this function","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":191,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"},{"name":"tagSpace","description":"Method responsible for handling tag spacing","scope":"static","access":"private","params":[{"name":"usage","description":"The current usage interim object","type":[[["Object"]]]},{"name":"char","description":"The character that triggered this function","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":216,"file":"Usage.js","path":"src/lib/usage"},"since":"0.0.1"}],"meta":{"line":11,"file":"Usage.js","path":"src/lib/usage"}},{"name":"Colors","description":"The Colors class that manages the colors displayed in the console.","construct":{"name":"Colors","description":"Constructs our Colors instance","params":[{"name":"options","description":"The options for this format","optional":true,"default":"{}","type":[[["ColorsFormatOptions"]]]}]},"props":[{"name":"opening","description":"The opening tags","type":[[["string"]]],"meta":{"line":33,"file":"Colors.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"closing","description":"The closing tags","type":[[["string"]]],"meta":{"line":40,"file":"Colors.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"useColors","description":"Determines if this class should be constructed with colors or not","scope":"static","access":"private","nullable":true,"type":[[["boolean"]]],"meta":{"line":114,"file":"Colors.js","path":"src/lib/util"}},{"name":"CLOSE","description":"The close codes","scope":"static","access":"private","type":[[["object"]]],"meta":{"line":122,"file":"Colors.js","path":"src/lib/util"}},{"name":"STYLES","description":"The style codes","scope":"static","access":"private","type":[[["object"]]],"meta":{"line":141,"file":"Colors.js","path":"src/lib/util"}},{"name":"TEXTS","description":"The text codes","scope":"static","access":"private","type":[[["object"]]],"meta":{"line":158,"file":"Colors.js","path":"src/lib/util"}},{"name":"BACKGROUNDS","description":"The background codes","scope":"static","access":"private","type":[[["object"]]],"meta":{"line":185,"file":"Colors.js","path":"src/lib/util"}}],"methods":[{"name":"format","description":"Format a string","params":[{"name":"string","description":"The string to format","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":49,"file":"Colors.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"style","description":"Apply the style","scope":"static","access":"private","params":[{"name":"styles","description":"The style or styles to apply","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"data","description":"The data","optional":true,"default":"{}","type":[[["ColorsFormatData"]]]}],"returns":[[["ColorsFormatData"]]],"meta":{"line":61,"file":"Colors.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"background","description":"Apply the background","scope":"static","access":"private","params":[{"name":"background","description":"The background to apply","optional":true,"type":[[["string"]]]},{"name":"data","description":"The data","optional":true,"default":"{}","type":[[["ColorsFormatData"]]]}],"returns":[[["ColorsFormatData"]]],"meta":{"line":82,"file":"Colors.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"text","description":"Apply the text format","scope":"static","access":"private","params":[{"name":"text","description":"The text format to apply","optional":true,"type":[[["string"]]]},{"name":"data","description":"The data","optional":true,"default":"{}","type":[[["ColorsFormatData"]]]}],"returns":[[["ColorsFormatData"]]],"meta":{"line":98,"file":"Colors.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":4,"file":"Colors.js","path":"src/lib/util"}},{"name":"Cron","description":"Handles Cron strings and generates dates based on the cron string provided.","see":["https://en.wikipedia.org/wiki/Cron"],"construct":{"name":"Cron","params":[{"name":"cron","description":"The cron pattern to use","type":[[["string"]]]}]},"methods":[{"name":"next","description":"Get the next date that matches with the current pattern","params":[{"name":"outset","description":"The Date instance to compare with","optional":true,"default":"new Date()","type":[[["Date"]]]},{"name":"origin","description":"Whether this next call is origin","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Date"]]],"meta":{"line":26,"file":"Cron.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_normalize","description":"Normalize the pattern","scope":"static","access":"private","params":[{"name":"cron","description":"The pattern to normalize","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":52,"file":"Cron.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_parseString","description":"Parse the pattern","scope":"static","access":"private","params":[{"name":"cron","description":"The pattern to parse","type":[[["string"]]]}],"returns":[[["Array","<"],["Array","<"],["number",">>"]]],"meta":{"line":78,"file":"Cron.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_parsePart","description":"Parse the current part","scope":"static","access":"private","params":[{"name":"cronPart","description":"The part of the pattern to parse","type":[[["string"]]]},{"name":"id","description":"The id that identifies the current part","type":[[["number"]]]}],"returns":[[["Array","<"],["number",">"]]],"meta":{"line":92,"file":"Cron.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_range","description":"Get an array of numbers with the selected range","scope":"static","access":"private","params":[{"name":"min","description":"The minimum value","type":[[["number"]]]},{"name":"max","description":"The maximum value","type":[[["number"]]]},{"name":"step","description":"The step value","type":[[["number"]]]}],"returns":[[["Array","<"],["number",">"]]],"meta":{"line":116,"file":"Cron.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":7,"file":"Cron.js","path":"src/lib/util"}},{"name":"Duration","description":"Converts duration strings into ms and future dates","construct":{"name":"Duration","description":"Create a new Duration instance","params":[{"name":"pattern","description":"The string to parse","type":[[["string"]]]}]},"props":[{"name":"offset","description":"The offset","type":[[["number"]]],"meta":{"line":65,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"fromNow","description":"Get the date from now","readonly":true,"type":[[["Date"]]],"meta":{"line":74,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"regex","description":"The RegExp used for the pattern parsing","scope":"static","access":"private","type":[[["RegExp"]]],"meta":{"line":160,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"commas","description":"The RegExp used for removing commas","scope":"static","access":"private","type":[[["RegExp"]]],"meta":{"line":169,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"aan","description":"The RegExp used for replacing a/an with 1","scope":"static","access":"private","type":[[["RegExp"]]],"meta":{"line":178,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"}],"methods":[{"name":"dateFrom","description":"Get the date from","params":[{"name":"date","description":"The Date instance to get the date from","type":[[["Date"]]]}],"returns":[[["Date"]]],"meta":{"line":84,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_parse","description":"Parse the pattern","scope":"static","access":"private","params":[{"name":"pattern","description":"The pattern to parse","type":[[["string"]]]}],"returns":[[["number"]]],"meta":{"line":95,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"toNow","description":"Shows the user friendly duration of time between a period and now.","scope":"static","params":[{"name":"earlier","description":"The time to compare","type":[[["Date"]],[["number"]],[["string"]]]},{"name":"showIn","description":"Whether the output should be prefixed","optional":true,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":120,"file":"Duration.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":52,"file":"Duration.js","path":"src/lib/util"}},{"name":"KlasaConsole","description":"Klasa's console class, extends NodeJS Console class.","construct":{"name":"KlasaConsole","description":"Constructs our KlasaConsole instance","params":[{"name":"options","description":"The options for the klasa console","optional":true,"type":[[["ConsoleOptions"]]]}]},"props":[{"name":"stdout","description":"The standard output stream for this console, defaulted to process.stderr.","readonly":true,"type":[[["NodeJSWritableStream"]]],"meta":{"line":98,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"stderr","description":"The standard error output stream for this console, defaulted to process.stderr.","readonly":true,"type":[[["NodeJSWritableStream"]]],"meta":{"line":107,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"template","description":"Whether or not timestamps should be enabled for this console.","nullable":true,"type":[[["Timestamp"]]],"meta":{"line":123,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"colors","description":"The colors for this console.","type":[[["object"]]],"meta":{"line":130,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"utc","description":"Whether the timestamp should be in utc or not","type":[[["boolean"]]],"meta":{"line":142,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"timestamp","description":"The timestamp to use","access":"private","type":[[["string"]]],"meta":{"line":150,"file":"KlasaConsole.js","path":"src/lib/util"}}],"methods":[{"name":"write","description":"Logs everything to the console/writable stream.","access":"private","params":[{"name":"data","description":"The data we want to print","type":[[["Array","<"],["*",">"]]]},{"name":"type","description":"The type of log, particularly useful for coloring","optional":true,"default":"\"log\"","type":[[["string"]]]}],"meta":{"line":161,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"log","description":"Calls a log write with everything to the console/writable stream.","params":[{"name":"data","description":"The data we want to print","variable":true,"type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":175,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"warn","description":"Calls a warn write with everything to the console/writable stream.","params":[{"name":"data","description":"The data we want to print","variable":true,"type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":185,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"error","description":"Calls an error write with everything to the console/writable stream.","params":[{"name":"data","description":"The data we want to print","variable":true,"type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":195,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"debug","description":"Calls a debug write with everything to the console/writable stream.","params":[{"name":"data","description":"The data we want to print","variable":true,"type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":205,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"verbose","description":"Calls a verbose write with everything to the console/writable stream.","params":[{"name":"data","description":"The data we want to print","variable":true,"type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":215,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"wtf","description":"Calls a wtf (what a terrible failure) write with everything to the console/writable stream.","params":[{"name":"data","description":"The data we want to print","variable":true,"type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":225,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_flatten","description":"Flattens our data into a readable string.","scope":"static","access":"private","params":[{"name":"data","description":"Some data to flatten","type":[["*"]]}],"returns":[[["string"]]],"meta":{"line":236,"file":"KlasaConsole.js","path":"src/lib/util"},"since":"0.4.0"}],"meta":{"line":11,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"QueryBuilder","construct":{"name":"QueryBuilder","params":[{"name":"options","description":"The default options for all datatypes plus formatDatatype","optional":true,"default":"{}","type":[[["QueryBuilderOptions"]]]}]},"props":[{"name":"arrayResolver","description":"The array resolver for the SQL database","access":"private","type":[[["function"]]],"meta":{"line":61,"file":"QueryBuilder.js","path":"src/lib/util"}},{"name":"formatDatatype","description":"The datatype formatter for the SQL database","access":"private","type":[[["function"]]],"meta":{"line":72,"file":"QueryBuilder.js","path":"src/lib/util"}}],"methods":[{"name":"get","description":"Get a datatype","examples":["this.qb.get('string');"],"params":[{"name":"type","description":"The datatype to get","type":[[["string"]]]}],"returns":{"types":[[["QueryBuilderDatatype"]]],"nullable":true},"meta":{"line":83,"file":"QueryBuilder.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"parse","description":"Parse a SchemaPiece for the SQL datatype creation","examples":["this.qb.parse(this.client.gateways.guilds.schema.prefix);\n// type: 'string', array: true, max: 10\n// -> prefix VARCHAR(10)[]"],"params":[{"name":"schemaPiece","description":"The SchemaPiece to process","type":[[["schemaPiece"]]]}],"returns":[[["string"]]],"meta":{"line":97,"file":"QueryBuilder.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"parseValue","description":"Parses the value","params":[{"name":"value","description":"The value to parse","type":[["*"]]},{"name":"schemaPiece","description":"The SchemaPiece instance that manages this instance","type":[[["schemaPiece"]]]},{"name":"datatype","description":"The QueryBuilder datatype","type":[[["QueryBuilderDatatype"]]]}],"returns":[[["string"]]],"meta":{"line":113,"file":"QueryBuilder.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":23,"file":"QueryBuilder.js","path":"src/lib/util"}},{"name":"RateLimit","description":"Handles generic RateLimits such as for {@link Command#cooldown}s","construct":{"name":"RateLimit","params":[{"name":"bucket","description":"The number of requests before this is limited","type":[[["number"]]]},{"name":"cooldown","description":"The amount of milliseconds for the ratelimit to expire","type":[[["number"]]]}]},"props":[{"name":"bucket","description":"The number of requests before this is limited","type":[[["number"]]],"meta":{"line":17,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"cooldown","description":"The amount of milliseconds for the ratelimit to expire","type":[[["number"]]],"meta":{"line":24,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"expired","description":"Whether this RateLimit is expired or not, allowing the bucket to be reset","readonly":true,"type":[[["boolean"]]],"meta":{"line":35,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"limited","description":"Whether this RateLimit is limited or not","readonly":true,"type":[[["boolean"]]],"meta":{"line":45,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"remainingTime","description":"The remaining time in milliseconds before this RateLimit instance is reset","readonly":true,"type":[[["number"]]],"meta":{"line":55,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"remaining","description":"The remaining times this RateLimit can be dripped before the RateLimit bucket is empty","access":"private","type":[[["number"]]],"meta":{"line":93,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"time","description":"When this RateLimit is reset back to a full state","access":"private","type":[[["number"]]],"meta":{"line":110,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"}],"methods":[{"name":"drip","description":"Drips the RateLimit bucket","returns":[[["this"]]],"meta":{"line":64,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"reset","description":"Resets the RateLimit back to it's full state","returns":[[["this"]]],"meta":{"line":77,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"resetRemaining","description":"Resets the RateLimit's remaining uses back to full state","returns":[[["this"]]],"meta":{"line":86,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"resetTime","description":"Resets the RateLimit's reset time back to full state","returns":[[["this"]]],"meta":{"line":103,"file":"RateLimit.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":4,"file":"RateLimit.js","path":"src/lib/util"}},{"name":"RateLimitManager","description":"Manages {@link RateLimit}s","extends":["external:Collection"],"construct":{"name":"RateLimitManager","params":[{"name":"bucket","description":"The amount of times a RateLimit can drip before it's limited","type":[[["number"]]]},{"name":"cooldown","description":"The amount of milliseconds for the ratelimits from this manager to expire","type":[[["number"]]]}]},"props":[{"name":"sweepInterval","description":"The sweep interval for this RateLimitManager","access":"private","nullable":true,"type":[[["NodeJSTimer"]]],"meta":{"line":18,"file":"RateLimitManager.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"bucket","description":"The amount of times a RateLimit from this manager can drip before it's limited","type":[[["number"]]],"meta":{"line":35,"file":"RateLimitManager.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"cooldown","description":"The amount of milliseconds for the ratelimits from this manager to expire","type":[[["number"]]],"meta":{"line":50,"file":"RateLimitManager.js","path":"src/lib/util"},"since":"0.5.0"}],"methods":[{"name":"acquire","description":"Gets a {@link RateLimit} from this manager or creates it if it does not exist","params":[{"name":"id","description":"The id for the RateLimit","type":[[["string"]]]}],"returns":[[["RateLimit"]]],"meta":{"line":66,"file":"RateLimitManager.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"create","description":"Creates a {@link RateLimit} for this manager","params":[{"name":"id","description":"The id the RateLimit belongs to","type":[[["string"]]]}],"returns":[[["RateLimit"]]],"meta":{"line":76,"file":"RateLimitManager.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"set","description":"Wraps {@link external:Collection}'s set method to set interval to sweep inactive RateLimits","access":"private","params":[{"name":"id","description":"The id the RateLimit belongs to","type":[[["string"]]]},{"name":"rateLimit","description":"The this for the sweep","type":[[["RateLimit"]]]}],"returns":[[["this"]]],"meta":{"line":90,"file":"RateLimitManager.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"sweep","description":"Wraps {@link external:Collection}'s sweep method to clear the interval when this manager is empty","access":"private","params":[{"name":"fn","description":"The filter function","type":[[["function"]]]},{"name":"thisArg","description":"The this for the sweep","type":[[["any"]]]}],"returns":[[["number"]]],"meta":{"line":104,"file":"RateLimitManager.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":8,"file":"RateLimitManager.js","path":"src/lib/util"}},{"name":"ReactionHandler","description":"Klasa's ReactionHandler, for handling RichDisplay and RichMenu reaction input","extends":["ReactionCollector"],"construct":{"name":"ReactionHandler","description":"Constructs our ReactionHandler instance","params":[{"name":"message","description":"A message this ReactionHandler should handle reactions","type":[[["KlasaMessage"]]]},{"name":"filter","description":"A filter function to determine which emoji reactions should be handled","type":[[["function"]]]},{"name":"options","description":"The options for this ReactionHandler","type":[[["ReactionHandlerOptions"]]]},{"name":"display","description":"The RichDisplay or RichMenu that this handler is for","type":[[["RichDisplay"]],[["RichMenu"]]]},{"name":"emojis","description":"The emojis which should be used in this handler","type":[[["Array","<"],["Emoji",">"]]]}]},"props":[{"name":"display","description":"The RichDisplay/RichMenu this Handler is for","type":[[["RichDisplay"]],[["RichMenu"]]],"meta":{"line":43,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"methodMap","description":"An emoji to method map, to map custom emojis to static method names","type":[[["Map","<"],["string",", "],["Emoji",">"]]],"meta":{"line":50,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"currentPage","description":"The current page the display is on","type":[[["number"]]],"meta":{"line":57,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"prompt","description":"The prompt to use when jumping pages","type":[[["string"]]],"meta":{"line":64,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"time","description":"The amount of time before the jump menu should close","type":[[["number"]]],"meta":{"line":71,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"awaiting","description":"Whether the menu is awaiting a response of a prompt, to block all other jump reactions","type":[[["boolean"]]],"meta":{"line":78,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"selection","description":"The selection of a RichMenu (useless in a RichDisplay scenario)","type":[[["Promise","<?"],["number",">"]]],"meta":{"line":85,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"reject","description":"Causes this.selection to resolve","access":"private","type":[[["function"]]],"meta":{"line":92,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"resolve","description":"Causes this.selection to reject","access":"private","type":[[["function"]]],"meta":{"line":100,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"reactionsDone","description":"Whether reactions have finished queuing (used to handle clearing reactions on early menu selections)","type":[[["boolean"]]],"meta":{"line":108,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"}],"methods":[{"name":"first","description":"The action to take when the \"first\" emoji is reacted","returns":[[["void"]]],"meta":{"line":127,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"back","description":"The action to take when the \"back\" emoji is reacted","returns":[[["void"]]],"meta":{"line":137,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"forward","description":"The action to take when the \"forward\" emoji is reacted","returns":[[["void"]]],"meta":{"line":148,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"last","description":"The action to take when the \"last\" emoji is reacted","returns":[[["void"]]],"meta":{"line":159,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"jump","description":"The action to take when the \"jump\" emoji is reacted","params":[{"name":"user","description":"The user to lock the awaitMessages to","type":[[["KlasaUser"]]]}],"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":170,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"info","description":"The action to take when the \"info\" emoji is reacted","returns":[[["void"]]],"meta":{"line":191,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"stop","description":"The action to take when the \"stop\" emoji is reacted","returns":[[["void"]]],"meta":{"line":200,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"zero","description":"The action to take when the \"zero\" emoji is reacted","returns":[[["void"]]],"meta":{"line":210,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"one","description":"The action to take when the \"one\" emoji is reacted","returns":[[["void"]]],"meta":{"line":221,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"two","description":"The action to take when the \"two\" emoji is reacted","returns":[[["void"]]],"meta":{"line":232,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"three","description":"The action to take when the \"three\" emoji is reacted","returns":[[["void"]]],"meta":{"line":243,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"four","description":"The action to take when the \"four\" emoji is reacted","returns":[[["void"]]],"meta":{"line":254,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"five","description":"The action to take when the \"five\" emoji is reacted","returns":[[["void"]]],"meta":{"line":265,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"six","description":"The action to take when the \"six\" emoji is reacted","returns":[[["void"]]],"meta":{"line":276,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"seven","description":"The action to take when the \"seven\" emoji is reacted","returns":[[["void"]]],"meta":{"line":287,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"eight","description":"The action to take when the \"eight\" emoji is reacted","returns":[[["void"]]],"meta":{"line":298,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"nine","description":"The action to take when the \"nine\" emoji is reacted","returns":[[["void"]]],"meta":{"line":309,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"update","description":"Updates the display page","returns":[[["void"]]],"meta":{"line":320,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_queueEmojiReactions","description":"The action to take when the \"first\" emoji is reacted","access":"private","params":[{"name":"emojis","description":"The remaining emojis to react","type":[[["Array","<"],["Emoji",">"]]]}],"returns":[[["Promise","<"],["null",">"]]],"async":true,"meta":{"line":331,"file":"ReactionHandler.js","path":"src/lib/util"},"since":"0.4.0"}],"meta":{"line":7,"file":"ReactionHandler.js","path":"src/lib/util"}},{"name":"RichDisplay","description":"Klasa's RichDisplay, for helping paginated embeds with reaction buttons","construct":{"name":"RichDisplay","description":"Constructs our RichDisplay instance","params":[{"name":"embed","description":"A Template embed to apply to all pages","optional":true,"default":"new MessageEmbed()","type":[[["external:MessageEmbed"]]]}]},"props":[{"name":"embedTemplate","description":"The embed template","type":[[["external:MessageEmbed"]]],"meta":{"line":45,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"pages","description":"The stored pages of the display","type":[[["Array","<"],["external:MessageEmbed",">"]]],"meta":{"line":52,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"infoPage","description":"An optional Info page/embed","nullable":true,"type":[[["external:MessageEmbed"]]],"meta":{"line":59,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"emojis","description":"The default emojis to use for this display","type":[[["RichDisplayEmojisObject"]]],"meta":{"line":66,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"footered","description":"If footers have been applied to all pages","type":[[["boolean"]]],"meta":{"line":81,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"footerPrefix","description":"Adds a prefix to all footers (before page/pages)","type":[[["string"]]],"meta":{"line":88,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"footerSuffix","description":"Adds a suffix to all footers (after page/pages)","type":[[["string"]]],"meta":{"line":95,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"template","description":"A new instance of the template embed","readonly":true,"type":[[["external:MessageEmbed"]]],"meta":{"line":104,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"}],"methods":[{"name":"setEmojis","description":"Sets emojis to a new set of emojis","params":[{"name":"emojis","description":"An object containing replacement emojis to use instead","type":[[["RichDisplayEmojisObject"]]]}],"returns":[[["this"]]],"meta":{"line":115,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"setFooterPrefix","description":"Sets a prefix for all footers","params":[{"name":"prefix","description":"The prefix you want to add","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":127,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"setFooterSuffix","description":"Sets a suffix for all footers","params":[{"name":"suffix","description":"The suffix you want to add","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":140,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"useCustomFooters","description":"Turns off the footer altering function","returns":[[["this"]]],"meta":{"line":152,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"addPage","description":"Adds a page to the RichDisplay","params":[{"name":"embed","description":"A callback with the embed template passed and the embed returned, or an embed","type":[[["function"]],[["external:MessageEmbed"]]]}],"returns":[[["this"]]],"meta":{"line":164,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"setInfoPage","description":"Adds an info page to the RichDisplay","params":[{"name":"embed","description":"A callback with the embed template passed and the embed returned, or an embed","type":[[["function"]],[["external:MessageEmbed"]]]}],"returns":[[["this"]]],"meta":{"line":176,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"run","description":"Runs the RichDisplay","params":[{"name":"message","description":"A message to either edit, or use to send a new message for this RichDisplay","type":[[["KlasaMessage"]]]},{"name":"options","description":"The options to use while running this RichDisplay","optional":true,"default":"{}","type":[[["RichDisplayRunOptions"]]]}],"returns":[[["Promise","<"],["ReactionHandler",">"]]],"async":true,"meta":{"line":188,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_footer","description":"Adds page of pages footers to all pages","access":"private","returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":219,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_determineEmojis","description":"Determines the emojis to use in this display","access":"private","params":[{"name":"emojis","description":"An array of emojis to use","type":[[["Array","<"],["Emoji",">"]]]},{"name":"stop","description":"Whether the stop emoji should be included","type":[[["boolean"]]]},{"name":"jump","description":"Whether the jump emoji should be included","type":[[["boolean"]]]},{"name":"firstLast","description":"Whether the first & last emojis should be included","type":[[["boolean"]]]}],"returns":[[["Array","<"],["Emoji",">"]]],"meta":{"line":234,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_handlePageGeneration","description":"Resolves the callback or MessageEmbed into a MessageEmbed","access":"private","params":[{"name":"cb","description":"The callback or embed","type":[[["function"]],[["external:MessageEmbed"]]]}],"returns":[[["external:MessageEmbed"]]],"meta":{"line":252,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"}],"meta":{"line":7,"file":"RichDisplay.js","path":"src/lib/util"}},{"name":"RichMenu","description":"Klasa's RichMenu, for helping paginated embeds with reaction buttons","extends":["RichDisplay"],"construct":{"name":"RichMenu","description":"Constructs our RichMenu instance","params":[{"name":"embed","description":"A Template embed to apply to all pages","optional":true,"default":"new MessageEmbed()","type":[[["external:MessageEmbed"]]]}]},"props":[{"name":"emojis","description":"The default emojis to use for this menu","type":[[["RichMenuEmojisObject"]]],"meta":{"line":50,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"paginated","description":"If options have been paginated yet","type":[[["boolean"]]],"meta":{"line":74,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"options","description":"The options of this Menu","type":[[["Array","<"],["MenuOptions",">"]]],"meta":{"line":81,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"embedTemplate","description":"The embed template","type":[[["external:MessageEmbed"]]],"meta":{"line":45,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"pages","description":"The stored pages of the display","type":[[["Array","<"],["external:MessageEmbed",">"]]],"meta":{"line":52,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"infoPage","description":"An optional Info page/embed","nullable":true,"type":[[["external:MessageEmbed"]]],"meta":{"line":59,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"footered","description":"If footers have been applied to all pages","type":[[["boolean"]]],"meta":{"line":81,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"footerPrefix","description":"Adds a prefix to all footers (before page/pages)","type":[[["string"]]],"meta":{"line":88,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"footerSuffix","description":"Adds a suffix to all footers (after page/pages)","type":[[["string"]]],"meta":{"line":95,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"template","description":"A new instance of the template embed","readonly":true,"type":[[["external:MessageEmbed"]]],"meta":{"line":104,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"}],"methods":[{"name":"addPage","description":"You cannot directly add pages in a RichMenu","meta":{"line":89,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"addOption","description":"Adds a MenuOptions","params":[{"name":"name","description":"The name of the option","type":[[["string"]]]},{"name":"body","description":"The description of the option","type":[[["string"]]]},{"name":"inline","description":"Whether the option should be inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":102,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"run","description":"Runs this RichMenu","params":[{"name":"message","description":"A message to edit or use to send a new message with","type":[[["KlasaMessage"]]]},{"name":"options","description":"The options to use with this RichMenu","optional":true,"default":"{}","type":[[["RichMenuRunOptions"]]]}],"returns":[[["Promise","<"],["ReactionHandler",">"]]],"async":true,"meta":{"line":114,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_determineEmojis","description":"Determines the emojis to use in this menu","access":"private","params":[{"name":"emojis","description":"An array of emojis to use","type":[[["Array","<"],["Emoji",">"]]]},{"name":"stop","description":"Whether the stop emoji should be included","type":[[["boolean"]]]},{"name":"jump","description":"Whether the jump emoji should be included","type":[[["boolean"]]]},{"name":"firstLast","description":"Whether the first & last emojis should be included","type":[[["boolean"]]]}],"returns":[[["Array","<"],["Emoji",">"]]],"meta":{"line":129,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_paginate","description":"Converts MenuOptions into display pages","access":"private","returns":[[["void"]]],"meta":{"line":141,"file":"RichMenu.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"setEmojis","description":"Sets emojis to a new set of emojis","inherits":"RichDisplay#setEmojis","inherited":true,"params":[{"name":"emojis","description":"An object containing replacement emojis to use instead","type":[[["RichDisplayEmojisObject"]]]}],"returns":[[["this"]]],"meta":{"line":115,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"setFooterPrefix","description":"Sets a prefix for all footers","inherits":"RichDisplay#setFooterPrefix","inherited":true,"params":[{"name":"prefix","description":"The prefix you want to add","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":127,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"setFooterSuffix","description":"Sets a suffix for all footers","inherits":"RichDisplay#setFooterSuffix","inherited":true,"params":[{"name":"suffix","description":"The suffix you want to add","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":140,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"useCustomFooters","description":"Turns off the footer altering function","inherits":"RichDisplay#useCustomFooters","inherited":true,"returns":[[["this"]]],"meta":{"line":152,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"setInfoPage","description":"Adds an info page to the RichDisplay","inherits":"RichDisplay#setInfoPage","inherited":true,"params":[{"name":"embed","description":"A callback with the embed template passed and the embed returned, or an embed","type":[[["function"]],[["external:MessageEmbed"]]]}],"returns":[[["this"]]],"meta":{"line":176,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_footer","description":"Adds page of pages footers to all pages","access":"private","inherits":"RichDisplay#_footer","inherited":true,"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":219,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_handlePageGeneration","description":"Resolves the callback or MessageEmbed into a MessageEmbed","access":"private","inherits":"RichDisplay#_handlePageGeneration","inherited":true,"params":[{"name":"cb","description":"The callback or embed","type":[[["function"]],[["external:MessageEmbed"]]]}],"returns":[[["external:MessageEmbed"]]],"meta":{"line":252,"file":"RichDisplay.js","path":"src/lib/util"},"since":"0.4.0"}],"meta":{"line":7,"file":"RichMenu.js","path":"src/lib/util"}},{"name":"Stopwatch","description":"Klasa's Stopwatch class, uses native node to replicate/extend previous performance now dependency.","construct":{"name":"Stopwatch","description":"Starts a new Stopwatch","params":[{"name":"digits","description":"The number of digits to appear after the decimal point when returning the friendly duration","optional":true,"default":2,"type":[[["number"]]]}]},"props":[{"name":"digits","description":"The number of digits to appear after the decimal point when returning the friendly duration.","type":[[["number"]]],"meta":{"line":19,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_start","description":"The start time of this stopwatch","access":"private","type":[[["number"]]],"meta":{"line":27,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"_end","description":"The end time of this stopwatch","access":"private","nullable":true,"type":[[["number"]]],"meta":{"line":35,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"duration","description":"The duration of this stopwatch since start or start to end if this stopwatch has stopped.","readonly":true,"type":[[["number"]]],"meta":{"line":44,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"running","description":"If the stopwatch is running or not","readonly":true,"type":[[["boolean"]]],"meta":{"line":54,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"}],"methods":[{"name":"restart","description":"Restarts the Stopwatch (Returns a running state)","returns":[[["this"]]],"meta":{"line":64,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"reset","description":"Resets the Stopwatch to 0 duration (Returns a stopped state)","returns":[[["this"]]],"meta":{"line":76,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"start","description":"Starts the Stopwatch","returns":[[["this"]]],"meta":{"line":88,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"stop","description":"Stops the Stopwatch, freezing the duration","returns":[[["this"]]],"meta":{"line":102,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"},{"name":"toString","description":"Defines toString behavior","returns":[[["string"]]],"meta":{"line":112,"file":"Stopwatch.js","path":"src/lib/util"},"since":"0.4.0"}],"meta":{"line":6,"file":"Stopwatch.js","path":"src/lib/util"}},{"name":"Timestamp","description":"Klasa's Timestamp class, parses the pattern once, displays the desired Date or UNIX timestamp with the selected pattern.","construct":{"name":"Timestamp","description":"Starts a new Timestamp and parses the pattern.","params":[{"name":"pattern","description":"The pattern to parse","type":[[["string"]]]}]},"props":[{"name":"pattern","type":[[["string"]]],"meta":{"line":24,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_template","access":"private","type":[[["Array","<"],["TimestampObject",">"]]],"meta":{"line":30,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"}],"methods":[{"name":"display","description":"Display the current date with the current pattern.","params":[{"name":"time","description":"The time to display","optional":true,"default":"new Date()","type":[[["Date"]],[["number"]],[["string"]]]}],"returns":[[["string"]]],"meta":{"line":39,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"displayUTC","description":"Display the current date utc with the current pattern.","params":[{"name":"time","description":"The time to display in utc","optional":true,"default":"new Date()","type":[[["Date"]],[["number"]],[["string"]]]}],"returns":[[["string"]]],"meta":{"line":49,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"edit","description":"Edits the current pattern.","params":[{"name":"pattern","description":"The new pattern for this instance","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":60,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"toString","description":"Defines the toString behavior of Timestamp.","returns":[[["string"]]],"meta":{"line":70,"file":"Timestamp.js","path":"src/lib/util"}},{"name":"displayArbitrary","description":"Display the current date with the current pattern.","scope":"static","params":[{"name":"pattern","description":"The pattern to parse","type":[[["string"]]]},{"name":"time","description":"The time to display","optional":true,"default":"new Date()","type":[[["Date"]],[["number"]],[["string"]]]}],"returns":[[["string"]]],"meta":{"line":81,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"utc","description":"Creates a UTC Date object to work with.","scope":"static","params":[{"name":"time","description":"The date to convert to utc","optional":true,"default":"new Date()","type":[[["Date"]],[["number"]],[["string"]]]}],"returns":[[["Date"]]],"meta":{"line":91,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_display","description":"Display the current date with the current pattern.","scope":"static","access":"private","params":[{"name":"template","description":"The pattern to parse","type":[[["string"]]]},{"name":"time","description":"The time to display","type":[[["Date"]],[["number"]],[["string"]]]}],"returns":[[["string"]]],"meta":{"line":104,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_patch","description":"Parses the pattern.","scope":"static","access":"private","params":[{"name":"pattern","description":"The pattern to parse","type":[[["string"]]]}],"returns":[[["Array","<"],["TimestampObject",">"]]],"meta":{"line":118,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"_resolveDate","description":"Resolves a date.","scope":"static","access":"private","params":[{"name":"time","description":"The time to parse","type":[[["Date"]],[["number"]],[["string"]]]}],"returns":[[["Date"]]],"meta":{"line":148,"file":"Timestamp.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":6,"file":"Timestamp.js","path":"src/lib/util"}},{"name":"Type","description":"The class for deep checking Types","construct":{"name":"Type","params":[{"name":"value","description":"The value to generate a deep Type of","type":[["*"]]},{"name":"parent","description":"The parent value used in recursion","optional":true,"default":null,"type":[[["Type"]]]}]},"props":[{"name":"value","description":"The value to generate a deep Type of","type":[["*"]],"meta":{"line":20,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"is","description":"The shallow type of this","type":[[["string"]]],"meta":{"line":27,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"parent","description":"The parent of this type","access":"private","nullable":true,"type":[[["Type"]]],"meta":{"line":35,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"childKeys","description":"The child keys of this Type","access":"private","type":[[["Map","<"],["string",", "],["Type",">"]]],"meta":{"line":43,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"childValues","description":"The child values of this Type","access":"private","type":[[["Map","<"],["string",", "],["Type",">"]]],"meta":{"line":51,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"childTypes","description":"The type string for the children of this Type","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":61,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"}],"methods":[{"name":"toString","description":"The full type string generated.","returns":[[["string"]]],"meta":{"line":71,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"addValue","description":"The subtype to create based on this.value's sub value.","access":"private","params":[{"name":"value","description":"The sub value","type":[["*"]]}],"meta":{"line":82,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"addEntry","description":"The subtype to create based on this.value's entries.","access":"private","params":[{"name":"entry","description":"the entry","type":[[["Array","<"],["string",", "],["*",">"]]]}],"meta":{"line":93,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"parents","description":"Walks the linked list backwards, for checking circulars.","access":"private","yields":[[["Type"]]],"generator":true,"meta":{"line":105,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"check","description":"Get the deep type name that defines the input.","access":"private","meta":{"line":117,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"isCircular","description":"Checks if the value of this Type is a circular reference to any parent.","access":"private","returns":[[["boolean"]]],"meta":{"line":134,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"resolve","description":"Resolves the type name that defines the input.","scope":"static","params":[{"name":"value","description":"The value to get the type name of","type":[["*"]]}],"returns":[[["string"]]],"meta":{"line":145,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"list","description":"Joins the list of child types.","scope":"static","access":"private","params":[{"name":"values","description":"The values to list","type":[[["Map","<"],["string",", "],["Type",">"]]]}],"returns":[[["string"]]],"meta":{"line":162,"file":"Type.js","path":"src/lib/util"},"since":"0.5.0"}],"meta":{"line":8,"file":"Type.js","path":"src/lib/util"}},{"name":"Util","description":"Contains static methods to be used throughout klasa","construct":{"name":"Util","description":"This class may not be initiated with new"},"props":[{"name":"titleCaseVariants","description":"Object with certain title case variants for words","scope":"static","type":[[["Object"]]],"meta":{"line":351,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"PRIMITIVE_TYPES","description":"The primitive types","scope":"static","type":[[["Array","<"],["string",">"]]],"meta":{"line":364,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"}],"methods":[{"name":"codeBlock","description":"Makes a codeblock markup string","scope":"static","params":[{"name":"lang","description":"The codeblock language","type":[[["string"]]]},{"name":"expression","description":"The expression to be wrapped in the codeblock","type":[[["Stringifible"]]]}],"returns":[[["string"]]],"meta":{"line":40,"file":"util.js","path":"src/lib/util"},"since":"0.0.1"},{"name":"clean","description":"Cleans sensitive info from strings","scope":"static","params":[{"name":"text","description":"The text to clean","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":50,"file":"util.js","path":"src/lib/util"},"since":"0.0.1"},{"name":"initClean","description":"Initializes the sensitive patterns for clean()","scope":"static","access":"private","params":[{"name":"client","description":"The Klasa client","type":[[["KlasaClient"]]]}],"meta":{"line":60,"file":"util.js","path":"src/lib/util"},"since":"0.0.1"},{"name":"toTitleCase","description":"Converts a string to Title Case","scope":"static","params":[{"name":"str","description":"The string to title case","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":70,"file":"util.js","path":"src/lib/util"},"since":"0.0.1"},{"name":"regExpEsc","description":"Cleans a string from regex injection","scope":"static","params":[{"name":"str","description":"The string to clean","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":80,"file":"util.js","path":"src/lib/util"},"since":"0.0.1"},{"name":"chunk","description":"Splits up an array into chunks","scope":"static","params":[{"name":"entries","description":"The object to be merged","type":[[["Array","<"],["any",">"]]]},{"name":"chunkSize","description":"The object to merge","type":[[["number"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":91,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"mergeObjects","description":"Merges two objects","scope":"static","params":[{"name":"objTarget","description":"The object to be merged","type":[["*"]]},{"name":"objSource","description":"The object to merge","type":[["*"]]}],"returns":[["*"]],"meta":{"line":107,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"deepClone","description":"Deep clone a value","scope":"static","params":[{"name":"source","description":"The object to clone","type":[["*"]]}],"returns":[["*"]],"meta":{"line":118,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"isFunction","description":"Verify if the input is a function.","scope":"static","params":[{"name":"input","description":"The function to verify","type":[[["function"]]]}],"returns":[[["boolean"]]],"meta":{"line":150,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"isClass","description":"Verify if the input is a class constructor.","scope":"static","params":[{"name":"input","description":"The function to verify","type":[[["function"]]]}],"returns":[[["boolean"]]],"meta":{"line":160,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"isObject","description":"Verify if the input is an object literal (or class).","scope":"static","params":[{"name":"input","description":"The object to verify","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":172,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"isNumber","description":"Verify if a number is a finite number.","scope":"static","params":[{"name":"input","description":"The number to verify","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":182,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"isPrimitive","description":"Check whether a value is a primitive","scope":"static","params":[{"name":"value","description":"The value to check","type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":192,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"isThenable","description":"Verify if an object is a promise.","scope":"static","params":[{"name":"input","description":"The promise to verify","type":[[["Promise"]]]}],"returns":[[["boolean"]]],"meta":{"line":202,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"tryParse","description":"Try parse a stringified JSON string.","scope":"static","params":[{"name":"value","description":"The value to parse","type":[[["string"]]]}],"returns":[["*"]],"meta":{"line":214,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"makeObject","description":"Turn a dotted path into a json object.","scope":"static","params":[{"name":"path","description":"The dotted path","type":[[["string"]]]},{"name":"value","description":"The value","type":[["*"]]},{"name":"obj","description":"The object to edit","optional":true,"default":"{}","type":[[["Object","<"],["string",", "],["*",">"]]]}],"returns":[["*"]],"meta":{"line":230,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"objectToTuples","description":"Convert an object to a tuple","scope":"static","params":[{"name":"object","description":"The object to convert","type":[[["Object","<"],["string",", "],["*",">"]]]},{"name":"prefix","description":"The prefix for the key","optional":true,"default":"''","type":[[["string"]]]}],"returns":[[["Array","<"],["Array","<"],["*",">>"]]],"meta":{"line":253,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"arraysStrictEquals","description":"Compare if both arrays are strictly equal","scope":"static","params":[{"name":"arr1","description":"The first array to compare","type":[[["Array","<"],["any",">"]]]},{"name":"arr2","description":"The second array to compare","type":[[["Array","<"],["any",">"]]]}],"returns":[[["boolean"]]],"meta":{"line":273,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","optional":true,"type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":291,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"resolveGuild","description":"Resolves a guild","scope":"static","access":"private","params":[{"name":"client","description":"The KlasaClient","type":[[["KlasaClient"]]]},{"name":"guild","description":"A guild resolvable","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["KlasaGuild"]]],"nullable":true},"meta":{"line":309,"file":"util.js","path":"src/lib/util"},"since":"0.5.0"},{"name":"exec","description":"Promisified version of child_process.exec for use with await","scope":"static","params":[{"name":"command","description":"The command to run","type":[[["string"]]]},{"name":"options","description":"The options to pass to exec","optional":true,"type":[[["external:ExecOptions"]]]}],"returns":[[["Promise","<{"],["stdout:"," "],["string",", "],["stderr:"," "],["string","}>"]]],"meta":{"line":332,"file":"util.js","path":"src/lib/util"},"since":"0.3.0"},{"name":"sleep","description":"Promisified version of setTimeout for use with await","scope":"static","params":[{"name":"delay","description":"The amount of time in ms to delay","type":[[["number"]]]},{"name":"args","description":"Any args to pass to the .then (mostly pointless in this form)","optional":true,"type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The args value passed in"},"meta":{"line":343,"file":"util.js","path":"src/lib/util"},"since":"0.3.0"}],"meta":{"line":13,"file":"util.js","path":"src/lib/util"}}],"typedefs":[{"name":"ReadyMessage","description":"Defaulted as `Successfully initialized. Ready to serve ${this.guilds.size} guilds.`","type":[[["string"]],[["function"]]],"meta":{"line":46,"file":"Client.js","path":"src/lib"}},{"name":"PermissionLevelsOverload","description":"Defaulted to KlasaClient.defaultPermissionLevels","type":[[["PermissionLevels"]]],"meta":{"line":51,"file":"Client.js","path":"src/lib"}},{"name":"KlasaClientOptions","type":[[["external:DiscordClientOptions"]]],"props":[{"name":"commandEditing","description":"Whether the bot should update responses if the command is edited","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commandLogging","description":"Whether the bot should log command usage","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commandMessageLifetime","description":"The threshold for how old command messages can be before sweeping since the last edit in seconds","optional":true,"default":1800,"type":[[["number"]]]},{"name":"console","description":"Config options to pass to the client console","optional":true,"default":"{}","type":[[["ConsoleOptions"]]]},{"name":"consoleEvents","description":"Config options to pass to the client console","optional":true,"default":"{}","type":[[["ConsoleEvents"]]]},{"name":"createPiecesFolders","description":"Whether Klasa should create pieces' folder at start up or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"customPromptDefaults","description":"The defaults for custom prompts","optional":true,"default":"{}","type":[[["CustomPromptDefaults"]]]},{"name":"disabledCorePieces","description":"An array of disabled core piece types, e.g., ['commands', 'arguments']","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"gateways","description":"The options for each built-in gateway","optional":true,"default":"{}","type":[[["GatewaysOptions"]]]},{"name":"language","description":"The default language Klasa should opt-in for the commands","optional":true,"default":"'en-US'","type":[[["string"]]]},{"name":"noPrefixDM","description":"Whether the bot should allow prefixless messages in DMs","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ownerID","description":"The discord user id for the user the bot should respect as the owner (gotten from Discord api if not provided)","optional":true,"type":[[["string"]]]},{"name":"permissionLevels","description":"The permission levels to use with this bot","optional":true,"type":[[["PermissionLevelsOverload"]]]},{"name":"pieceDefaults","description":"Overrides the defaults for all pieces","optional":true,"default":"{}","type":[[["PieceDefaults"]]]},{"name":"prefix","description":"The default prefix the bot should respond to","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"preserveSettings","description":"Whether the bot should preserve (non-default) settings when removed from a guild","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"production","description":"Whether the bot should handle unhandled promise rejections automatically (handles when false) (also can be configured with process.env.NODE_ENV)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"providers","description":"The provider options","optional":true,"type":[[["ProvidersOptions"]]]},{"name":"readyMessage","description":"readyMessage to be passed throughout Klasa's ready event","optional":true,"type":[[["ReadyMessage"]]]},{"name":"regexPrefix","description":"The regular expression prefix if one is provided","optional":true,"type":[[["RegExp"]]]},{"name":"schedule","description":"The options for the internal clock module that runs Schedule","optional":true,"default":"{}","type":[[["ScheduleOptions"]]]},{"name":"slowmode","description":"Amount of time in ms before the bot will respond to a users command since the last command that user has run","optional":true,"default":0,"type":[[["number"]]]},{"name":"slowmodeAggressive","description":"If the slowmode time should reset if a user spams commands faster than the slowmode allows for","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"typing","description":"Whether the bot should type while processing commands","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"prefixCaseInsensitive","description":"Wether the bot should respond to case insensitive prefix or not","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":56,"file":"Client.js","path":"src/lib"}},{"name":"ProvidersOptions","type":[[["Object"]]],"props":[{"name":"default","description":"The default provider to use","optional":true,"type":[[["string"]]]}],"meta":{"line":85,"file":"Client.js","path":"src/lib"}},{"name":"ScheduleOptions","type":[[["Object"]]],"props":[{"name":"interval","description":"The interval in milliseconds for the clock to check the tasks","optional":true,"default":60000,"type":[[["number"]]]}],"meta":{"line":90,"file":"Client.js","path":"src/lib"}},{"name":"GatewaysOptions","type":[[["Object"]]],"props":[{"name":"clientStorage","description":"The options for clientStorage's gateway","optional":true,"type":[[["GatewayDriverRegisterOptions"]]]},{"name":"guilds","description":"The options for guilds' gateway","optional":true,"type":[[["GatewayDriverRegisterOptions"]]]},{"name":"users","description":"The options for users' gateway","optional":true,"type":[[["GatewayDriverRegisterOptions"]]]}],"meta":{"line":95,"file":"Client.js","path":"src/lib"}},{"name":"ConsoleEvents","type":[[["Object"]]],"props":[{"name":"debug","description":"If the debug event should be enabled by default","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"error","description":"If the error event should be enabled by default","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"log","description":"If the log event should be enabled by default","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"verbose","description":"If the verbose event should be enabled by default","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"warn","description":"If the warn event should be enabled by default","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"wtf","description":"If the wtf event should be enabled by default","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":102,"file":"Client.js","path":"src/lib"}},{"name":"PieceDefaults","type":[[["Object"]]],"props":[{"name":"commands","description":"The default command options","optional":true,"default":"{}","type":[[["CommandOptions"]]]},{"name":"events","description":"The default event options","optional":true,"default":"{}","type":[[["EventOptions"]]]},{"name":"extendables","description":"The default extendable options","optional":true,"default":"{}","type":[[["ExtendableOptions"]]]},{"name":"finalizers","description":"The default finalizer options","optional":true,"default":"{}","type":[[["FinalizerOptions"]]]},{"name":"inhibitors","description":"The default inhibitor options","optional":true,"default":"{}","type":[[["InhibitorOptions"]]]},{"name":"languages","description":"The default language options","optional":true,"default":"{}","type":[[["LanguageOptions"]]]},{"name":"monitors","description":"The default monitor options","optional":true,"default":"{}","type":[[["MonitorOptions"]]]},{"name":"providers","description":"The default provider options","optional":true,"default":"{}","type":[[["ProviderOptions"]]]}],"meta":{"line":112,"file":"Client.js","path":"src/lib"}},{"name":"CustomPromptDefaults","type":[[["Object"]]],"props":[{"name":"limit","description":"The number of re-prompts before custom prompt gives up","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"time","description":"The time-limit for re-prompting custom prompts","optional":true,"default":30000,"type":[[["number"]]]},{"name":"quotedStringSupport","description":"Whether the custom prompt should respect quoted strings","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":124,"file":"Client.js","path":"src/lib"}},{"name":"KlasaGuildJSON","type":[[["external:GuildJSON"]]],"props":[{"name":"settings","description":"The per guild settings","type":[[["SettingsJSON"]]]}],"meta":{"line":10,"file":"KlasaGuild.js","path":"src/lib/extensions"}},{"name":"KlasaUserJSON","type":[[["external:UserJSON"]]],"props":[{"name":"settings","description":"The per user settings","type":[[["SettingsJSON"]]]}],"meta":{"line":10,"file":"KlasaUser.js","path":"src/lib/extensions"}},{"name":"PermissionLevelsData","type":[[["Object"]]],"props":[{"name":"broke","description":"Whether the loop broke execution of higher levels","type":[[["boolean"]]]},{"name":"permission","description":"Whether the permission level check passed or not","type":[[["boolean"]]]}],"meta":{"line":13,"file":"PermissionLevels.js","path":"src/lib/permissions"}},{"name":"PermissionLevelOptions","type":[[["Object"]]],"props":[{"name":"break","description":"Whether the loop breaks execution of higher levels","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"fetch","description":"Whether the permission level should autofetch a member or not","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":19,"file":"PermissionLevels.js","path":"src/lib/permissions"}},{"name":"ScheduledTaskOptions","type":[[["Object"]]],"props":[{"name":"id","description":"The ID for the task. By default, it generates one in base36","optional":true,"type":[[["string"]]]},{"name":"catchUp","description":"If the task should try to catch up if the bot is down","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"data","description":"The data to pass to the Task piece when the ScheduledTask is ready for execution","optional":true,"type":[["*"]]}],"meta":{"line":13,"file":"ScheduledTask.js","path":"src/lib/schedule"}},{"name":"TimeResolvable","type":[[["Date"]],[["number"]],[["Cron"]],[["string"]]],"meta":{"line":9,"file":"ScheduledTask.js","path":"src/lib/schedule"}},{"name":"ScheduledTaskUpdateOptions","type":[[["Object"]]],"props":[{"name":"time","description":"The time or {@link Cron} pattern","optional":true,"type":[[["TimeResolvable"]]]},{"name":"catchUp","description":"If the task should try to catch up if the bot is down","optional":true,"type":[[["boolean"]]]},{"name":"data","description":"The data to pass to the Task piece when the ScheduledTask is ready for execution","optional":true,"type":[["*"]]}],"meta":{"line":20,"file":"ScheduledTask.js","path":"src/lib/schedule"}},{"name":"ScheduledTaskJSON","type":[[["Object"]]],"props":[{"name":"id","description":"The task's ID","type":[[["string"]]]},{"name":"taskName","description":"The name of the Task piece this will execute","type":[[["string"]]]},{"name":"time","description":"The UNIX timestamp for when this task ends at","type":[[["number"]]]},{"name":"catchUp","description":"If the task should try to catch up if the bot is down","type":[[["boolean"]]]},{"name":"repeat","description":"The {@link Cron} pattern","optional":true,"type":[[["string"]]]},{"name":"data","description":"The data to pass to the Task piece when the ScheduledTask is ready for execution","type":[[["Object","<"],["string",", "],["*",">"]]]}],"meta":{"line":27,"file":"ScheduledTask.js","path":"src/lib/schedule"}},{"name":"GatewayDriverRegisterOptions","type":[[["Object"]]],"props":[{"name":"provider","description":"The name of the provider to use","optional":true,"default":"this.client.options.providers.default","type":[[["string"]]]},{"name":"schema","description":"The schema to use for this gateway.","optional":true,"type":[[["Schema"]]]},{"name":"syncArg","description":"The sync args to pass to Gateway#sync during Gateway init","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]],[["true"]]]}],"meta":{"line":10,"file":"GatewayDriver.js","path":"src/lib/settings"}},{"name":"GatewayGetPathOptions","type":[[["Object"]]],"props":[{"name":"avoidUnconfigurable","description":"Whether the getPath should avoid unconfigurable keys","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"piece","description":"Whether the getPath should return pieces or folders","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":3,"file":"GatewayStorage.js","path":"src/lib/settings"}},{"name":"GatewayGetPathResult","type":[[["Object"]]],"props":[{"name":"piece","description":"The piece resolved from the path","type":[[["SchemaPiece"]]]},{"name":"route","description":"The resolved path split by dots","type":[[["Array","<"],["string",">"]]]}],"meta":{"line":9,"file":"GatewayStorage.js","path":"src/lib/settings"}},{"name":"GatewayJSON","type":[[["Object"]]],"props":[{"name":"type","description":"The name of this gateway","type":[[["string"]]]},{"name":"options","description":"The options for this gateway","type":[[["GatewayDriverRegisterOptions"]]]},{"name":"schema","description":"The current schema","type":[[["Object"]]]}],"meta":{"line":15,"file":"GatewayStorage.js","path":"src/lib/settings"}},{"name":"SchemaPieceOptions","type":[[["Object"]]],"props":[{"name":"default","description":"The default value for the key","optional":true,"type":[["*"]]},{"name":"filter","description":"The filter to use when resolving this key. The function is passed the resolved value from the resolver, and a guild.","optional":true,"type":[[["function"]]]},{"name":"array","description":"Whether the key should be stored as Array or not","optional":true,"type":[[["boolean"]]]},{"name":"configurable","description":"Whether the key should be configurable by the configuration command or not","optional":true,"type":[[["boolean"]]]},{"name":"min","description":"The minimum value for this piece","optional":true,"type":[[["number"]]]},{"name":"max","description":"The maximum value for this piece","optional":true,"type":[[["number"]]]}],"meta":{"line":5,"file":"SchemaPiece.js","path":"src/lib/settings/schema"}},{"name":"SchemaPieceEditOptions","type":[[["SchemaPieceOptions"]]],"props":[{"name":"type","description":"The new type for this SchemaPiece","optional":true,"type":[[["string"]]]}],"meta":{"line":15,"file":"SchemaPiece.js","path":"src/lib/settings/schema"}},{"name":"SettingsJSON","type":[[["Object"]]],"meta":{"line":11,"file":"Settings.js","path":"src/lib/settings"}},{"name":"SettingsUpdateResult","type":[[["Object"]]],"props":[{"name":"errors","description":"The errors caught from parsing","type":[[["Array","<"],["Error",">"]]]},{"name":"updated","description":"The updated keys","type":[[["Array","<"],["SettingsUpdateResultEntry",">"]]]}],"meta":{"line":15,"file":"Settings.js","path":"src/lib/settings"}},{"name":"SettingsUpdateResultEntry","type":[[["Object"]]],"props":[{"name":"data","description":"A tuple containing the path of the updated key and the new value","type":[[["Array","<"],["any",">"]]]},{"name":"piece","description":"The SchemaPiece instance that manages the updated key","type":[[["SchemaPiece"]]]}],"meta":{"line":21,"file":"Settings.js","path":"src/lib/settings"}},{"name":"SettingsUpdateOptions","type":[[["Object"]]],"props":[{"name":"avoidUnconfigurable","description":"Whether the update should avoid unconfigurable keys","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"action","description":"Whether the update (when using arrays) should add or remove,\nleave it as 'auto' to add or remove depending on the existence of the key in the array","optional":true,"default":"'auto'","type":[[["add","'"]],[["remove","'"]],[["auto","'"]],[["overwrite","'"]]]},{"name":"arrayPosition","description":"The position of the array to replace","optional":true,"default":null,"type":[[["number"]]]},{"name":"force","description":"Whether this should skip the equality checks or not","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":27,"file":"Settings.js","path":"src/lib/settings"}},{"name":"SettingsResetOptions","type":[[["Object"]]],"props":[{"name":"avoidUnconfigurable","description":"Whether the update should avoid unconfigurable keys","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"force","description":"Whether this should skip the equality checks or not","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":36,"file":"Settings.js","path":"src/lib/settings"}},{"name":"AliasPieceOptions","type":[[["PieceOptions"]]],"props":[{"name":"aliases","description":"The aliases for this piece","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]}],"meta":{"line":11,"file":"AliasPiece.js","path":"src/lib/structures/base"}},{"name":"PieceOptions","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the event","optional":true,"default":"theFileName","type":[[["string"]]]},{"name":"enabled","description":"Whether the event is enabled or not","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":21,"file":"Piece.js","path":"src/lib/structures/base"}},{"name":"ExtendedHelp","description":"Defaulted to `language.get('COMMAND_HELP_NO_EXTENDED')`","type":[[["string"]],[["function"]]],"meta":{"line":16,"file":"Command.js","path":"src/lib/structures"}},{"name":"CommandOptions","type":[[["AliasPieceOptions"]]],"props":[{"name":"autoAliases","description":"If automatic aliases should be added (adds aliases of name and aliases without dashes)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"requiredPermissions","description":"The required Discord permissions for the bot to use this command","optional":true,"default":0,"type":[[["external:PermissionResolvable"]]]},{"name":"bucket","description":"The number of times this command can be run before ratelimited by the cooldown","optional":true,"default":1,"type":[[["number"]]]},{"name":"cooldown","description":"The amount of time before the user can run the command again in seconds","optional":true,"default":0,"type":[[["number"]]]},{"name":"cooldownLevel","description":"The level the cooldown applies to (valid options are 'author', 'channel', 'guild')","optional":true,"default":"'author'","type":[[["string"]]]},{"name":"deletable","description":"If the responses should be deleted if the triggering message is deleted","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"description","description":"The help description for the command","optional":true,"default":"''","type":[[["string"]],[["function"]]]},{"name":"extendedHelp","description":"Extended help strings","optional":true,"type":[[["ExtendedHelp"]]]},{"name":"guarded","description":"If the command can be disabled on a guild level (does not effect global disable)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"hidden","description":"If the command should be hidden","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nsfw","description":"If the command should only run in nsfw channels","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"permissionLevel","description":"The required permission level to use the command","optional":true,"default":0,"type":[[["number"]]]},{"name":"promptLimit","description":"The number or attempts allowed for re-prompting an argument","optional":true,"default":0,"type":[[["number"]]]},{"name":"promptTime","description":"The time allowed for re-prompting of this command","optional":true,"default":30000,"type":[[["number"]]]},{"name":"quotedStringSupport","description":"Whether args for this command should not deliminated inside quotes","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"requiredSettings","description":"The required guild settings to use this command","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"runIn","description":"What channel types the command should run in","optional":true,"default":"['text','dm']","type":[[["Array","<"],["string",">"]]]},{"name":"subcommands","description":"Whether to enable sub commands or not","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"usage","description":"The usage string for the command","optional":true,"default":"''","type":[[["string"]]]},{"name":"usageDelim","description":"The string to delimit the command input for usage","optional":true,"nullable":true,"type":[[["string"]]]}],"meta":{"line":21,"file":"Command.js","path":"src/lib/structures"}},{"name":"EventOptions","type":[[["PieceOptions"]]],"props":[{"name":"once","description":"If this event should only be run once and then unloaded","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"emitter","description":"The emitter this event should be for (string indicates a client property)","optional":true,"default":"this.client","type":[[["EventEmitter"]],[["string"]]]},{"name":"event","description":"The event that should be listened to","optional":true,"default":"this.name","type":[[["string"]]]}],"meta":{"line":11,"file":"Event.js","path":"src/lib/structures"}},{"name":"ExtendableOptions","type":[[["PieceOptions"]]],"props":[{"name":"appliesTo","description":"What classes this extendable is for","optional":true,"default":"[]","type":[[["Array","<"],["any",">"]]]}],"meta":{"line":11,"file":"Extendable.js","path":"src/lib/structures"}},{"name":"OriginalPropertyDescriptors","access":"private","type":[[["Object"]]],"props":[{"name":"staticPropertyDescriptors","description":"The original static property descriptors for the class","type":[[["any"]]]},{"name":"instancePropertyDescriptors","description":"The original instance property descriptors for the class","type":[[["any"]]]}],"meta":{"line":16,"file":"Extendable.js","path":"src/lib/structures"}},{"name":"InhibitorOptions","type":[[["PieceOptions"]]],"props":[{"name":"spamProtection","description":"If this inhibitor is meant for spamProtection (disables the inhibitor while generating help)","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":11,"file":"Inhibitor.js","path":"src/lib/structures"}},{"name":"MonitorOptions","type":[[["PieceOptions"]]],"props":[{"name":"ignoreBots","description":"Whether the monitor ignores bots or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ignoreSelf","description":"Whether the monitor ignores itself or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ignoreOthers","description":"Whether the monitor ignores others or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ignoreWebhooks","description":"Whether the monitor ignores webhooks or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ignoreEdits","description":"Whether the monitor ignores edits or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ignoreBlacklistedUsers","description":"Wether the monitor should ignore blacklisted users or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ignoreBlacklistedGuilds","description":"Wether the monitor should ignore blacklisted guilds or not","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":11,"file":"Monitor.js","path":"src/lib/structures"}},{"name":"TextPromptOptions","type":[[["Object"]]],"props":[{"name":"limit","description":"The number of re-prompts before this TextPrompt gives up","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"time","description":"The time-limit for re-prompting","optional":true,"default":30000,"type":[[["number"]]]},{"name":"quotedStringSupport","description":"Whether this prompt should respect quoted strings","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":10,"file":"TextPrompt.js","path":"src/lib/usage"}},{"name":"ColorsFormatOptions","type":[[["Object"]]],"props":[{"name":"style","description":"The style or styles to apply","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"background","description":"The format for the background","optional":true,"type":[[["string"]]]},{"name":"text","description":"The format for the text","optional":true,"type":[[["string"]]]}],"meta":{"line":6,"file":"Colors.js","path":"src/lib/util"}},{"name":"ColorsFormatData","access":"private","type":[[["Object"]]],"props":[{"name":"opening","description":"The opening format data styles","type":[[["Array","<"],["string",">"]]]},{"name":"closing","description":"The closing format data styles","type":[[["Array","<"],["string",">"]]]}],"meta":{"line":13,"file":"Colors.js","path":"src/lib/util"}},{"name":"ConsoleOptions","type":[[["Object"]]],"props":[{"name":"colors","description":"The console color styles","optional":true,"type":[[["ConsoleColorStyles"]]]},{"name":"stdout","description":"The WritableStream for the output logs","optional":true,"type":[[["NodeJSWritableStream"]]]},{"name":"stderr","description":"The WritableStream for the error logs","optional":true,"type":[[["NodeJSWritableStream"]]]},{"name":"timestamps","description":"If false, it won't use timestamps. Otherwise it will use 'YYYY-MM-DD HH:mm:ss' if true or custom if string is given","optional":true,"type":[[["boolean"]],[["string"]]]},{"name":"useColor","description":"Whether the timestamps should use colours","optional":true,"type":[[["boolean"]]]},{"name":"utc","description":"If the timestamps should be in utc","optional":true,"type":[[["boolean"]]]}],"meta":{"line":13,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"ConsoleColorStyles","description":"Time is for the timestamp of the log, message is for the actual output.","type":[[["Object"]]],"props":[{"name":"debug","description":"An object containing a message and time color object","type":[[["ConsoleColorObjects"]]]},{"name":"error","description":"An object containing a message and time color object","type":[[["ConsoleColorObjects"]]]},{"name":"log","description":"An object containing a message and time color object","type":[[["ConsoleColorObjects"]]]},{"name":"verbose","description":"An object containing a message and time color object","type":[[["ConsoleColorObjects"]]]},{"name":"warn","description":"An object containing a message and time color object","type":[[["ConsoleColorObjects"]]]},{"name":"wtf","description":"An object containing a message and time Color Object","type":[[["ConsoleColorObjects"]]]}],"meta":{"line":23,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"ConsoleColorObjects","type":[[["Object"]]],"props":[{"name":"type","description":"The method from Console this color object should call","optional":true,"default":"'log'","type":[[["string"]]]},{"name":"message","description":"A message object containing colors and styles","type":[[["ConsoleMessageObject"]]]},{"name":"time","description":"A time object containing colors and styles","type":[[["ConsoleTimeObject"]]]}],"meta":{"line":33,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"ConsoleMessageObject","type":[[["Object"]]],"props":[{"name":"background","description":"The background color. Can be a basic string like \"red\", a hex string, or a RGB array","type":[[["ConsoleColorTypes"]]]},{"name":"text","description":"The text color. Can be a basic string like \"red\", a hex string, or a RGB array","type":[[["ConsoleColorTypes"]]]},{"name":"style","description":"A style string from ConsoleStyleTypes","type":[[["ConsoleStyleTypes"]]]}],"meta":{"line":40,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"ConsoleTimeObject","type":[[["Object"]]],"props":[{"name":"background","description":"The background color. Can be a basic string like \"red\", a hex string, or a RGB array","type":[[["ConsoleColorTypes"]]]},{"name":"text","description":"The text color. Can be a basic string like \"red\", a hex string, a RGB array, or HSL array","type":[[["ConsoleColorTypes"]]]},{"name":"style","description":"A style string from ConsoleStyleTypes","type":[[["ConsoleStyleTypes"]]]}],"meta":{"line":47,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"ConsoleColorTypes","description":"All the valid color types.","type":[[["Object"]]],"props":[{"name":"black","description":"The black colour","type":[[["string"]]]},{"name":"red","description":"The red colour","type":[[["string"]]]},{"name":"green","description":"The green colour","type":[[["string"]]]},{"name":"yellow","description":"The yellow colour","type":[[["string"]]]},{"name":"blue","description":"The blue colour","type":[[["string"]]]},{"name":"magenta","description":"The magenta colour","type":[[["string"]]]},{"name":"cyan","description":"The cyan colour","type":[[["string"]]]},{"name":"gray","description":"The gray colour","type":[[["string"]]]},{"name":"grey","description":"The grey colour (alias for gray)","type":[[["string"]]]},{"name":"lightgray","description":"The light gray colour","type":[[["string"]]]},{"name":"lightgrey","description":"The light grey colour (alias for light gray)","type":[[["string"]]]},{"name":"lightred","description":"The light red colour","type":[[["string"]]]},{"name":"lightgreen","description":"The light green colour","type":[[["string"]]]},{"name":"lightyellow","description":"The light yellow colour","type":[[["string"]]]},{"name":"lightblue","description":"The light blue colour","type":[[["string"]]]},{"name":"lightmagenta","description":"The light magenta colour","type":[[["string"]]]},{"name":"lightcyan","description":"The light cyan colour","type":[[["string"]]]},{"name":"white","description":"The white colour","type":[[["string"]]]}],"meta":{"line":54,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"ConsoleStyleTypes","type":[[["Object"]]],"props":[{"name":"normal","description":"Default style","type":[[["string"]]]},{"name":"bold","description":"Bold style. May appear with a lighter colour in many terminals","type":[[["string"]]]},{"name":"dim","description":"Dim style","type":[[["string"]]]},{"name":"italic","description":"Italic style","type":[[["string"]]]},{"name":"underline","description":"Underline style","type":[[["string"]]]},{"name":"inverse","description":"Inverse colours style","type":[[["string"]]]},{"name":"hidden","description":"Hidden text style","type":[[["string"]]]},{"name":"strikethrough","description":"Strikethrough text style","type":[[["string"]]]}],"meta":{"line":76,"file":"KlasaConsole.js","path":"src/lib/util"}},{"name":"QueryBuilderDatatype","type":[[["Object"]]],"props":[{"name":"array","description":"A function that converts the current datatype into an array","optional":true,"default":"() => 'TEXT'","type":[[["function"]]]},{"name":"resolver","description":"The resolver to convert JS objects into compatible data for the SQL database. This can be used to prevent SQL injections","optional":true,"default":null,"type":[[["function"]]]},{"name":"type","description":"The name of the datatype, e.g. VARCHAR, DATE, or BIT","type":[[["string"]]]}],"meta":{"line":6,"file":"QueryBuilder.js","path":"src/lib/util"}},{"name":"QueryBuilderOptions","type":[[["Object","<"],["string",", "],["QueryBuilderDatatype",">"]]],"props":[{"name":"formatDatatype","description":"The datatype formatter for the SQL database","optional":true,"type":[[["function"]]]},{"name":"arrayResolver","description":"The specialized resolver for array keys","optional":true,"type":[[["function"]]]}],"meta":{"line":13,"file":"QueryBuilder.js","path":"src/lib/util"}},{"name":"Emoji","description":"A single unicode character","type":[[["string"]]],"meta":{"line":9,"file":"ReactionHandler.js","path":"src/lib/util"}},{"name":"ReactionHandlerOptions","type":[[["Object"]]],"props":[{"name":"filter","description":"A filter function to add to the ReactionHandler","optional":true,"type":[[["function"]]]},{"name":"stop","description":"If a stop reaction should be included","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"prompt","description":"The prompt to be used when awaiting user input on a page to jump to","optional":true,"default":"message.language.get('REACTIONHANDLER_PROMPT')","type":[[["string"]]]},{"name":"startPage","description":"The page to start the RichMenu on","optional":true,"default":0,"type":[[["number"]]]},{"name":"max","description":"The maximum total amount of reactions to collect","optional":true,"type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","optional":true,"type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","optional":true,"type":[[["number"]]]},{"name":"time","description":"The amount of time before the jump menu should close","optional":true,"default":30000,"type":[[["number"]]]}],"meta":{"line":14,"file":"ReactionHandler.js","path":"src/lib/util"}},{"name":"RichDisplayEmojisObject","type":[[["Object"]]],"props":[{"name":"first","description":"The emoji for the 'first' button","type":[[["Emoji"]]]},{"name":"back","description":"The emoji for the 'back' button","type":[[["Emoji"]]]},{"name":"forward","description":"The emoji for the 'forward' button","type":[[["Emoji"]]]},{"name":"last","description":"The emoji for the 'last' button","type":[[["Emoji"]]]},{"name":"jump","description":"The emoji for the 'jump' button","type":[[["Emoji"]]]},{"name":"info","description":"The emoji for the 'info' button","type":[[["Emoji"]]]},{"name":"stop","description":"The emoji for the 'stop' button","type":[[["Emoji"]]]}],"meta":{"line":9,"file":"RichDisplay.js","path":"src/lib/util"}},{"name":"RichDisplayRunOptions","type":[[["Object"]]],"props":[{"name":"filter","description":"A filter function to add to the ReactionHandler (Receives: Reaction, User)","optional":true,"type":[[["function"]]]},{"name":"stop","description":"If a stop reaction should be included","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"jump","description":"If a jump reaction should be included","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"firstLast","description":"If a first and last reaction should be included","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"prompt","description":"The prompt to be used when awaiting user input on a page to jump to","optional":true,"default":"message.language.get('REACTIONHANDLER_PROMPT')","type":[[["string"]]]},{"name":"startPage","description":"The page to start the RichDisplay on","optional":true,"default":0,"type":[[["number"]]]},{"name":"max","description":"The maximum total amount of reactions to collect","optional":true,"type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","optional":true,"type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","optional":true,"type":[[["number"]]]},{"name":"time","description":"The maximum amount of time before this RichDisplay should expire","optional":true,"type":[[["number"]]]}],"meta":{"line":20,"file":"RichDisplay.js","path":"src/lib/util"}},{"name":"RichMenuEmojisObject","type":[[["RichDisplayEmojisObject"]]],"props":[{"name":"zero","description":"The emoji for the 'zero' button","type":[[["Emoji"]]]},{"name":"one","description":"The emoji for the 'one' button","type":[[["Emoji"]]]},{"name":"two","description":"The emoji for the 'two' button","type":[[["Emoji"]]]},{"name":"three","description":"The emoji for the 'three' button","type":[[["Emoji"]]]},{"name":"four","description":"The emoji for the 'four' button","type":[[["Emoji"]]]},{"name":"five","description":"The emoji for the 'five' button","type":[[["Emoji"]]]},{"name":"six","description":"The emoji for the 'six' button","type":[[["Emoji"]]]},{"name":"seven","description":"The emoji for the 'seven' button","type":[[["Emoji"]]]},{"name":"eight","description":"The emoji for the 'eight' button","type":[[["Emoji"]]]},{"name":"nine","description":"The emoji for the 'nine' button","type":[[["Emoji"]]]}],"meta":{"line":9,"file":"RichMenu.js","path":"src/lib/util"}},{"name":"MenuOptions","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the option","type":[[["string"]]]},{"name":"body","description":"The description of the option","type":[[["string"]]]},{"name":"inline","description":"Whether the option should be inline","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":23,"file":"RichMenu.js","path":"src/lib/util"}},{"name":"RichMenuRunOptions","type":[[["Object"]]],"props":[{"name":"filter","description":"A filter function to add to the ReactionHandler (Receives: Reaction, User)","optional":true,"type":[[["function"]]]},{"name":"stop","description":"If a stop reaction should be included","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"prompt","description":"The prompt to be used when awaiting user input on a page to jump to","optional":true,"default":"message.language.get('REACTIONHANDLER_PROMPT')","type":[[["string"]]]},{"name":"startPage","description":"The page to start the RichMenu on","optional":true,"default":0,"type":[[["number"]]]},{"name":"max","description":"The maximum total amount of reactions to collect","optional":true,"type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","optional":true,"type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","optional":true,"type":[[["number"]]]},{"name":"time","description":"The maximum amount of time before this RichMenu should expire","optional":true,"type":[[["number"]]]}],"meta":{"line":30,"file":"RichMenu.js","path":"src/lib/util"}},{"name":"TimestampObject","type":[[["Object"]]],"props":[{"name":"type","description":"The type of the current variable","type":[[["string"]]]},{"name":"content","description":"The content of the type. Only accessible if the type is 'literal'","optional":true,"type":[[["string"]]]}],"meta":{"line":8,"file":"Timestamp.js","path":"src/lib/util"}},{"name":"GuildResolvable","type":[[["KlasaGuild"]],[["KlasaMessage"]],[["external:GuildChannel"]]],"meta":{"line":15,"file":"util.js","path":"src/lib/util"}},{"name":"Stringifible","type":[[["string"]],["*"]],"meta":{"line":19,"file":"util.js","path":"src/lib/util"}}],"externals":[{"name":"Channel","see":["{@link https://discord.js.org/#/docs/main/master/class/Channel}"],"meta":{"line":88,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":92,"file":"index.js","path":"src"}},{"name":"DiscordClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":96,"file":"index.js","path":"src"}},{"name":"ClientApplication","see":["{@link https://discord.js.org/#/docs/main/master/class/ClientApplication}"],"meta":{"line":100,"file":"index.js","path":"src"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":104,"file":"index.js","path":"src"}},{"name":"DMChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/DMChannel}"],"meta":{"line":108,"file":"index.js","path":"src"}},{"name":"Guild","see":["{@link https://discord.js.org/#/docs/main/master/class/Guild}"],"meta":{"line":112,"file":"index.js","path":"src"}},{"name":"GuildMember","see":["{@link https://discord.js.org/#/docs/main/master/class/GuildMember}"],"meta":{"line":116,"file":"index.js","path":"src"}},{"name":"GuildResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/GuildResolvable}"],"meta":{"line":120,"file":"index.js","path":"src"}},{"name":"Message","see":["{@link https://discord.js.org/#/docs/main/master/class/Message}"],"meta":{"line":124,"file":"index.js","path":"src"}},{"name":"MessageAttachment","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageAttachment}"],"meta":{"line":128,"file":"index.js","path":"src"}},{"name":"MessageEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageEmbed}"],"meta":{"line":188,"file":"index.js","path":"src"}},{"name":"MessageReaction","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageReaction}"],"meta":{"line":136,"file":"index.js","path":"src"}},{"name":"MessageOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/MessageOptions}"],"meta":{"line":140,"file":"index.js","path":"src"}},{"name":"Role","see":["{@link https://discord.js.org/#/docs/main/master/class/Role}"],"meta":{"line":144,"file":"index.js","path":"src"}},{"name":"StringResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/StringResolvable}"],"meta":{"line":148,"file":"index.js","path":"src"}},{"name":"TextChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/TextChannel}"],"meta":{"line":152,"file":"index.js","path":"src"}},{"name":"VoiceChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/VoiceChannel}"],"meta":{"line":156,"file":"index.js","path":"src"}},{"name":"CategoryChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/CategoryChannel}"],"meta":{"line":160,"file":"index.js","path":"src"}},{"name":"User","see":["{@link https://discord.js.org/#/docs/main/master/class/User}"],"meta":{"line":164,"file":"index.js","path":"src"}},{"name":"UserResolvable","see":["{@link https://discord.js.org/#/docs/main/master/class/UserResolvable}"],"meta":{"line":168,"file":"index.js","path":"src"}},{"name":"Emoji","see":["{@link https://discord.js.org/#/docs/main/master/class/Emoji}"],"meta":{"line":172,"file":"index.js","path":"src"}},{"name":"ReactionEmoji","see":["{@link https://discord.js.org/#/docs/main/master/class/ReactionEmoji}"],"meta":{"line":176,"file":"index.js","path":"src"}},{"name":"ReactionCollector","see":["{@link https://discord.js.org/#/docs/main/master/class/ReactionCollector}"],"meta":{"line":180,"file":"index.js","path":"src"}},{"name":"Webhook","see":["{@link https://discord.js.org/#/docs/main/master/class/Webhook}"],"meta":{"line":184,"file":"index.js","path":"src"}},{"name":"ShardingManager","see":["{@link https://discord.js.org/#/docs/main/master/class/ShardingManager}"],"meta":{"line":192,"file":"index.js","path":"src"}},{"name":"Permissions","see":["{@link https://discord.js.org/#/docs/main/master/class/Permissions}"],"meta":{"line":196,"file":"index.js","path":"src"}},{"name":"PermissionResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/PermissionResolvable}"],"meta":{"line":200,"file":"index.js","path":"src"}},{"name":"Snowflake","see":["{@link https://discord.js.org/#/docs/main/stable/typedef/Snowflake}"],"meta":{"line":204,"file":"index.js","path":"src"}},{"name":"ExecOptions","see":["{@link https://nodejs.org/dist/latest-v10.x/docs/api/child_process.html#child_process_child_process_exec_command_options_callback}"],"meta":{"line":208,"file":"index.js","path":"src"}}]}